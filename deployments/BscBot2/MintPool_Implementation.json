{
  "address": "0xB5fC632190d273DC243b760568d14Fb227FE888e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "selfAmount",
          "type": "uint256"
        }
      ],
      "name": "Sell",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "powerAmount",
          "type": "uint256"
        }
      ],
      "name": "nftPowerReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "nftTokenReward",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_amountDailyUp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_binder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_fundAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rUsdt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_inProject",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_inviteAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_inviteFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_invitor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lastAmountRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lastDailyUpTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lpReleaseDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_nft",
      "outputs": [
        {
          "internalType": "contract INFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_pauseSell",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellJoinRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellLPReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellNFTRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellSelfRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_speedUpDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_speedUpReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_teamAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_teamNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_userLPInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastReleaseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseInitAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedUpTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "addTotalMintReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "calInvite",
          "type": "bool"
        }
      ],
      "name": "addUserAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardMintDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "calMintReward",
              "type": "uint256"
            }
          ],
          "internalType": "struct MintPool.UserInfo[]",
          "name": "userInfos",
          "type": "tuple[]"
        }
      ],
      "name": "batchInsertUserInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "invitor",
          "type": "address"
        }
      ],
      "name": "bindInvitor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "account",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "invitor",
          "type": "address[]"
        }
      ],
      "name": "bindInvitors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userRewardLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateNFTReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "invitor",
          "type": "address"
        }
      ],
      "name": "checkForLevelUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBinderLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdtAmount",
          "type": "uint256"
        }
      ],
      "name": "getJoinTokenAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPendingMintReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "getSellUsdtOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "selfUsdt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserNFTLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usdt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mintRewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "defaultInvitor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accMintPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accMintReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPerSec",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastMintTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMintReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setAmountDailyUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setDefaultInvitor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "account",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        }
      ],
      "name": "setDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setFundAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setInProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "account",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        }
      ],
      "name": "setInviteAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setInviteFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "name": "setLPReleaseDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setLastAmountRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "setLastDailyReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "setLastDailyUpTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintPerSec",
          "type": "uint256"
        }
      ],
      "name": "setMintPerSec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        }
      ],
      "name": "setNFTAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "p",
          "type": "bool"
        }
      ],
      "name": "setPauseSell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accMintPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accMintReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPerSec",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastMintTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMintReward",
          "type": "uint256"
        }
      ],
      "name": "setPoolInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "account",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        }
      ],
      "name": "setReferralAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "account",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        }
      ],
      "name": "setReferralReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setSeedUpReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "account",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        }
      ],
      "name": "setSellJoinAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setSellJoinRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setSellLPReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setSellNFTRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setSellSelfRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "c",
          "type": "uint256"
        }
      ],
      "name": "setSpeedUpCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "name": "setSpeedUpDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mt",
          "type": "uint256"
        }
      ],
      "name": "setSpeedUpMaxTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "account",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        }
      ],
      "name": "setTeamAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setTotalUsd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "setUserLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "account",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "level",
          "type": "uint256[]"
        }
      ],
      "name": "setUserLevels",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "account",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lockAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "calAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastReleaseTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releaseInitAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releaseDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "speedUpTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct MintPool.UserLPInfo[]",
          "name": "lpInfos",
          "type": "tuple[]"
        }
      ],
      "name": "setUserLpInfos",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "speedUpLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "superAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateDailyUpRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardMintDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calMintReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v1Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v2Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v3Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v4Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v5Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x57d69c0c64be632a56798398f721e8d7c2e260eb3dc541d988a27fb9cba44899",
  "receipt": {
    "to": null,
    "from": "0x537D678224CA0232345d5ab3814680620499D418",
    "contractAddress": "0xB5fC632190d273DC243b760568d14Fb227FE888e",
    "transactionIndex": 105,
    "gasUsed": "4417116",
    "logsBloom": "0x
    "blockHash": "0x438ddcd6b47eb7c38f690276e78fc35dab7f439e829d8a5886ae30fb69b93944",
    "transactionHash": "0x57d69c0c64be632a56798398f721e8d7c2e260eb3dc541d988a27fb9cba44899",
    "logs": [
      {
        "transactionIndex": 105,
        "blockNumber": 34974577,
        "transactionHash": "0x57d69c0c64be632a56798398f721e8d7c2e260eb3dc541d988a27fb9cba44899",
        "address": "0xB5fC632190d273DC243b760568d14Fb227FE888e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000537d678224ca0232345d5ab3814680620499d418"
        ],
        "data": "0x",
        "logIndex": 341,
        "blockHash": "0x438ddcd6b47eb7c38f690276e78fc35dab7f439e829d8a5886ae30fb69b93944"
      }
    ],
    "blockNumber": 34974577,
    "cumulativeGasUsed": "15665530",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "35c03766901468b2dac6332c186175da",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"selfAmount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"powerAmount\",\"type\":\"uint256\"}],\"name\":\"nftPowerReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"nftTokenReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_amountDailyUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_binder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inProject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inviteAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_inviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_invitor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastAmountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastDailyUpTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpReleaseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nft\",\"outputs\":[{\"internalType\":\"contract INFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pauseSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellJoinRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellNFTRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellSelfRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_speedUpDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_speedUpReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_teamAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_teamNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userLPInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseInitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedUpTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"addTotalMintReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"calInvite\",\"type\":\"bool\"}],\"name\":\"addUserAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardMintDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calMintReward\",\"type\":\"uint256\"}],\"internalType\":\"struct MintPool.UserInfo[]\",\"name\":\"userInfos\",\"type\":\"tuple[]\"}],\"name\":\"batchInsertUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"bindInvitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"invitor\",\"type\":\"address[]\"}],\"name\":\"bindInvitors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userRewardLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateNFTReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"checkForLevelUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBinderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"getJoinTokenAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPendingMintReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getSellUsdtOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserNFTLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintRewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultInvitor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMintPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMintReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMintTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMintReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setAmountDailyUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setDefaultInvitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"setDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setInProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"setInviteAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setInviteFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setLPReleaseDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setLastAmountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"setLastDailyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setLastDailyUpTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPerSec\",\"type\":\"uint256\"}],\"name\":\"setMintPerSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"p\",\"type\":\"bool\"}],\"name\":\"setPauseSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMintPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMintReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMintTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMintReward\",\"type\":\"uint256\"}],\"name\":\"setPoolInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"setReferralAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"setReferralReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setSeedUpReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"setSellJoinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setSellJoinRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setSellLPReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setSellNFTRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setSellSelfRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setSpeedUpCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setSpeedUpDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mt\",\"type\":\"uint256\"}],\"name\":\"setSpeedUpMaxTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"setTeamAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTotalUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setUserLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"level\",\"type\":\"uint256[]\"}],\"name\":\"setUserLevels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseInitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedUpTime\",\"type\":\"uint256\"}],\"internalType\":\"struct MintPool.UserLPInfo[]\",\"name\":\"lpInfos\",\"type\":\"tuple[]\"}],\"name\":\"setUserLpInfos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokenAmount\",\"type\":\"uint256\"}],\"name\":\"speedUpLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"superAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDailyUpRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardMintDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calMintReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v3Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v4Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v5Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintPool.sol\":\"MintPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/MintPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport \\\"./interface/INFT.sol\\\";\\nimport \\\"./interface/ISwapRouter.sol\\\";\\nimport \\\"./interface/ISwapFactory.sol\\\";\\nimport \\\"./interface/ISwapPair.sol\\\";\\nimport \\\"./interface/IToken.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\ncontract MintPool is Ownable, Initializable {\\n    struct UserInfo {\\n        bool isActive;\\n        uint256 amount;\\n        uint256 rewardMintDebt;\\n        uint256 calMintReward;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 totalAmount;\\n        uint256 accMintPerShare;\\n        uint256 accMintReward;\\n        uint256 mintPerSec;\\n        uint256 lastMintTime;\\n        uint256 totalMintReward;\\n    }\\n\\n    struct UserLPInfo {\\n        uint256 lockAmount;\\n        uint256 calAmount;\\n        uint256 claimedAmount;\\n        uint256 lastReleaseTime;\\n        uint256 releaseInitAmount;\\n        uint256 releaseDuration;\\n        uint256 speedUpTime;\\n    }\\n\\n    PoolInfo public poolInfo;\\n    mapping(address => UserInfo) public userInfo;\\n    mapping(address => UserLPInfo) public _userLPInfo;\\n\\n    ISwapRouter private _swapRouter;\\n    address private _usdt;\\n    uint256 private _minAmount;\\n    address private _mintRewardToken;\\n    address public  _lp;\\n    INFT public _nft;\\n\\n    mapping(address => address) public _invitor;\\n    mapping(address => address[]) public _binder;\\n    mapping(uint256 => uint256) public _inviteFee;\\n    uint256 private immutable _inviteLen = 3;\\n    address private _defaultInvitor;\\n\\n    mapping(address => uint256) public _inviteAmount;\\n    mapping(address => uint256) public _teamAmount;\\n    mapping(address => uint256) public _teamNum;\\n\\n    bool public _pauseSell;\\n    uint256 public _sellSelfRate;\\n    uint256 public _sellJoinRate;\\n    uint256 public _sellNFTRate;\\n    address public _sellLPReceiver;\\n    mapping(address => uint256) private _sellJoinAmount;\\n    address public _fundAddress;\\n\\n    mapping(address => address[]) public referrals;\\n    mapping(address => address) public superAccount;\\n    mapping(address => uint256) public referralAmount;\\n    mapping(address => uint256) public depositAmount;\\n    mapping(address => uint256) public referralReward;\\n    mapping(address => uint256) public userLevel;\\n\\n    uint256 public immutable v1Amount = 2500 ether;\\n    uint256 public immutable v2Amount = 20000 ether;\\n    uint256 public immutable v3Amount = 50000 ether;\\n    uint256 public immutable v4Amount = 150000 ether;\\n    uint256 public immutable v5Amount = 500000 ether;\\n\\n    bool private _pauseJoin;\\n    uint256 public _lastDailyUpTime;\\n    uint256 public _lastAmountRate;\\n    uint256 public _amountDailyUp;\\n    uint256 private immutable _divFactor = 10000;\\n    uint256 private immutable _dailyDuration = 1 days;\\n\\n    uint256 public _lpReleaseDuration;\\n    //\\n    uint256 private _speedUpCost;\\n    uint256 public _speedUpDuration;\\n    address public _speedUpReceiver;\\n    uint256 private _speedUpMaxTime;\\n    uint256 private _totalUsdt;\\n\\n    mapping(address => bool) public _inProject;\\n    uint256 private _lastDailyReward;\\n\\n\\n    event nftTokenReward(address indexed account, uint256 indexed level, uint256 indexed tokenAmount);\\n    event nftPowerReward(address indexed account, uint256 indexed level, uint256 indexed powerAmount);\\n    event Deposit(address indexed account, uint256 indexed amount);\\n    event Sell(address indexed account, uint256 indexed tokenAmount, uint256 indexed selfAmount);\\n\\n\\n    // ******** modifier *********\\n\\n    modifier onlyWhiteList() {\\n        require(\\n            msg.sender == _fundAddress ||\\n            msg.sender == owner() ||\\n            msg.sender == address(_nft),\\n            \\\"only white list\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyInProject() {\\n        require(_inProject[msg.sender] || msg.sender == owner(), \\\"only project\\\");\\n        _;\\n    }\\n\\n\\n    // ******** constructor *********\\n    function initialize(\\n        address swapRouter,\\n        address usdt,\\n        address mintRewardToken,\\n        address nft,\\n        address defaultInvitor,\\n        address fundAddress,\\n        address _owner\\n    ) external initializer {\\n        _pauseJoin = true;\\n        _swapRouter = ISwapRouter(swapRouter);\\n        _usdt = usdt;\\n        _minAmount = 10 ether;\\n        _nft = INFT(nft);\\n        _mintRewardToken = mintRewardToken;\\n\\n        _lp = ISwapFactory(_swapRouter.factory()).getPair(usdt, mintRewardToken);\\n\\n        poolInfo.lastMintTime = block.timestamp;\\n        _defaultInvitor = defaultInvitor;\\n        userInfo[defaultInvitor].isActive = true;\\n\\n        _inviteFee[0] = 800;\\n        // 8%\\n        _inviteFee[1] = 500;\\n        // 5%\\n        _inviteFee[2] = 300;\\n        // 3%\\n\\n        _speedUpCost = 300 ether;\\n\\n        safeApprove(usdt, swapRouter, ~uint256(0));\\n        safeApprove(mintRewardToken, swapRouter, ~uint256(0));\\n        _sellLPReceiver = fundAddress;\\n        _fundAddress = fundAddress;\\n        _speedUpMaxTime = 3;\\n        _speedUpReceiver = 0x000000000000000000000000000000000000dEaD;\\n\\n        _sellSelfRate = 5000;\\n        _sellJoinRate = 4000;\\n        _sellNFTRate = 500;\\n\\n        _lastAmountRate = 10000;\\n        _amountDailyUp = 10100;\\n        _lpReleaseDuration = 90 days;\\n        _speedUpDuration = 10 days;\\n\\n        _transferOwnership(_owner);\\n    }\\n\\n    receive() external payable {}\\n\\n\\n    //     ******** public *********\\n    //     function sell(uint256 tokenAmount) public {\\n    //         require(msg.sender == tx.origin, \\\"not Origin\\\");\\n    //         require(!_pauseSell, \\\"pause\\\");\\n    //\\n    //         _bindInvitor(msg.sender, _defaultInvitor);\\n    //         _takeToken(_mintRewardToken, msg.sender, address(this), tokenAmount);\\n    //\\n    //         IERC20 USDT = IERC20(_usdt);\\n    //         uint256 usdtBalanceBefore = USDT.balanceOf(address(this));\\n    //\\n    //         address[] memory path = new address[](2);\\n    //         path[0] = _mintRewardToken;\\n    //         path[1] = _usdt;\\n    //\\n    //         _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    //             tokenAmount,\\n    //             0,\\n    //             path,\\n    //             address(this),\\n    //             block.timestamp\\n    //         );\\n    //\\n    //         uint256 usdtAmount = USDT.balanceOf(address(this)) - usdtBalanceBefore;\\n    //         uint256 selfUsdt = (usdtAmount * _sellSelfRate) / 10000;\\n    //         _giveToken(_usdt, msg.sender, selfUsdt);\\n    //\\n    //         uint256 sellJoinUsdt = (usdtAmount * _sellJoinRate) / 10000;\\n    //         addLP(msg.sender, sellJoinUsdt, 0, false);\\n    //\\n    //         _updatePool();\\n    //         uint256 sellJoinAmount = (sellJoinUsdt * _lastAmountRate) / _divFactor;\\n    //         _addUserAmount(msg.sender, sellJoinAmount, false);\\n    //         _sellJoinAmount[msg.sender] += sellJoinAmount;\\n    //\\n    //         uint256 nftUsdt = (usdtAmount * _sellNFTRate) / 10000;\\n    //         _giveToken(_usdt, address(_nft), nftUsdt);\\n    //         _nft.addTokenReward(nftUsdt);\\n    //\\n    //         uint256 fundUsdt = usdtAmount - selfUsdt - sellJoinUsdt - nftUsdt;\\n    //         _giveToken(_usdt, _fundAddress, fundUsdt);\\n    //\\n    //         IToken(_mintRewardToken).giveMintReward();\\n    //\\n    //         emit Sell(msg.sender, tokenAmount, selfUsdt);\\n    //     }\\n    //\\n    //\\n    //        function deposit(uint256 amount, uint256 minTokenAmount, address invitor) external {\\n    //            require(!_pauseJoin, \\\"deposit pause\\\");\\n    //            require(amount >= _minAmount, \\\"deposit too low\\\");\\n    //\\n    //            address account = msg.sender;\\n    //            require(account == msg.sender, \\\"deposit not origin\\\");\\n    //\\n    //            _totalUsdt += amount;\\n    //\\n    //            _bindInvitor(account, invitor);\\n    //\\n    //            _takeToken(_usdt, account, address(this), amount);\\n    //\\n    //            addLP(account, amount, minTokenAmount, true);\\n    //\\n    //            _updatePool();\\n    //\\n    //            _addUserAmount(account, (amount * _lastAmountRate) / _divFactor, true);\\n    //\\n    //            IToken(_mintRewardToken).giveMintReward();\\n    //\\n    //            distributeNFTRewards(invitor, amount);\\n    //\\n    //            addReferral(amount, account, invitor);\\n    //\\n    //            emit Deposit(account, amount);\\n    //        }\\n    //\\n    //\\n    //        function claim() public {\\n    //            UserInfo storage user = userInfo[msg.sender];\\n    //\\n    //            _calReward(user, true);\\n    //            uint256 pendingMint = user.calMintReward;\\n    //\\n    //            if (pendingMint > 0) {\\n    //                _giveToken(_mintRewardToken, msg.sender, pendingMint);\\n    //                user.calMintReward = 0;\\n    //            }\\n    //\\n    //            IToken(_mintRewardToken).giveMintReward();\\n    //        }\\n    //\\n    //\\n    //        function claimLP() public {\\n    //            require(msg.sender == tx.origin, \\\"claimLP not Origin\\\");\\n    //\\n    //            UserLPInfo storage userLPInfo = _userLPInfo[msg.sender];\\n    //            uint256 nowTime = block.timestamp;\\n    //\\n    //            if (userLPInfo.lastReleaseTime > 0 && nowTime > userLPInfo.lastReleaseTime) {\\n    //                uint256 releaseAmount = (userLPInfo.releaseInitAmount * (nowTime - userLPInfo.lastReleaseTime)) / userLPInfo.releaseDuration;\\n    //                uint256 maxAmount = userLPInfo.lockAmount - userLPInfo.calAmount - userLPInfo.claimedAmount;\\n    //                if (releaseAmount > maxAmount) {\\n    //                    releaseAmount = maxAmount;\\n    //                }\\n    //                userLPInfo.calAmount += releaseAmount;\\n    //            }\\n    //\\n    //            uint256 calAmount = userLPInfo.calAmount;\\n    //\\n    //            if (calAmount > 0) {\\n    //                _giveToken(_lp, msg.sender, calAmount);\\n    //                userLPInfo.calAmount = 0;\\n    //                userLPInfo.claimedAmount += calAmount;\\n    //                IToken(_mintRewardToken).addUserLPAmount(msg.sender, calAmount);\\n    //            }\\n    //\\n    //            if (nowTime > userLPInfo.lastReleaseTime) {\\n    //                userLPInfo.lastReleaseTime = nowTime;\\n    //            }\\n    //\\n    //            IToken(_mintRewardToken).giveMintReward();\\n    //        }\\n\\n\\n    function checkForLevelUp(address invitor) public {\\n        if (referrals[invitor].length > 1) {\\n            uint256 totalReferralAmount = referralAmount[invitor] + depositAmount[invitor];\\n            uint256 currentLevel = userLevel[invitor];\\n            uint256[5] memory amountCheckArray = [v1Amount * 2, v2Amount, v3Amount, v4Amount, v5Amount];\\n            if (checkLevelCount(invitor, amountCheckArray, totalReferralAmount, currentLevel) && currentLevel < 5) {\\n                userLevel[invitor] = currentLevel + 1;\\n            }\\n        }\\n    }\\n\\n    function getPendingMintReward(address account) public view returns (uint256 reward) {\\n        PoolInfo storage pool = poolInfo;\\n        UserInfo storage user = userInfo[account];\\n\\n        if (user.amount > 0) {\\n            uint256 blockTime = block.timestamp;\\n            uint256 lastRewardTime = pool.lastMintTime;\\n\\n            if (blockTime > lastRewardTime) {\\n                uint256 poolPendingReward = pool.mintPerSec * (blockTime - lastRewardTime);\\n                uint256 totalReward = pool.totalMintReward;\\n                uint256 accReward = pool.accMintReward;\\n                uint256 remainReward = (totalReward > accReward) ? (totalReward - accReward) : 0;\\n\\n                poolPendingReward = (poolPendingReward > remainReward) ? remainReward : poolPendingReward;\\n\\n                reward = (user.amount * (pool.accMintPerShare + (poolPendingReward * 1e18) / pool.totalAmount)) / 1e18 - user.rewardMintDebt;\\n            }\\n        }\\n\\n        return reward;\\n    }\\n\\n\\n    function updateDailyUpRate() public {\\n        uint256 lastDailyUpTime = _lastDailyUpTime;\\n        if (0 == lastDailyUpTime) {\\n            return;\\n        }\\n        uint256 dailyDuration = _dailyDuration;\\n        uint256 nowTime = block.timestamp;\\n        if (nowTime < lastDailyUpTime + dailyDuration) {\\n            return;\\n        }\\n        uint256 ds = (nowTime - lastDailyUpTime) / dailyDuration;\\n        _lastDailyUpTime = lastDailyUpTime + ds * dailyDuration;\\n\\n        uint256 lastAmountRate = _lastAmountRate;\\n        lastAmountRate = (lastAmountRate * _amountDailyUp ** ds) / _divFactor ** ds;\\n        _lastAmountRate = lastAmountRate;\\n    }\\n\\n    function speedUpLP(uint256 maxTokenAmount) public {\\n        require(msg.sender == tx.origin, \\\"not Origin\\\");\\n        UserLPInfo storage userLPInfo = _userLPInfo[msg.sender];\\n        uint256 lastReleaseTime = userLPInfo.lastReleaseTime;\\n        uint256 nowTime = block.timestamp;\\n        if (lastReleaseTime > 0 && nowTime > lastReleaseTime) {\\n            uint256 releaseAmount = (userLPInfo.releaseInitAmount *\\n            (nowTime - lastReleaseTime)) / userLPInfo.releaseDuration;\\n            uint256 maxAmount = userLPInfo.lockAmount -\\n            userLPInfo.calAmount -\\n            userLPInfo.claimedAmount;\\n            if (releaseAmount > maxAmount) {\\n                releaseAmount = maxAmount;\\n            }\\n            userLPInfo.calAmount += releaseAmount;\\n        }\\n\\n        if (nowTime > lastReleaseTime) {\\n            userLPInfo.lastReleaseTime = nowTime;\\n        }\\n\\n        require(userLPInfo.speedUpTime < _speedUpMaxTime, \\\"speedUpTime is max\\\");\\n        userLPInfo.speedUpTime++;\\n        uint256 tokenAmount = getSpeedUpTokenAmount();\\n        require(tokenAmount <= maxTokenAmount, \\\"token amount is too much\\\");\\n        _takeToken(_mintRewardToken, msg.sender, _speedUpReceiver, tokenAmount);\\n\\n        //\\n        uint256 remainAmount = userLPInfo.lockAmount -\\n        userLPInfo.calAmount -\\n        userLPInfo.claimedAmount;\\n        uint256 remainDuration = (remainAmount * userLPInfo.releaseDuration) /\\n        userLPInfo.releaseInitAmount;\\n\\n        //\\n        userLPInfo.releaseInitAmount = remainAmount;\\n        uint256 speedUpDuration = _speedUpDuration;\\n        require(remainDuration > speedUpDuration, \\\"releaseDuration is too short\\\");\\n        userLPInfo.releaseDuration = remainDuration - speedUpDuration;\\n\\n        IToken(_mintRewardToken).giveMintReward();\\n    }\\n\\n    // ******** private *********\\n    function checkLevelCount(address invitor, uint[5] memory amountCheckArray, uint totalReferralAmount, uint currentLevel)\\n    internal view returns (bool) {\\n        address[] memory referralArr = referrals[invitor];\\n        if (totalReferralAmount >= amountCheckArray[currentLevel]) {\\n            uint cnt = 0;\\n            for (uint256 i; i < referrals[invitor].length; ++i) {\\n                if (currentLevel == 0) {\\n                    if (referralAmount[referralArr[i]] + depositAmount[referralArr[i]] >= v1Amount) {\\n                        ++cnt;\\n                    }\\n                } else {\\n                    if (userLevel[referralArr[i]] >= 1) {\\n                        ++cnt;\\n                    }\\n                }\\n                if (cnt >= 2) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n    // Give NFT reward\\n    function distributeNFTRewards(address invitor, uint256 amount) private {\\n        uint256 invLevel = userLevel[invitor];\\n        uint256 nBalance = _nft.balanceOf(invitor);\\n        uint256 rewardAmount = calculateNFTReward(invLevel, amount);\\n\\n        if (invLevel > 0 && nBalance > 0) {\\n            distributeMainReward(invitor, rewardAmount);\\n            distributeSuperRewards(invitor, invLevel, amount);\\n        } else {\\n            // Loop super wallet\\n            address currentAccount = superAccount[invitor];\\n            bool hasNFT = false;\\n            while (currentAccount != address(0) && !hasNFT) {\\n                uint256 sLevel = userLevel[currentAccount];\\n                uint256 sBalance = _nft.balanceOf(currentAccount);\\n                if (sLevel > 0 && sBalance > 0) {\\n                    hasNFT = true;\\n                    rewardAmount = calculateNFTReward(sLevel, amount);\\n                    distributeMainReward(currentAccount, rewardAmount);\\n                    distributeSuperRewards(currentAccount, sLevel, amount);\\n                }\\n                if (currentAccount == superAccount[currentAccount]) {\\n                    currentAccount = address(0);\\n                } else {\\n                    currentAccount = superAccount[currentAccount];\\n                }\\n            }\\n        }\\n    }\\n\\n    function distributeMainReward(address invitor, uint256 rewardAmount) private {\\n        // Add power\\n        uint256 addAmount = (rewardAmount * _lastAmountRate) / _divFactor;\\n        _addUserAmount(invitor, addAmount, false);\\n\\n        uint256 level = userLevel[invitor];\\n        emit nftPowerReward(invitor, level, addAmount);\\n\\n        // Give token\\n        _giveToken(_usdt, invitor, rewardAmount);\\n\\n        emit nftTokenReward(invitor, level, rewardAmount);\\n    }\\n\\n    function distributeSuperRewards(address invitor, uint256 invLevel, uint256 amount) private {\\n        address currentAccount = superAccount[invitor];\\n        uint256 nextLevel = invLevel;\\n        uint256 sameLevel = invLevel + 1;\\n\\n        while (currentAccount != address(0) && nextLevel <= 5) {\\n            uint256 sLevel = userLevel[currentAccount];\\n            uint256 sAmount = calculateNFTReward(sLevel, amount);\\n\\n            if (sLevel > nextLevel || sLevel == sameLevel) {\\n                distributeSuperReward(currentAccount, sAmount);\\n                nextLevel = sLevel;\\n                sameLevel = sLevel + 1;\\n            } else if (sLevel == nextLevel) {\\n                distributeSameLevelReward(currentAccount, sAmount);\\n                nextLevel = sLevel + 1;\\n            }\\n            if (currentAccount == superAccount[currentAccount]) {\\n                currentAccount = address(0);\\n            } else {\\n                currentAccount = superAccount[currentAccount];\\n            }\\n        }\\n    }\\n\\n    function distributeSuperReward(address invitor, uint256 sAmount) private {\\n        // Add power\\n        uint256 srAmount = (sAmount * _lastAmountRate) / _divFactor;\\n        _addUserAmount(invitor, srAmount, false);\\n\\n        uint256 level = userLevel[invitor];\\n        emit nftPowerReward(invitor, level, srAmount);\\n\\n        // Give token\\n        _giveToken(_usdt, invitor, sAmount);\\n\\n        emit nftTokenReward(invitor, level, sAmount);\\n    }\\n\\n    function distributeSameLevelReward(address invitor, uint256 sAmount) private {\\n        // Same level 20% rewards\\n        uint256 srAmount = (sAmount * _lastAmountRate) / _divFactor;\\n        uint256 sameLevelAmount = (srAmount * 20) / 100;\\n\\n        // Add power\\n        _addUserAmount(invitor, sameLevelAmount, false);\\n\\n        uint256 level = userLevel[invitor];\\n        emit nftPowerReward(invitor, level, sameLevelAmount);\\n\\n        // Token reward\\n        uint256 tokenAmount = (sAmount * 20) / 100;\\n        _giveToken(_usdt, invitor, tokenAmount);\\n\\n        emit nftTokenReward(invitor, level, tokenAmount);\\n    }\\n\\n    // NFT add ref\\n    function addReferral(uint256 amount, address account, address invitor) private {\\n        depositAmount[account] += amount;\\n\\n        address currentAccount = invitor;\\n        while (currentAccount != address(0)) {\\n            referralAmount[currentAccount] += amount;\\n            checkForLevelUp(currentAccount);\\n            if (currentAccount == superAccount[currentAccount]) {\\n                currentAccount = address(0);\\n            }\\n            currentAccount = superAccount[currentAccount];\\n        }\\n    }\\n\\n    function addLP(address account, uint256 usdtAmount, uint256 minTokenAmount, bool lockLP) private {\\n        address token = _mintRewardToken;\\n        IERC20 Token = IERC20(token);\\n        uint256 tokenBalanceBefore = Token.balanceOf(address(this));\\n\\n        address usdt = _usdt;\\n        address[] memory path = new address[](2);\\n        path[0] = usdt;\\n        path[1] = token;\\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            usdtAmount / 2,\\n            minTokenAmount,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 tokenAmount = Token.balanceOf(address(this)) - tokenBalanceBefore;\\n\\n        address lpReceiver = lockLP ? address(this) : _sellLPReceiver;\\n        (, , uint256 liquidity) = _swapRouter.addLiquidity(\\n            usdt,\\n            token,\\n            usdtAmount / 2,\\n            tokenAmount,\\n            0,\\n            0,\\n            lpReceiver,\\n            block.timestamp\\n        );\\n        //\\n        if (lockLP) {\\n            _addLockLP(account, liquidity);\\n        } else {\\n            IToken(_mintRewardToken).addUserLPAmount(lpReceiver, liquidity);\\n        }\\n    }\\n\\n    function _addLockLP(address account, uint256 liquidity) private {\\n        UserLPInfo storage userLPInfo = _userLPInfo[account];\\n        uint256 lastReleaseTime = userLPInfo.lastReleaseTime;\\n        uint256 nowTime = block.timestamp;\\n        if (lastReleaseTime > 0 && nowTime > lastReleaseTime) {\\n            uint256 releaseAmount = (userLPInfo.releaseInitAmount * (nowTime - lastReleaseTime)) / userLPInfo.releaseDuration;\\n            uint256 maxAmount = userLPInfo.lockAmount - userLPInfo.calAmount - userLPInfo.claimedAmount;\\n            if (releaseAmount > maxAmount) {\\n                releaseAmount = maxAmount;\\n            }\\n            userLPInfo.calAmount += releaseAmount;\\n        }\\n        uint256 remainAmount = userLPInfo.lockAmount - userLPInfo.calAmount - userLPInfo.claimedAmount;\\n        userLPInfo.lockAmount += liquidity;\\n        userLPInfo.releaseInitAmount = remainAmount + liquidity;\\n        userLPInfo.releaseDuration = _lpReleaseDuration;\\n\\n        if (nowTime > lastReleaseTime) {\\n            userLPInfo.lastReleaseTime = nowTime;\\n        }\\n    }\\n\\n    function _addUserAmount(address account, uint256 amount, bool calInvite) private {\\n        UserInfo storage user = userInfo[account];\\n        _calReward(user, false);\\n\\n        uint256 userAmount = user.amount;\\n        userAmount += amount;\\n        user.amount = userAmount;\\n\\n        uint256 poolTotalAmount = poolInfo.totalAmount;\\n        poolTotalAmount += amount;\\n\\n        uint256 poolAccMintPerShare = poolInfo.accMintPerShare;\\n        user.rewardMintDebt = (userAmount * poolAccMintPerShare) / 1e18;\\n\\n        if (calInvite) {\\n            uint256 len = _inviteLen;\\n            UserInfo storage invitorInfo;\\n            address current = account;\\n            address invitor;\\n            uint256 invitorTotalAmount;\\n            for (uint256 i; i < len; ++i) {\\n                invitor = _invitor[current];\\n                if (address(0) == invitor) {\\n                    break;\\n                }\\n                invitorInfo = userInfo[invitor];\\n                _calReward(invitorInfo, false);\\n                uint256 inviteAmount = (amount * _inviteFee[i]) / 10000;\\n                _inviteAmount[invitor] += inviteAmount;\\n                _teamAmount[invitor] += amount;\\n\\n                invitorTotalAmount = invitorInfo.amount;\\n                invitorTotalAmount += inviteAmount;\\n                invitorInfo.amount = invitorTotalAmount;\\n                invitorInfo.rewardMintDebt = (invitorTotalAmount * poolAccMintPerShare) / 1e18;\\n\\n                poolTotalAmount += inviteAmount;\\n                current = invitor;\\n            }\\n        }\\n        poolInfo.totalAmount = poolTotalAmount;\\n    }\\n\\n    function _updatePool() private {\\n        updateDailyUpRate();\\n        PoolInfo storage pool = poolInfo;\\n        uint256 blockTime = block.timestamp;\\n        uint256 lastRewardTime = pool.lastMintTime;\\n        if (blockTime <= lastRewardTime) {\\n            return;\\n        }\\n        pool.lastMintTime = blockTime;\\n\\n        uint256 accReward = pool.accMintReward;\\n        uint256 totalReward = pool.totalMintReward;\\n        if (accReward >= totalReward) {\\n            return;\\n        }\\n\\n        uint256 totalAmount = pool.totalAmount;\\n        uint256 rewardPerSec = pool.mintPerSec;\\n        if (0 < totalAmount && 0 < rewardPerSec) {\\n            uint256 reward = rewardPerSec * (blockTime - lastRewardTime);\\n            uint256 remainReward = totalReward - accReward;\\n            if (reward > remainReward) {\\n                reward = remainReward;\\n            }\\n            pool.accMintPerShare += (reward * 1e18) / totalAmount;\\n            pool.accMintReward += reward;\\n        }\\n    }\\n\\n    function _calReward(UserInfo storage user, bool updatePool) private {\\n        if (updatePool) {\\n            _updatePool();\\n        }\\n        if (user.amount > 0) {\\n            uint256 accMintReward = (user.amount * poolInfo.accMintPerShare) / 1e18;\\n            uint256 pendingMintAmount = accMintReward - user.rewardMintDebt;\\n            if (pendingMintAmount > 0) {\\n                user.rewardMintDebt = accMintReward;\\n                user.calMintReward += pendingMintAmount;\\n            }\\n        }\\n    }\\n\\n\\n    // ******** view *********\\n    function getDailyRate() private view returns (uint256) {\\n        uint256 lastAmountRate = _lastAmountRate;\\n        uint256 lastDailyUpTime = _lastDailyUpTime;\\n        if (0 == lastDailyUpTime) {\\n            return lastAmountRate;\\n        }\\n        uint256 dailyDuration = _dailyDuration;\\n        uint256 nowTime = block.timestamp;\\n        if (nowTime < lastDailyUpTime + dailyDuration) {\\n            return lastAmountRate;\\n        }\\n        uint256 ds = (nowTime - lastDailyUpTime) / dailyDuration;\\n\\n        uint256 amountDailyUp = _amountDailyUp;\\n        for (uint256 i; i < ds; ++i) {\\n            lastAmountRate = (lastAmountRate * amountDailyUp) / _divFactor;\\n        }\\n        return lastAmountRate;\\n    }\\n\\n    function calculateNFTReward(uint256 userRewardLevel, uint256 amount) public pure returns (uint256){\\n        if (userRewardLevel == 0 || userRewardLevel > 5) {\\n            return 0;\\n        }\\n        return (amount * userRewardLevel) / 100;\\n    }\\n\\n    function getSpeedUpTokenAmount() private view returns (uint256 tokenAmount){\\n        (uint256 rUsdt, uint256 rToken) = _getReserves();\\n        tokenAmount = (_speedUpCost * rToken) / rUsdt;\\n    }\\n\\n    function _getReserves() public view returns (uint256 rUsdt, uint256 rToken){\\n        ISwapPair pair = ISwapPair(_lp);\\n        (uint256 r0, uint256 r1,) = pair.getReserves();\\n\\n        if (_usdt < _mintRewardToken) {\\n            rUsdt = r0;\\n            rToken = r1;\\n        } else {\\n            rUsdt = r1;\\n            rToken = r0;\\n        }\\n    }\\n\\n    function getJoinTokenAmountOut(uint256 usdtAmount) public view returns (uint256 tokenAmount){\\n        address[] memory path = new address[](2);\\n        path[0] = _usdt;\\n        path[1] = _mintRewardToken;\\n        uint256[] memory amounts = _swapRouter.getAmountsOut(\\n            usdtAmount / 2,\\n            path\\n        );\\n        tokenAmount = amounts[1];\\n    }\\n\\n    function getSellUsdtOut(uint256 tokenAmount) public view\\n    returns (uint256 usdtAmount, uint256 selfUsdt, uint256 mintAmount){\\n        address[] memory path = new address[](2);\\n        path[0] = _mintRewardToken;\\n        path[1] = _usdt;\\n        uint256[] memory amounts = _swapRouter.getAmountsOut(tokenAmount, path);\\n        usdtAmount = amounts[1];\\n        selfUsdt = (usdtAmount * _sellSelfRate) / 10000;\\n        mintAmount = (usdtAmount * _sellJoinRate) / 10000;\\n        mintAmount = (mintAmount * getDailyRate()) / 10000;\\n    }\\n\\n    function getBinderLength(address account) public view returns (uint256) {\\n        return _binder[account].length;\\n    }\\n\\n    // NFT level\\n    function getUserNFTLevel(address account) external view returns (uint256) {\\n        return userLevel[account];\\n    }\\n\\n    //\\u7ed1\\u5b9a\\u9080\\u8bf7\\u5173\\u7cfb\\n    function _bindInvitor(address account, address invitor) private {\\n        UserInfo storage user = userInfo[account];\\n        if (!user.isActive) {\\n            require(address(0) != invitor, \\\"invitor 0\\\");\\n            require(userInfo[invitor].isActive, \\\"invitor !Active\\\");\\n            //nft refer\\n            referrals[invitor].push(account);\\n            superAccount[account] = invitor;\\n\\n            _invitor[account] = invitor;\\n            _binder[invitor].push(account);\\n            for (uint256 i; i < _inviteLen;) {\\n                _teamNum[invitor] += 1;\\n                invitor = _invitor[invitor];\\n                if (address(0) == invitor) {\\n                    break;\\n                }\\n            unchecked {\\n                ++i;\\n            }\\n            }\\n            user.isActive = true;\\n        }\\n    }\\n\\n    //       function getBinderList(address account, uint256 start, uint256 length) external view\\n    //       returns (uint256 returnCount, address[] memory binders) {\\n    //           address[] storage _binders = _binder[account];\\n    //           uint256 recordLen = _binders.length;\\n    //           if (0 == length) {\\n    //               length = recordLen;\\n    //           }\\n    //           returnCount = length;\\n    //           binders = new address[](length);\\n    //           uint256 index = 0;\\n    //           for (uint256 i = start; i < start + length; i++) {\\n    //               if (i >= recordLen) {\\n    //                   return (index, binders);\\n    //               }\\n    //               binders[index] = _binders[i];\\n    //               index++;\\n    //           }\\n    //       }\\n\\n    //       function getDirectList(address account) external view\\n    //       returns (address[] memory binders, uint256[] memory teamAmounts){\\n    //           address[] storage _binders = referrals[account];\\n    //           uint256 recordLen = _binders.length;\\n    //           binders = new address[](recordLen);\\n    //           teamAmounts = new uint256[](recordLen);\\n    //           uint256 index = 0;\\n    //           for (uint256 i = 0; i < recordLen; i++) {\\n    //               if (i >= recordLen) {\\n    //                   return (binders, teamAmounts);\\n    //               }\\n    //\\n    //               address binder = _binders[i];\\n    //               binders[index] = binder;\\n    //               teamAmounts[index] = depositAmount[binder] + referralAmount[binder];\\n    //               index++;\\n    //           }\\n    //       }\\n    //\\n    //\\n    //        function getUserLPInfo(address account)\\n    //        public\\n    //        view\\n    //        returns (\\n    //            uint256 lockAmount,\\n    //            uint256 calAmount,\\n    //            uint256 claimedAmount,\\n    //            uint256 lastReleaseTime,\\n    //            uint256 releaseInitAmount,\\n    //            uint256 releaseDuration,\\n    //            uint256 speedUpTime,\\n    //            uint256 tokenBalance,\\n    //            uint256 tokenAllowance\\n    //        ){\\n    //            UserLPInfo storage userLPInfo = _userLPInfo[account];\\n    //            lockAmount = userLPInfo.lockAmount;\\n    //            calAmount = userLPInfo.calAmount;\\n    //            claimedAmount = userLPInfo.claimedAmount;\\n    //            releaseInitAmount = userLPInfo.releaseInitAmount;\\n    //            releaseDuration = userLPInfo.releaseDuration;\\n    //            speedUpTime = userLPInfo.speedUpTime;\\n    //            lastReleaseTime = userLPInfo.lastReleaseTime;\\n    //            tokenBalance = IERC20(_mintRewardToken).balanceOf(account);\\n    //            tokenAllowance = IERC20(_mintRewardToken).allowance(\\n    //                account,\\n    //                address(this)\\n    //            );\\n    //        }\\n    //\\n    //        function getUserInfo(address account)\\n    //        public\\n    //        view\\n    //        returns (\\n    //            uint256 amount,\\n    //            uint256 usdtBalance,\\n    //            uint256 usdtAllowance,\\n    //            uint256 pendingMintReward,\\n    //            uint256 inviteAmount,\\n    //            uint256 sellJoinAmount,\\n    //            uint256 teamNum,\\n    //            uint256 teamAmount\\n    //        )\\n    //        {\\n    //            UserInfo storage user = userInfo[account];\\n    //            amount = user.amount;\\n    //            usdtBalance = IERC20(_usdt).balanceOf(account);\\n    //            usdtAllowance = IERC20(_usdt).allowance(account, address(this));\\n    //            pendingMintReward = getPendingMintReward(account) + user.calMintReward;\\n    //            inviteAmount = _inviteAmount[account];\\n    //            sellJoinAmount = _sellJoinAmount[account];\\n    //            teamNum = _teamNum[account];\\n    //            teamAmount = _teamAmount[account];\\n    //        }\\n    //\\n    //        function getBaseInfo()\\n    //        external\\n    //        view\\n    //        returns (\\n    //            address usdt,\\n    //            uint256 usdtDecimals,\\n    //            address mintRewardToken,\\n    //            uint256 mintRewardTokenDecimals,\\n    //            uint256 totalUsdt,\\n    //            uint256 totalAmount,\\n    //            uint256 lastDailyReward,\\n    //            uint256 dailyAmountRate,\\n    //            uint256 minAmount,\\n    //            address defaultInvitor,\\n    //            bool pauseJoin\\n    //        )\\n    //        {\\n    //            usdt = _usdt;\\n    //            usdtDecimals = 18;\\n    //            mintRewardToken = _mintRewardToken;\\n    //            mintRewardTokenDecimals = 18;\\n    //            totalUsdt = _totalUsdt;\\n    //            totalAmount = poolInfo.totalAmount;\\n    //            lastDailyReward = _lastDailyReward;\\n    //            dailyAmountRate = getDailyRate();\\n    //            minAmount = _minAmount;\\n    //            defaultInvitor = _defaultInvitor;\\n    //            pauseJoin = _pauseJoin;\\n    //        }\\n    //\\n    //        function getLPInfo()\\n    //        external\\n    //        view\\n    //        returns (\\n    //            uint256 totalLP,\\n    //            uint256 lockLP,\\n    //            uint256 speedUpMaxTime,\\n    //            uint256 speedCostUsdt,\\n    //            uint256 speedCostToken\\n    //        )\\n    //        {\\n    //            totalLP = IERC20(_lp).totalSupply();\\n    //            lockLP = IERC20(_lp).balanceOf(address(this));\\n    //            speedUpMaxTime = _speedUpMaxTime;\\n    //            speedCostUsdt = _speedUpCost;\\n    //            speedCostToken = getSpeedUpTokenAmount();\\n    //        }\\n\\n\\n    // ******** owner *********\\n    function setNFTAddress(address _nftAddress) external onlyWhiteList {\\n        _nft = INFT(_nftAddress);\\n    }\\n\\n    function setUserLevel(address account, uint256 level) external onlyWhiteList {\\n        userLevel[account] = level;\\n    }\\n\\n    // Batch userInfo\\n    function batchInsertUserInfo(address[] memory users, UserInfo[] memory userInfos) external onlyWhiteList {\\n        require(users.length == userInfos.length, \\\"Array lengths do not match\\\");\\n        for (uint256 i = 0; i < users.length; i++) {\\n            userInfo[users[i]] = userInfos[i];\\n        }\\n    }\\n\\n    function setPauseSell(bool p) external onlyWhiteList {\\n        _pauseSell = p;\\n    }\\n\\n    function setSellSelfRate(uint256 r) external onlyWhiteList {\\n        _sellSelfRate = r;\\n        require(_sellSelfRate + _sellJoinRate + _sellNFTRate <= 10000, \\\"rate overflow\\\");\\n    }\\n\\n    function setSellJoinRate(uint256 r) external onlyWhiteList {\\n        _sellJoinRate = r;\\n        require(_sellSelfRate + _sellJoinRate + _sellNFTRate <= 10000, \\\"rate overflow\\\");\\n    }\\n\\n    function setSellNFTRate(uint256 r) external onlyWhiteList {\\n        _sellNFTRate = r;\\n        require(_sellSelfRate + _sellJoinRate + _sellNFTRate <= 10000, \\\"rate overflow\\\");\\n    }\\n\\n    function setSellLPReceiver(address a) external onlyWhiteList {\\n        _sellLPReceiver = a;\\n    }\\n\\n    function setFundAddress(address a) external onlyWhiteList {\\n        _fundAddress = a;\\n    }\\n\\n    function setSpeedUpMaxTime(uint256 mt) external onlyWhiteList {\\n        _speedUpMaxTime = mt;\\n    }\\n\\n    function setSpeedUpCost(uint256 c) external onlyWhiteList {\\n        _speedUpCost = c;\\n    }\\n\\n    function setSpeedUpDuration(uint256 d) external onlyWhiteList {\\n        _speedUpDuration = d;\\n    }\\n\\n    function setSeedUpReceiver(address a) external onlyWhiteList {\\n        _speedUpReceiver = a;\\n    }\\n\\n    function setLPReleaseDuration(uint256 d) external onlyWhiteList {\\n        require(d > 0, \\\"release duration must > 0\\\");\\n        _lpReleaseDuration = d;\\n    }\\n\\n    function setAmountDailyUp(uint256 r) external onlyWhiteList {\\n        _amountDailyUp = r;\\n    }\\n\\n    function setLastDailyUpTime(uint256 t) external onlyWhiteList {\\n        _lastDailyUpTime = t;\\n    }\\n\\n    function setLastAmountRate(uint256 r) external onlyWhiteList {\\n        _lastAmountRate = r;\\n    }\\n\\n    function open() external onlyWhiteList {\\n        if (0 == _lastDailyUpTime) {\\n            _lastDailyUpTime = block.timestamp;\\n        }\\n        _pauseJoin = false;\\n    }\\n\\n    function close() external onlyWhiteList {\\n        _pauseJoin = true;\\n    }\\n\\n    function addMintAmount(address account, uint256 amount) external onlyWhiteList {\\n        _bindInvitor(account, _defaultInvitor);\\n        _updatePool();\\n        _addUserAmount(account, amount, false);\\n    }\\n\\n    function setMintPerSec(uint256 mintPerSec) external onlyWhiteList {\\n        _updatePool();\\n        poolInfo.mintPerSec = mintPerSec;\\n    }\\n\\n    function setInviteFee(uint256 i, uint256 fee) external onlyWhiteList {\\n        _inviteFee[i] = fee;\\n    }\\n\\n    function claimBalance(address to, uint256 amount) external onlyWhiteList {\\n        safeTransferETH(to, amount);\\n    }\\n\\n    function claimToken(address token, address to, uint256 amount) external onlyWhiteList {\\n        _giveToken(token, to, amount);\\n    }\\n\\n    function setDefaultInvitor(address adr) external onlyWhiteList {\\n        _defaultInvitor = adr;\\n        userInfo[adr].isActive = true;\\n    }\\n\\n    function setInProject(address adr, bool enable) external onlyWhiteList {\\n        _inProject[adr] = enable;\\n    }\\n\\n    function addTotalMintReward(uint256 reward) external onlyInProject {\\n        _updatePool();\\n        poolInfo.totalMintReward += reward;\\n        poolInfo.mintPerSec = reward / _dailyDuration;\\n        _lastDailyReward = reward;\\n    }\\n\\n    function bindInvitor(address account, address invitor) public onlyInProject {\\n        _bindInvitor(account, invitor);\\n    }\\n\\n    function bindInvitors(address[] memory account, address[] memory invitor) public onlyInProject {\\n        for (uint256 i = 0; i < account.length; i++) {\\n            _bindInvitor(account[i], invitor[i]);\\n        }\\n    }\\n\\n    function addUserAmount(address account, uint256 amount, bool calInvite) public onlyInProject {\\n        _bindInvitor(account, _defaultInvitor);\\n        _updatePool();\\n        _addUserAmount(account, amount, calInvite);\\n    }\\n\\n\\n    // ******** utils *********\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        //bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"approve fail\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success,) = to.call{value : value}(new bytes(0));\\n        require(success, \\\"eth transfer fail\\\");\\n    }\\n\\n    function _giveToken(address tokenAddress, address account, uint256 amount) private {\\n        if (0 == amount) {\\n            return;\\n        }\\n        IERC20 token = IERC20(tokenAddress);\\n        require(token.balanceOf(address(this)) >= amount, \\\"balance not enough\\\");\\n        token.transfer(account, amount);\\n    }\\n\\n    function _takeToken(address tokenAddress, address from, address to, uint256 tokenNum) private {\\n        IERC20 token = IERC20(tokenAddress);\\n        require(token.balanceOf(address(from)) >= tokenNum, \\\"balance not enough\\\");\\n        token.transferFrom(from, to, tokenNum);\\n    }\\n\\n    // ********* setting *********\\n    function setPoolInfo(uint256 totalAmount, uint256 accMintPerShare, uint256 accMintReward, uint256 mintPerSec,\\n        uint256 lastMintTime, uint256 totalMintReward) external onlyWhiteList {\\n        poolInfo.totalAmount = totalAmount;\\n        poolInfo.accMintPerShare = accMintPerShare;\\n        poolInfo.accMintReward = accMintReward;\\n        poolInfo.mintPerSec = mintPerSec;\\n        poolInfo.lastMintTime = lastMintTime;\\n        poolInfo.totalMintReward = totalMintReward;\\n    }\\n\\n    function setUserLpInfos(address[] memory account, UserLPInfo[] memory lpInfos) external onlyWhiteList {\\n        for (uint256 i = 0; i < account.length; i++) {\\n            _userLPInfo[account[i]] = lpInfos[i];\\n        }\\n    }\\n\\n    function setInviteAmount(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n        for (uint256 i = 0; i < account.length; i++) {\\n            _inviteAmount[account[i]] = amount[i];\\n        }\\n    }\\n\\n    function setTeamAmount(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n        for (uint256 i = 0; i < account.length; i++) {\\n            _teamAmount[account[i]] = amount[i];\\n        }\\n    }\\n\\n    function setSellJoinAmount(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n        for (uint256 i = 0; i < account.length; i++) {\\n            _sellJoinAmount[account[i]] = amount[i];\\n        }\\n    }\\n\\n    function setReferralAmount(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n        for (uint256 i = 0; i < account.length; i++) {\\n            referralAmount[account[i]] = amount[i];\\n        }\\n    }\\n\\n    function setDepositAmount(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n        for (uint256 i = 0; i < account.length; i++) {\\n            depositAmount[account[i]] = amount[i];\\n        }\\n    }\\n\\n    function setReferralReward(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n        for (uint256 i = 0; i < account.length; i++) {\\n            referralReward[account[i]] = amount[i];\\n        }\\n    }\\n\\n    function setUserLevels(address[] memory account, uint256[] memory level) external onlyWhiteList {\\n        for (uint256 i = 0; i < account.length; i++) {\\n            userLevel[account[i]] = level[i];\\n        }\\n    }\\n\\n    function setTotalUsd(uint256 amount) external onlyWhiteList {\\n        _totalUsdt = amount;\\n    }\\n\\n    function setLastDailyReward(uint256 reward) external onlyWhiteList {\\n        _lastDailyReward = reward;\\n    }\\n}\",\"keccak256\":\"0x123aafdc5f1df3f9c425ca3c8957b94b41f779b23f56b0e68a4a1b5e76e4fbec\",\"license\":\"MIT\"},\"contracts/interface/INFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n\\ninterface INFT {\\n    function addTokenReward(uint256 rewardAmount) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n}\",\"keccak256\":\"0xa06dd537bdcde34f676176568c584079729a211bce9f392a5470140dc6007b00\",\"license\":\"MIT\"},\"contracts/interface/ISwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n\\ninterface ISwapFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function feeTo() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\",\"keccak256\":\"0x5849d5f6a26192dc835dd0a452df981b5742afda0fe9ecb564edbb304b6e09e9\",\"license\":\"MIT\"},\"contracts/interface/ISwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface ISwapPair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function sync() external;\\n}\",\"keccak256\":\"0x528ce2a8bd0f10b92a547c7b86bdb098308adb1a1be12a13c4e09964d2047424\",\"license\":\"MIT\"},\"contracts/interface/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface ISwapRouter {\\n    function factory() external pure returns (address);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n}\",\"keccak256\":\"0x8b6dcc30c60ffafe15874d4c3920157a8aa7b5c2141e3d5fefb5593df50397ca\",\"license\":\"MIT\"},\"contracts/interface/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n\\ninterface IToken {\\n    function giveMintReward() external;\\n\\n    function addUserLPAmount(address account, uint256 lpAmount) external;\\n}\\n\",\"keccak256\":\"0xef20803f40e623bfd961ddd3c5486646f1cfc82f7bab120d817917007a7d5c3a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610180604052600360805268878678326eac90000060a05269043c33c193756480000060c052690a968163f0a57b40000060e052691fc3842bd1f071c00000610100526969e10de76676d0800000610120526127106101405262015180610160523480156200006d57600080fd5b5062000079336200007f565b620000cf565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60805160a05160c05160e05161010051610120516101405161016051614e886200017b60003960008181611671015281816132aa01526141b7015260008181613319015261421b0152600081816105c101526126cf01526000818161071701526126a9015260008181610be00152612683015260008181610858015261265d015260008181610f8d015281816126300152613ef501526000818161380001526139ee0152614e886000f3fe6080604052600436106104e45760003560e01c8063834f8f5511610281578063b64cf2d91161015a578063e20ae392116100cc578063f12e6eb711610085578063f12e6eb714611183578063f2fde38b146111a3578063f48544c3146111c3578063fbc5e129146111d9578063fcfff16f146111f9578063fd3cf8851461120e57600080fd5b8063e20ae392146110a8578063e3ca487a146110bd578063e5d65633146110dd578063e697b5d81461110d578063e9f221691461112d578063ec747edb1461114d57600080fd5b8063ce4d9f151161011e578063ce4d9f1514610fe5578063ce5611431461100f578063cef6632d14611025578063d340a24414611052578063d5559e2114611072578063dde40dda1461108857600080fd5b8063b64cf2d914610f1b578063b75265d314610f3b578063b791904514610f5b578063bc980f8c14610f7b578063cc396be114610faf57600080fd5b8063a4e48ed8116101f3578063aa8b38d9116101b7578063aa8b38d914610e58578063ac86af9414610e78578063b1a8c45914610ea5578063b272d7c314610ec5578063b38dcd7114610ee5578063b612511014610efb57600080fd5b8063a4e48ed814610da7578063a5b64e5e14610dc7578063a5d81d4614610de7578063a779fe9214610e07578063aa1a8c6014610e1d57600080fd5b806393b556ad1161024557806393b556ad14610ccd57806394f738a214610cfa57806395d4c7bb14610d1a57806398300e1814610d475780639f16261214610d67578063a40a789c14610d8757600080fd5b8063834f8f5514610c225780638593b2b114610c4f57806385dc300414610c6f5780638a56d30614610c8f5780638da5cb5b14610caf57600080fd5b80633c6369fc116103be578063692c7bf7116103305780637512474e116102e95780637512474e14610b4e5780637a56af6114610b6e5780637e85e39314610b8e5780637f15b36b14610bae578063815a7beb14610bce5780638230af5a14610c0257600080fd5b8063692c7bf714610a8057806369d0373814610aa057806369da132614610ac05780636ca9ee1b14610af65780636e18b6db14610b0c578063715018a614610b3957600080fd5b80635239a993116103825780635239a993146109925780635a2f3d09146109b25780635ca8e3f214610a0a5780635d4feb6114610a2a5780635f84aecd14610a4a578063681982a714610a6057600080fd5b80633c6369fc1461087a5780633c986e8f1461090757806343d726d614610927578063449fe5001461093c57806350f62da71461096657600080fd5b80631b967ad4116104575780632e0dd9c71161041b5780632e0dd9c7146107a657806333548f33146107c657806333f5780e146107e657806335876476146108065780633a0dde51146108265780633bf5f9341461084657600080fd5b80631b967ad4146106cf5780631e8074b51461070557806326e641ea14610739578063280e31cc146107595780632d9e54b41461078657600080fd5b80630b2ef5f7116104a95780630b2ef5f7146105af5780630c28525d146105f1578063125bfb661461061157806314331819146106315780631703dd12146106515780631959a0021461066757600080fd5b80625a3ff1146104f0578063029a0c9d1461052d5780630600ffc11461054f5780630681c58d1461056f578063084554361461058f57600080fd5b366104eb57005b600080fd5b3480156104fc57600080fd5b50600d54610510906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561053957600080fd5b5061054d6105483660046143a2565b61122e565b005b34801561055b57600080fd5b5061054d61056a3660046143de565b611290565b34801561057b57600080fd5b5061054d61058a3660046143a2565b611303565b34801561059b57600080fd5b5061054d6105aa36600461454b565b6113bd565b3480156105bb57600080fd5b506105e37f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610524565b3480156105fd57600080fd5b5061054d61060c3660046143a2565b61148c565b34801561061d57600080fd5b5061054d61062c366004614606565b611535565b34801561063d57600080fd5b5061054d61064c366004614647565b611594565b34801561065d57600080fd5b506105e360255481565b34801561067357600080fd5b506106ad61068236600461468a565b600760205260009081526040902080546001820154600283015460039093015460ff90921692909184565b6040805194151585526020850193909352918301526060820152608001610524565b3480156106db57600080fd5b506105e36106ea36600461468a565b6001600160a01b031660009081526010602052604090205490565b34801561071157600080fd5b506105e37f000000000000000000000000000000000000000000000000000000000000000081565b34801561074557600080fd5b5061054d6107543660046143a2565b611605565b34801561076557600080fd5b506105e361077436600461468a565b60226020526000908152604090205481565b34801561079257600080fd5b5061054d6107a13660046143a2565b61169e565b3480156107b257600080fd5b5061054d6107c13660046143a2565b6116f7565b3480156107d257600080fd5b5061054d6107e13660046146ae565b611750565b3480156107f257600080fd5b5061054d610801366004614712565b6117ee565b34801561081257600080fd5b5061054d61082136600461473e565b61185e565b34801561083257600080fd5b5061054d6108413660046143a2565b611c1a565b34801561085257600080fd5b506105e37f000000000000000000000000000000000000000000000000000000000000000081565b34801561088657600080fd5b506108d261089536600461468a565b6008602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610524565b34801561091357600080fd5b5061054d61092236600461454b565b611c73565b34801561093357600080fd5b5061054d611d42565b34801561094857600080fd5b506016546109569060ff1681565b6040519015158152602001610524565b34801561097257600080fd5b506105e361098136600461468a565b602080526000908152604090205481565b34801561099e57600080fd5b506105e36109ad3660046147d4565b611da5565b3480156109be57600080fd5b506001546002546003546004546005546006546109dd95949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610524565b348015610a1657600080fd5b5061054d610a253660046147d4565b611de0565b348015610a3657600080fd5b5061054d610a4536600461454b565b611e46565b348015610a5657600080fd5b506105e360265481565b348015610a6c57600080fd5b5061054d610a7b36600461468a565b611f15565b348015610a8c57600080fd5b5061054d610a9b3660046147f6565b611f8b565b348015610aac57600080fd5b5061054d610abb36600461468a565b61200a565b348015610acc57600080fd5b50610510610adb36600461468a565b600f602052600090815260409020546001600160a01b031681565b348015610b0257600080fd5b506105e360275481565b348015610b1857600080fd5b506105e3610b2736600461468a565b60216020526000908152604090205481565b348015610b4557600080fd5b5061054d612080565b348015610b5a57600080fd5b5061054d610b6936600461482f565b612094565b348015610b7a57600080fd5b5061054d610b8936600461454b565b6121d8565b348015610b9a57600080fd5b5061054d610ba936600461492c565b6122a7565b348015610bba57600080fd5b5061054d610bc93660046143a2565b6123bb565b348015610bda57600080fd5b506105e37f000000000000000000000000000000000000000000000000000000000000000081565b348015610c0e57600080fd5b50601c54610510906001600160a01b031681565b348015610c2e57600080fd5b506105e3610c3d36600461468a565b60146020526000908152604090205481565b348015610c5b57600080fd5b50610510610c6a366004614712565b612414565b348015610c7b57600080fd5b5061054d610c8a36600461468a565b61244c565b348015610c9b57600080fd5b506105e3610caa36600461468a565b6124c2565b348015610cbb57600080fd5b506000546001600160a01b0316610510565b348015610cd957600080fd5b506105e3610ce836600461468a565b60156020526000908152604090205481565b348015610d0657600080fd5b5061054d610d1536600461468a565b6125b7565b348015610d2657600080fd5b506105e3610d3536600461468a565b601f6020526000908152604090205481565b348015610d5357600080fd5b50600e54610510906001600160a01b031681565b348015610d7357600080fd5b5061054d610d823660046143a2565b61273b565b348015610d9357600080fd5b506105e3610da23660046143a2565b612794565b348015610db357600080fd5b5061054d610dc23660046143a2565b6128c0565b348015610dd357600080fd5b5061054d610de23660046143a2565b612921565b348015610df357600080fd5b5061054d610e0236600461454b565b612c06565b348015610e1357600080fd5b506105e360295481565b348015610e2957600080fd5b50610e3d610e383660046143a2565b612cd5565b60408051938452602084019290925290820152606001610524565b348015610e6457600080fd5b5061054d610e73366004614712565b612e58565b348015610e8457600080fd5b506105e3610e9336600461468a565b60136020526000908152604090205481565b348015610eb157600080fd5b5061054d610ec03660046143a2565b612eba565b348015610ed157600080fd5b50601a54610510906001600160a01b031681565b348015610ef157600080fd5b506105e360195481565b348015610f0757600080fd5b5061054d610f1636600461468a565b612f28565b348015610f2757600080fd5b5061054d610f36366004614a3c565b612f9e565b348015610f4757600080fd5b5061054d610f5636600461468a565b613005565b348015610f6757600080fd5b5061054d610f763660046143a2565b613093565b348015610f8757600080fd5b506105e37f000000000000000000000000000000000000000000000000000000000000000081565b348015610fbb57600080fd5b50610510610fca36600461468a565b601e602052600090815260409020546001600160a01b031681565b348015610ff157600080fd5b50610ffa613102565b60408051928352602083019190915201610524565b34801561101b57600080fd5b506105e360175481565b34801561103157600080fd5b506105e36110403660046143a2565b60116020526000908152604090205481565b34801561105e57600080fd5b5061054d61106d36600461454b565b6131ca565b34801561107e57600080fd5b506105e360245481565b34801561109457600080fd5b50602a54610510906001600160a01b031681565b3480156110b457600080fd5b5061054d613299565b3480156110c957600080fd5b5061054d6110d83660046143a2565b613369565b3480156110e957600080fd5b506109566110f836600461468a565b602d6020526000908152604090205460ff1681565b34801561111957600080fd5b50610510611128366004614712565b6133c2565b34801561113957600080fd5b5061054d611148366004614712565b6133de565b34801561115957600080fd5b506105e361116836600461468a565b6001600160a01b031660009081526022602052604090205490565b34801561118f57600080fd5b5061054d61119e366004614a59565b61345d565b3480156111af57600080fd5b5061054d6111be36600461468a565b6134ab565b3480156111cf57600080fd5b506105e360185481565b3480156111e557600080fd5b5061054d6111f436600461454b565b613521565b34801561120557600080fd5b5061054d6135f0565b34801561121a57600080fd5b5061054d6112293660046143a2565b61365f565b601c546001600160a01b031633148061125157506000546001600160a01b031633145b806112665750600e546001600160a01b031633145b61128b5760405162461bcd60e51b815260040161128290614a87565b60405180910390fd5b602455565b336000908152602d602052604090205460ff16806112b857506000546001600160a01b031633145b6112d45760405162461bcd60e51b815260040161128290614ab0565b6012546112eb9084906001600160a01b03166136b8565b6112f3613891565b6112fe838383613975565b505050565b601c546001600160a01b031633148061132657506000546001600160a01b031633145b8061133b5750600e546001600160a01b031633145b6113575760405162461bcd60e51b815260040161128290614a87565b60188190556019546017546127109190611372908490614aec565b61137c9190614aec565b11156113ba5760405162461bcd60e51b815260206004820152600d60248201526c72617465206f766572666c6f7760981b6044820152606401611282565b50565b601c546001600160a01b03163314806113e057506000546001600160a01b031633145b806113f55750600e546001600160a01b031633145b6114115760405162461bcd60e51b815260040161128290614a87565b60005b82518110156112fe5781818151811061142f5761142f614b04565b6020026020010151601b600085848151811061144d5761144d614b04565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061148490614b1a565b915050611414565b601c546001600160a01b03163314806114af57506000546001600160a01b031633145b806114c45750600e546001600160a01b031633145b6114e05760405162461bcd60e51b815260040161128290614a87565b600081116115305760405162461bcd60e51b815260206004820152601960248201527f72656c65617365206475726174696f6e206d757374203e2030000000000000006044820152606401611282565b602755565b601c546001600160a01b031633148061155857506000546001600160a01b031633145b8061156d5750600e546001600160a01b031633145b6115895760405162461bcd60e51b815260040161128290614a87565b6112fe838383613b59565b601c546001600160a01b03163314806115b757506000546001600160a01b031633145b806115cc5750600e546001600160a01b031633145b6115e85760405162461bcd60e51b815260040161128290614a87565b600195909555600293909355600391909155600455600555600655565b336000908152602d602052604090205460ff168061162d57506000546001600160a01b031633145b6116495760405162461bcd60e51b815260040161128290614ab0565b611651613891565b80600160050160008282546116669190614aec565b9091555061169690507f000000000000000000000000000000000000000000000000000000000000000082614b33565b600455602e55565b601c546001600160a01b03163314806116c157506000546001600160a01b031633145b806116d65750600e546001600160a01b031633145b6116f25760405162461bcd60e51b815260040161128290614a87565b602c55565b601c546001600160a01b031633148061171a57506000546001600160a01b031633145b8061172f5750600e546001600160a01b031633145b61174b5760405162461bcd60e51b815260040161128290614a87565b602555565b336000908152602d602052604090205460ff168061177857506000546001600160a01b031633145b6117945760405162461bcd60e51b815260040161128290614ab0565b60005b82518110156112fe576117dc8382815181106117b5576117b5614b04565b60200260200101518383815181106117cf576117cf614b04565b60200260200101516136b8565b806117e681614b1a565b915050611797565b601c546001600160a01b031633148061181157506000546001600160a01b031633145b806118265750600e546001600160a01b031633145b6118425760405162461bcd60e51b815260040161128290614a87565b6001600160a01b03909116600090815260226020526040902055565b600054600160a81b900460ff161580801561188657506000546001600160a01b90910460ff16105b806118a75750303b1580156118a75750600054600160a01b900460ff166001145b61190a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401611282565b6000805460ff60a01b1916600160a01b1790558015611937576000805460ff60a81b1916600160a81b1790555b6023805460ff19166001179055600980546001600160a01b03808b166001600160a01b03199283168117909355600a80548b8316908416179055678ac7230489e80000600b55600e8054898316908416179055600c8054918a16919092161790556040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa1580156119d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f79190614b55565b60405163e6a4390560e01b81526001600160a01b0389811660048301528881166024830152919091169063e6a4390590604401602060405180830381865afa158015611a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6b9190614b55565b600d80546001600160a01b039283166001600160a01b0319918216179091554260055560128054928716929091168217905560009081526007602090815260408220805460ff19166001179055601190526103207f4ad3b33220dddc71b994a52d72c06b10862965f7d926534c05c00fb7e819e7b7556101f47f17bc176d2408558f6e4111feebc3cab4e16b63e967be91cde721f4c8a488b552556002905261012c7f08037d7b151cc412d25674a4e66b334d9ae9d2e5517a7feaae5cdb828bf1c62855681043561a8829300000602855611b498789600019613c8f565b611b568689600019613c8f565b601a80546001600160a01b0385166001600160a01b03199182168117909255601c805482169092179091556003602b55602a805490911661dead179055611388601755610fa06018556101f46019556127106025556127746026556276a700602755620d2f00602955611bc882613d92565b8015611c10576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b601c546001600160a01b0316331480611c3d57506000546001600160a01b031633145b80611c525750600e546001600160a01b031633145b611c6e5760405162461bcd60e51b815260040161128290614a87565b602b55565b601c546001600160a01b0316331480611c9657506000546001600160a01b031633145b80611cab5750600e546001600160a01b031633145b611cc75760405162461bcd60e51b815260040161128290614a87565b60005b82518110156112fe57818181518110611ce557611ce5614b04565b602002602001015160136000858481518110611d0357611d03614b04565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080611d3a90614b1a565b915050611cca565b601c546001600160a01b0316331480611d6557506000546001600160a01b031633145b80611d7a5750600e546001600160a01b031633145b611d965760405162461bcd60e51b815260040161128290614a87565b6023805460ff19166001179055565b6000821580611db45750600583115b15611dc157506000611dda565b6064611dcd8484614b72565b611dd79190614b33565b90505b92915050565b601c546001600160a01b0316331480611e0357506000546001600160a01b031633145b80611e185750600e546001600160a01b031633145b611e345760405162461bcd60e51b815260040161128290614a87565b60009182526011602052604090912055565b601c546001600160a01b0316331480611e6957506000546001600160a01b031633145b80611e7e5750600e546001600160a01b031633145b611e9a5760405162461bcd60e51b815260040161128290614a87565b60005b82518110156112fe57818181518110611eb857611eb8614b04565b602002602001015160206000858481518110611ed657611ed6614b04565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080611f0d90614b1a565b915050611e9d565b601c546001600160a01b0316331480611f3857506000546001600160a01b031633145b80611f4d5750600e546001600160a01b031633145b611f695760405162461bcd60e51b815260040161128290614a87565b602a80546001600160a01b0319166001600160a01b0392909216919091179055565b601c546001600160a01b0316331480611fae57506000546001600160a01b031633145b80611fc35750600e546001600160a01b031633145b611fdf5760405162461bcd60e51b815260040161128290614a87565b6001600160a01b03919091166000908152602d60205260409020805460ff1916911515919091179055565b601c546001600160a01b031633148061202d57506000546001600160a01b031633145b806120425750600e546001600160a01b031633145b61205e5760405162461bcd60e51b815260040161128290614a87565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b612088613de2565b6120926000613d92565b565b601c546001600160a01b03163314806120b757506000546001600160a01b031633145b806120cc5750600e546001600160a01b031633145b6120e85760405162461bcd60e51b815260040161128290614a87565b80518251146121395760405162461bcd60e51b815260206004820152601a60248201527f4172726179206c656e6774687320646f206e6f74206d617463680000000000006044820152606401611282565b60005b82518110156112fe5781818151811061215757612157614b04565b60200260200101516007600085848151811061217557612175614b04565b6020908102919091018101516001600160a01b031682528181019290925260409081016000208351815460ff19169015151781559183015160018301558201516002820155606090910151600390910155806121d081614b1a565b91505061213c565b601c546001600160a01b03163314806121fb57506000546001600160a01b031633145b806122105750600e546001600160a01b031633145b61222c5760405162461bcd60e51b815260040161128290614a87565b60005b82518110156112fe5781818151811061224a5761224a614b04565b60200260200101516021600085848151811061226857612268614b04565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061229f90614b1a565b91505061222f565b601c546001600160a01b03163314806122ca57506000546001600160a01b031633145b806122df5750600e546001600160a01b031633145b6122fb5760405162461bcd60e51b815260040161128290614a87565b60005b82518110156112fe5781818151811061231957612319614b04565b60200260200101516008600085848151811061233757612337614b04565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015590505080806123b390614b1a565b9150506122fe565b601c546001600160a01b03163314806123de57506000546001600160a01b031633145b806123f35750600e546001600160a01b031633145b61240f5760405162461bcd60e51b815260040161128290614a87565b602855565b6010602052816000526040600020818154811061243057600080fd5b6000918252602090912001546001600160a01b03169150829050565b601c546001600160a01b031633148061246f57506000546001600160a01b031633145b806124845750600e546001600160a01b031633145b6124a05760405162461bcd60e51b815260040161128290614a87565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600760205260408120600181810154909190156125b05760048201544290808211156125ad5760006125038284614b91565b85600301546125129190614b72565b6005860154600287015491925090600081831161253057600061253a565b61253a8284614b91565b9050808411612549578361254b565b805b6002880154895491955090670de0b6b3a76400009061256a8783614b72565b6125749190614b33565b8a600101546125839190614aec565b89600101546125929190614b72565b61259c9190614b33565b6125a69190614b91565b9850505050505b50505b5050919050565b6001600160a01b0381166000908152601d6020526040902054600110156113ba576001600160a01b03811660009081526020808052604080832054601f9092528220546126049190614aec565b6001600160a01b03831660009081526022602052604080822054815160a08101909252929350806126567f00000000000000000000000000000000000000000000000000000000000000006002614b72565b81526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081525090506126ff84828585613e3c565b801561270b5750600582105b156127355761271b826001614aec565b6001600160a01b0385166000908152602260205260409020555b50505050565b601c546001600160a01b031633148061275e57506000546001600160a01b031633145b806127735750600e546001600160a01b031633145b61278f5760405162461bcd60e51b815260040161128290614a87565b602e55565b604080516002808252606082018352600092839291906020830190803683375050600a5482519293506001600160a01b0316918391506000906127d9576127d9614b04565b6001600160a01b039283166020918202929092010152600c5482519116908290600190811061280a5761280a614b04565b6001600160a01b0392831660209182029290920101526009546000911663d06ca61f612837600287614b33565b846040518363ffffffff1660e01b8152600401612855929190614ba8565b600060405180830381865afa158015612872573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261289a9190810190614bff565b9050806001815181106128af576128af614b04565b602002602001015192505050919050565b601c546001600160a01b03163314806128e357506000546001600160a01b031633145b806128f85750600e546001600160a01b031633145b6129145760405162461bcd60e51b815260040161128290614a87565b61291c613891565b600455565b33321461295d5760405162461bcd60e51b815260206004820152600a6024820152693737ba1027b934b3b4b760b11b6044820152606401611282565b336000908152600860205260409020600381015442811580159061298057508181115b15612a015760058301546000906129978484614b91565b85600401546129a69190614b72565b6129b09190614b33565b905060008460020154856001015486600001546129cd9190614b91565b6129d79190614b91565b9050808211156129e5578091505b818560010160008282546129f99190614aec565b909155505050505b81811115612a1157600383018190555b602b54836006015410612a5b5760405162461bcd60e51b81526020600482015260126024820152710e6e0cacac8aae0a8d2daca40d2e640dac2f60731b6044820152606401611282565b600683018054906000612a6d83614b1a565b91905055506000612a7c614039565b905084811115612ace5760405162461bcd60e51b815260206004820152601860248201527f746f6b656e20616d6f756e7420697320746f6f206d75636800000000000000006044820152606401611282565b600c54602a54612aed916001600160a01b03908116913391168461406a565b60028401546001850154855460009291612b0691614b91565b612b109190614b91565b905060008560040154866005015483612b299190614b72565b612b339190614b33565b60048701839055602954909150808211612b8f5760405162461bcd60e51b815260206004820152601c60248201527f72656c656173654475726174696f6e20697320746f6f2073686f7274000000006044820152606401611282565b612b998183614b91565b6005880155600c5460408051632e05661b60e01b815290516001600160a01b0390921691632e05661b9160048082019260009290919082900301818387803b158015612be457600080fd5b505af1158015612bf8573d6000803e3d6000fd5b505050505050505050505050565b601c546001600160a01b0316331480612c2957506000546001600160a01b031633145b80612c3e5750600e546001600160a01b031633145b612c5a5760405162461bcd60e51b815260040161128290614a87565b60005b82518110156112fe57818181518110612c7857612c78614b04565b602002602001015160226000858481518110612c9657612c96614b04565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080612ccd90614b1a565b915050612c5d565b6040805160028082526060820183526000928392839283926020830190803683375050600c5482519293506001600160a01b031691839150600090612d1c57612d1c614b04565b6001600160a01b039283166020918202929092010152600a54825191169082906001908110612d4d57612d4d614b04565b6001600160a01b03928316602091820292909201015260095460405163d06ca61f60e01b8152600092919091169063d06ca61f90612d919089908690600401614ba8565b600060405180830381865afa158015612dae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612dd69190810190614bff565b905080600181518110612deb57612deb614b04565b6020026020010151945061271060175486612e069190614b72565b612e109190614b33565b935061271060185486612e239190614b72565b612e2d9190614b33565b9250612710612e3a61419e565b612e449085614b72565b612e4e9190614b33565b9496939550505050565b601c546001600160a01b0316331480612e7b57506000546001600160a01b031633145b80612e905750600e546001600160a01b031633145b612eac5760405162461bcd60e51b815260040161128290614a87565b612eb6828261426c565b5050565b601c546001600160a01b0316331480612edd57506000546001600160a01b031633145b80612ef25750600e546001600160a01b031633145b612f0e5760405162461bcd60e51b815260040161128290614a87565b601781905560195460185461271091906113729084614aec565b601c546001600160a01b0316331480612f4b57506000546001600160a01b031633145b80612f605750600e546001600160a01b031633145b612f7c5760405162461bcd60e51b815260040161128290614a87565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b601c546001600160a01b0316331480612fc157506000546001600160a01b031633145b80612fd65750600e546001600160a01b031633145b612ff25760405162461bcd60e51b815260040161128290614a87565b6016805460ff1916911515919091179055565b601c546001600160a01b031633148061302857506000546001600160a01b031633145b8061303d5750600e546001600160a01b031633145b6130595760405162461bcd60e51b815260040161128290614a87565b601280546001600160a01b039092166001600160a01b0319909216821790556000908152600760205260409020805460ff19166001179055565b601c546001600160a01b03163314806130b657506000546001600160a01b031633145b806130cb5750600e546001600160a01b031633145b6130e75760405162461bcd60e51b815260040161128290614a87565b60198190556018546017546127109183916113729190614aec565b6000806000600d60009054906101000a90046001600160a01b03169050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131849190614cac565b50600c54600a546001600160701b0393841695509190921692506001600160a01b03918216911610156131bc578194508093506131c3565b8094508193505b5050509091565b601c546001600160a01b03163314806131ed57506000546001600160a01b031633145b806132025750600e546001600160a01b031633145b61321e5760405162461bcd60e51b815260040161128290614a87565b60005b82518110156112fe5781818151811061323c5761323c614b04565b60200260200101516014600085848151811061325a5761325a614b04565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061329190614b1a565b915050613221565b60245460008190036132a85750565b7f0000000000000000000000000000000000000000000000000000000000000000426132d48284614aec565b8110156132e057505050565b6000826132ed8584614b91565b6132f79190614b33565b90506133038382614b72565b61330d9085614aec565b60245560255461333d827f0000000000000000000000000000000000000000000000000000000000000000614dd5565b8260265461334b9190614dd5565b6133559083614b72565b61335f9190614b33565b6025555050505050565b601c546001600160a01b031633148061338c57506000546001600160a01b031633145b806133a15750600e546001600160a01b031633145b6133bd5760405162461bcd60e51b815260040161128290614a87565b602955565b601d602052816000526040600020818154811061243057600080fd5b601c546001600160a01b031633148061340157506000546001600160a01b031633145b806134165750600e546001600160a01b031633145b6134325760405162461bcd60e51b815260040161128290614a87565b6012546134499083906001600160a01b03166136b8565b613451613891565b612eb682826000613975565b336000908152602d602052604090205460ff168061348557506000546001600160a01b031633145b6134a15760405162461bcd60e51b815260040161128290614ab0565b612eb682826136b8565b6134b3613de2565b6001600160a01b0381166135185760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611282565b6113ba81613d92565b601c546001600160a01b031633148061354457506000546001600160a01b031633145b806135595750600e546001600160a01b031633145b6135755760405162461bcd60e51b815260040161128290614a87565b60005b82518110156112fe5781818151811061359357613593614b04565b6020026020010151601f60008584815181106135b1576135b1614b04565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555080806135e890614b1a565b915050613578565b601c546001600160a01b031633148061361357506000546001600160a01b031633145b806136285750600e546001600160a01b031633145b6136445760405162461bcd60e51b815260040161128290614a87565b60245460000361365357426024555b6023805460ff19169055565b601c546001600160a01b031633148061368257506000546001600160a01b031633145b806136975750600e546001600160a01b031633145b6136b35760405162461bcd60e51b815260040161128290614a87565b602655565b6001600160a01b0382166000908152600760205260409020805460ff166112fe576001600160a01b03821660000361371e5760405162461bcd60e51b81526020600482015260096024820152680696e7669746f7220360bc1b6044820152606401611282565b6001600160a01b03821660009081526007602052604090205460ff166137785760405162461bcd60e51b815260206004820152600f60248201526e696e7669746f72202141637469766560881b6044820152606401611282565b6001600160a01b038083166000818152601d60209081526040808320805460018181018355918552838520018054968a166001600160a01b03199788168117909155808552601e84528285208054881687179055600f84528285208054881687179055948452601083529083208054918201815583529082200180549093169091179091555b7f0000000000000000000000000000000000000000000000000000000000000000811015613880576001600160a01b038316600090815260156020526040812080546001929061384f908490614aec565b90915550506001600160a01b039283166000908152600f6020526040902054909216918215613880576001016137fe565b50805460ff19166001178155505050565b613899613299565b60055460019042908082116138ad57505050565b60048301829055600283015460058401548082106138cc575050505050565b8454600386015481158015906138e25750806000105b1561396c5760006138f38688614b91565b6138fd9083614b72565b9050600061390b8686614b91565b905080821115613919578091505b8361392c83670de0b6b3a7640000614b72565b6139369190614b33565b8960010160008282546139499190614aec565b92505081905550818960020160008282546139649190614aec565b909155505050505b50505050505050565b6001600160a01b03831660009081526007602052604081209061399990829061431d565b60018101546139a88482614aec565b6001808401829055549091506139be8582614aec565b600254909150670de0b6b3a76400006139d78285614b72565b6139e19190614b33565b60028501558415613b4e577f00000000000000000000000000000000000000000000000000000000000000006000888180805b85811015613b47576001600160a01b038085166000908152600f60205260409020541692508215613b47576001600160a01b03831660009081526007602052604081209550613a6490869061431d565b60008181526011602052604081205461271090613a81908f614b72565b613a8b9190614b33565b6001600160a01b038516600090815260136020526040812080549293508392909190613ab8908490614aec565b90915550506001600160a01b038416600090815260146020526040812080548f9290613ae5908490614aec565b909155505060018601549250613afb8184614aec565b600187018190559250670de0b6b3a7640000613b178985614b72565b613b219190614b33565b6002870155613b30818a614aec565b98508394505080613b4090614b1a565b9050613a14565b5050505050505b506001555050505050565b80600003613b6657505050565b6040516370a0823160e01b8152306004820152839082906001600160a01b038316906370a0823190602401602060405180830381865afa158015613bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd29190614de1565b1015613c155760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b6044820152606401611282565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905282169063a9059cbb906044016020604051808303816000875af1158015613c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c889190614dfa565b5050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691613ceb9190614e17565b6000604051808303816000865af19150503d8060008114613d28576040519150601f19603f3d011682016040523d82523d6000602084013e613d2d565b606091505b5091509150818015613d57575080511580613d57575080806020019051810190613d579190614dfa565b613c885760405162461bcd60e51b815260206004820152600c60248201526b185c1c1c9bdd994819985a5b60a21b6044820152606401611282565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146120925760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611282565b6001600160a01b0384166000908152601d6020908152604080832080548251818502810185019093528083528493830182828015613ea357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613e85575b50505050509050848360058110613ebc57613ebc614b04565b6020020151841061402b576000805b6001600160a01b0388166000908152601d60205260409020548110156140285784600003613fb2577f000000000000000000000000000000000000000000000000000000000000000060206000858481518110613f2a57613f2a614b04565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054601f6000868581518110613f6957613f69614b04565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054613f9c9190614aec565b10613fad57613faa82614b1a565b91505b614004565b600160226000858481518110613fca57613fca614b04565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054106140045761400182614b1a565b91505b600282106140185760019350505050614031565b61402181614b1a565b9050613ecb565b50505b60009150505b949350505050565b6000806000614046613102565b9150915081816028546140599190614b72565b6140639190614b33565b9250505090565b6040516370a0823160e01b81526001600160a01b038481166004830152859183918316906370a0823190602401602060405180830381865afa1580156140b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140d89190614de1565b101561411b5760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b6044820152606401611282565b6040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528216906323b872dd906064016020604051808303816000875af1158015614172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141969190614dfa565b505050505050565b602554602454600091908083036141b55750919050565b7f0000000000000000000000000000000000000000000000000000000000000000426141e18284614aec565b8110156141f15750919392505050565b6000826141fe8584614b91565b6142089190614b33565b60265490915060005b82811015614260577f00000000000000000000000000000000000000000000000000000000000000006142448389614b72565b61424e9190614b33565b965061425981614b1a565b9050614211565b50949695505050505050565b604080516000808252602082019092526001600160a01b0384169083906040516142969190614e17565b60006040518083038185875af1925050503d80600081146142d3576040519150601f19603f3d011682016040523d82523d6000602084013e6142d8565b606091505b50509050806112fe5760405162461bcd60e51b8152602060048201526011602482015270195d1a081d1c985b9cd9995c8819985a5b607a1b6044820152606401611282565b801561432b5761432b613891565b600182015415612eb6576000670de0b6b3a7640000600180015484600101546143549190614b72565b61435e9190614b33565b905060008360020154826143729190614b91565b9050801561273557818460020181905550808460030160008282546143979190614aec565b909155505050505050565b6000602082840312156143b457600080fd5b5035919050565b6001600160a01b03811681146113ba57600080fd5b80151581146113ba57600080fd5b6000806000606084860312156143f357600080fd5b83356143fe816143bb565b9250602084013591506040840135614415816143d0565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561445957614459614420565b60405290565b60405160e0810167ffffffffffffffff8111828210171561445957614459614420565b604051601f8201601f1916810167ffffffffffffffff811182821017156144ab576144ab614420565b604052919050565b600067ffffffffffffffff8211156144cd576144cd614420565b5060051b60200190565b600082601f8301126144e857600080fd5b813560206144fd6144f8836144b3565b614482565b82815260059290921b8401810191818101908684111561451c57600080fd5b8286015b84811015614540578035614533816143bb565b8352918301918301614520565b509695505050505050565b6000806040838503121561455e57600080fd5b823567ffffffffffffffff8082111561457657600080fd5b614582868387016144d7565b935060209150818501358181111561459957600080fd5b85019050601f810186136145ac57600080fd5b80356145ba6144f8826144b3565b81815260059190911b820183019083810190888311156145d957600080fd5b928401925b828410156145f7578335825292840192908401906145de565b80955050505050509250929050565b60008060006060848603121561461b57600080fd5b8335614626816143bb565b92506020840135614636816143bb565b929592945050506040919091013590565b60008060008060008060c0878903121561466057600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b60006020828403121561469c57600080fd5b81356146a7816143bb565b9392505050565b600080604083850312156146c157600080fd5b823567ffffffffffffffff808211156146d957600080fd5b6146e5868387016144d7565b935060208501359150808211156146fb57600080fd5b50614708858286016144d7565b9150509250929050565b6000806040838503121561472557600080fd5b8235614730816143bb565b946020939093013593505050565b600080600080600080600060e0888a03121561475957600080fd5b8735614764816143bb565b96506020880135614774816143bb565b95506040880135614784816143bb565b94506060880135614794816143bb565b935060808801356147a4816143bb565b925060a08801356147b4816143bb565b915060c08801356147c4816143bb565b8091505092959891949750929550565b600080604083850312156147e757600080fd5b50508035926020909101359150565b6000806040838503121561480957600080fd5b8235614814816143bb565b91506020830135614824816143d0565b809150509250929050565b600080604080848603121561484357600080fd5b833567ffffffffffffffff8082111561485b57600080fd5b614867878388016144d7565b945060209150818601358181111561487e57600080fd5b86019050601f8101871361489157600080fd5b803561489f6144f8826144b3565b81815260079190911b820183019083810190898311156148be57600080fd5b928401925b8284101561491c576080848b0312156148dc5760008081fd5b6148e4614436565b84356148ef816143d0565b815284860135868201528685013587820152606080860135908201528252608090930192908401906148c3565b8096505050505050509250929050565b600080604080848603121561494057600080fd5b833567ffffffffffffffff8082111561495857600080fd5b614964878388016144d7565b945060209150818601358181111561497b57600080fd5b86019050601f8101871361498e57600080fd5b803561499c6144f8826144b3565b81815260e0918202830184019184820191908a8411156149bb57600080fd5b938501935b83851015614a2b5780858c0312156149d85760008081fd5b6149e061445f565b8535815286860135878201528786013588820152606080870135908201526080808701359082015260a0808701359082015260c08087013590820152835293840193918501916149c0565b508096505050505050509250929050565b600060208284031215614a4e57600080fd5b81356146a7816143d0565b60008060408385031215614a6c57600080fd5b8235614a77816143bb565b91506020830135614824816143bb565b6020808252600f908201526e1bdb9b1e481dda1a5d19481b1a5cdd608a1b604082015260600190565b6020808252600c908201526b1bdb9b1e481c1c9bda9958dd60a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115614aff57614aff614ad6565b500190565b634e487b7160e01b600052603260045260246000fd5b600060018201614b2c57614b2c614ad6565b5060010190565b600082614b5057634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215614b6757600080fd5b81516146a7816143bb565b6000816000190483118215151615614b8c57614b8c614ad6565b500290565b600082821015614ba357614ba3614ad6565b500390565b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015614bf25784516001600160a01b031683529383019391830191600101614bcd565b5090979650505050505050565b60006020808385031215614c1257600080fd5b825167ffffffffffffffff811115614c2957600080fd5b8301601f81018513614c3a57600080fd5b8051614c486144f8826144b3565b81815260059190911b82018301908381019087831115614c6757600080fd5b928401925b82841015614c8557835182529284019290840190614c6c565b979650505050505050565b80516001600160701b0381168114614ca757600080fd5b919050565b600080600060608486031215614cc157600080fd5b614cca84614c90565b9250614cd860208501614c90565b9150604084015163ffffffff8116811461441557600080fd5b600181815b80851115614d2c578160001904821115614d1257614d12614ad6565b80851615614d1f57918102915b93841c9390800290614cf6565b509250929050565b600082614d4357506001611dda565b81614d5057506000611dda565b8160018114614d665760028114614d7057614d8c565b6001915050611dda565b60ff841115614d8157614d81614ad6565b50506001821b611dda565b5060208310610133831016604e8410600b8410161715614daf575081810a611dda565b614db98383614cf1565b8060001904821115614dcd57614dcd614ad6565b029392505050565b6000611dd78383614d34565b600060208284031215614df357600080fd5b5051919050565b600060208284031215614e0c57600080fd5b81516146a7816143d0565b6000825160005b81811015614e385760208186018101518583015201614e1e565b81811115614e47576000828501525b50919091019291505056fea26469706673582212202651e2ce5eea3aaa1fb92d91535d2d153e6634f1b5bafc012cd98388538138c364736f6c634300080f0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5350,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 164,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 167,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10418,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "poolInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(PoolInfo)10400_storage"
      },
      {
        "astId": 10423,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "userInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(UserInfo)10387_storage)"
      },
      {
        "astId": 10428,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_userLPInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UserLPInfo)10415_storage)"
      },
      {
        "astId": 10431,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_swapRouter",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ISwapRouter)14034"
      },
      {
        "astId": 10433,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_usdt",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 10435,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_minAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 10437,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_mintRewardToken",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 10439,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lp",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 10442,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_nft",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(INFT)13925"
      },
      {
        "astId": 10446,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_invitor",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 10451,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_binder",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 10455,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_inviteFee",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10460,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_defaultInvitor",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 10464,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_inviteAmount",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10468,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_teamAmount",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10472,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_teamNum",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10474,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_pauseSell",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 10476,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellSelfRate",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 10478,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellJoinRate",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 10480,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellNFTRate",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 10482,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellLPReceiver",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 10486,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellJoinAmount",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10488,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_fundAddress",
        "offset": 0,
        "slot": "28",
        "type": "t_address"
      },
      {
        "astId": 10493,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "referrals",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 10497,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "superAccount",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 10501,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "referralAmount",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10505,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "depositAmount",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10509,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "referralReward",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10513,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "userLevel",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10530,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_pauseJoin",
        "offset": 0,
        "slot": "35",
        "type": "t_bool"
      },
      {
        "astId": 10532,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lastDailyUpTime",
        "offset": 0,
        "slot": "36",
        "type": "t_uint256"
      },
      {
        "astId": 10534,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lastAmountRate",
        "offset": 0,
        "slot": "37",
        "type": "t_uint256"
      },
      {
        "astId": 10536,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_amountDailyUp",
        "offset": 0,
        "slot": "38",
        "type": "t_uint256"
      },
      {
        "astId": 10544,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lpReleaseDuration",
        "offset": 0,
        "slot": "39",
        "type": "t_uint256"
      },
      {
        "astId": 10546,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_speedUpCost",
        "offset": 0,
        "slot": "40",
        "type": "t_uint256"
      },
      {
        "astId": 10548,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_speedUpDuration",
        "offset": 0,
        "slot": "41",
        "type": "t_uint256"
      },
      {
        "astId": 10550,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_speedUpReceiver",
        "offset": 0,
        "slot": "42",
        "type": "t_address"
      },
      {
        "astId": 10552,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_speedUpMaxTime",
        "offset": 0,
        "slot": "43",
        "type": "t_uint256"
      },
      {
        "astId": 10554,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_totalUsdt",
        "offset": 0,
        "slot": "44",
        "type": "t_uint256"
      },
      {
        "astId": 10558,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_inProject",
        "offset": 0,
        "slot": "45",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10560,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lastDailyReward",
        "offset": 0,
        "slot": "46",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INFT)13925": {
        "encoding": "inplace",
        "label": "contract INFT",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)14034": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)10387_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MintPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)10387_storage"
      },
      "t_mapping(t_address,t_struct(UserLPInfo)10415_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MintPool.UserLPInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserLPInfo)10415_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoolInfo)10400_storage": {
        "encoding": "inplace",
        "label": "struct MintPool.PoolInfo",
        "members": [
          {
            "astId": 10389,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10391,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "accMintPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10393,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "accMintReward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10395,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "mintPerSec",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10397,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "lastMintTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10399,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "totalMintReward",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserInfo)10387_storage": {
        "encoding": "inplace",
        "label": "struct MintPool.UserInfo",
        "members": [
          {
            "astId": 10380,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10382,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10384,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "rewardMintDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10386,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "calMintReward",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserLPInfo)10415_storage": {
        "encoding": "inplace",
        "label": "struct MintPool.UserLPInfo",
        "members": [
          {
            "astId": 10402,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "lockAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10404,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "calAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10406,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10408,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "lastReleaseTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10410,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "releaseInitAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10412,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "releaseDuration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10414,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "speedUpTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}