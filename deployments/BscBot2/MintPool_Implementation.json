{
  "address": "0xE3e09f21A171E9bb445B5eCD001c1B8D2D3F64B9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "selfAmount",
          "type": "uint256"
        }
      ],
      "name": "Sell",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "powerAmount",
          "type": "uint256"
        }
      ],
      "name": "nftPowerReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "nftTokenReward",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_amountDailyUp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_binder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_fundAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rUsdt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_inProject",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_inviteAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_inviteFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_invitor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lastAmountRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lastDailyUpTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lpReleaseDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_nft",
      "outputs": [
        {
          "internalType": "contract INFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_pauseSell",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellJoinRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellLPReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellNFTRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellSelfRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_speedUpDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_speedUpReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_teamAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_teamNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_userLPInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastReleaseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseInitAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedUpTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "addTotalMintReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "calInvite",
          "type": "bool"
        }
      ],
      "name": "addUserAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardMintDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "calMintReward",
              "type": "uint256"
            }
          ],
          "internalType": "struct MintPool.UserInfo[]",
          "name": "userInfos",
          "type": "tuple[]"
        }
      ],
      "name": "batchInsertUserInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "invitor",
          "type": "address"
        }
      ],
      "name": "bindInvitor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blacklist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userRewardLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateNFTReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "invitor",
          "type": "address"
        }
      ],
      "name": "checkForLevelUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "invitor",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "usdt",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "usdtDecimals",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "mintRewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintRewardTokenDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalUsdt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDailyReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dailyAmountRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "defaultInvitor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "pauseJoin",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBinderLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "getBinderList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnCount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "binders",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getDirectList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "binders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "teamAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdtAmount",
          "type": "uint256"
        }
      ],
      "name": "getJoinTokenAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLPInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalLP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockLP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedUpMaxTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedCostUsdt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedCostToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPendingMintReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "getSellUsdtOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "selfUsdt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdtBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdtAllowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingMintReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inviteAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellJoinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "teamNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "teamAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserLPInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastReleaseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseInitAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedUpTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAllowance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserNFTLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usdt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mintRewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "defaultInvitor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accMintPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accMintReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPerSec",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastMintTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMintReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "sell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setAmountDailyUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setBlockList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setDefaultInvitor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setFundAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setInProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setInviteFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "name": "setLPReleaseDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setLastAmountRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "setLastDailyUpTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintPerSec",
          "type": "uint256"
        }
      ],
      "name": "setMintPerSec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        }
      ],
      "name": "setNFTAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "p",
          "type": "bool"
        }
      ],
      "name": "setPauseSell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setSeedUpReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setSellJoinRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setSellLPReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setSellNFTRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setSellSelfRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "c",
          "type": "uint256"
        }
      ],
      "name": "setSpeedUpCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "name": "setSpeedUpDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mt",
          "type": "uint256"
        }
      ],
      "name": "setSpeedUpMaxTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "setUserLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "speedUpLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "superAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateDailyUpRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardMintDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calMintReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v1Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v2Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v3Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v4Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v5Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xae9061f773cd68ae8f2af200c141f638d497dfbcb9df10d096a8ba1edd0f8714",
  "receipt": {
    "to": null,
    "from": "0x537D678224CA0232345d5ab3814680620499D418",
    "contractAddress": "0xE3e09f21A171E9bb445B5eCD001c1B8D2D3F64B9",
    "transactionIndex": 70,
    "gasUsed": "5246475",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000040000000000000000000000000000000000000000000800000000000000000000000000000001000000000000000000000000000000000000120000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000200000000000000000000000000000000000000000000000800000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc8255aa1e53039cb9f07aa36e2e9d985d3f0466b4eb7cbd87ddea73a7a1e8f1a",
    "transactionHash": "0xae9061f773cd68ae8f2af200c141f638d497dfbcb9df10d096a8ba1edd0f8714",
    "logs": [
      {
        "transactionIndex": 70,
        "blockNumber": 35067452,
        "transactionHash": "0xae9061f773cd68ae8f2af200c141f638d497dfbcb9df10d096a8ba1edd0f8714",
        "address": "0xE3e09f21A171E9bb445B5eCD001c1B8D2D3F64B9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000537d678224ca0232345d5ab3814680620499d418"
        ],
        "data": "0x",
        "logIndex": 236,
        "blockHash": "0xc8255aa1e53039cb9f07aa36e2e9d985d3f0466b4eb7cbd87ddea73a7a1e8f1a"
      }
    ],
    "blockNumber": 35067452,
    "cumulativeGasUsed": "12827292",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8e8ed27d80fb7e80a570ed43ef297563",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"selfAmount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"powerAmount\",\"type\":\"uint256\"}],\"name\":\"nftPowerReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"nftTokenReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_amountDailyUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_binder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inProject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inviteAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_inviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_invitor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastAmountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastDailyUpTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpReleaseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nft\",\"outputs\":[{\"internalType\":\"contract INFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pauseSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellJoinRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellNFTRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellSelfRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_speedUpDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_speedUpReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_teamAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_teamNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userLPInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseInitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedUpTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"addTotalMintReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"calInvite\",\"type\":\"bool\"}],\"name\":\"addUserAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardMintDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calMintReward\",\"type\":\"uint256\"}],\"internalType\":\"struct MintPool.UserInfo[]\",\"name\":\"userInfos\",\"type\":\"tuple[]\"}],\"name\":\"batchInsertUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"bindInvitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userRewardLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateNFTReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"checkForLevelUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdtDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mintRewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintRewardTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDailyReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyAmountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"defaultInvitor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"pauseJoin\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBinderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getBinderList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"binders\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDirectList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"binders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"teamAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"getJoinTokenAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedUpMaxTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedCostUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedCostToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPendingMintReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getSellUsdtOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingMintReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellJoinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserLPInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseInitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedUpTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserNFTLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintRewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultInvitor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMintPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMintReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMintTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMintReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setAmountDailyUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlockList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setDefaultInvitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setInProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setInviteFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setLPReleaseDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setLastAmountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setLastDailyUpTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPerSec\",\"type\":\"uint256\"}],\"name\":\"setMintPerSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"p\",\"type\":\"bool\"}],\"name\":\"setPauseSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setSeedUpReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setSellJoinRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setSellLPReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setSellNFTRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setSellSelfRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setSpeedUpCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setSpeedUpDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mt\",\"type\":\"uint256\"}],\"name\":\"setSpeedUpMaxTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setUserLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokenAmount\",\"type\":\"uint256\"}],\"name\":\"speedUpLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"superAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDailyUpRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardMintDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calMintReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v3Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v4Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v5Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintPool.sol\":\"MintPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/MintPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport \\\"./interface/INFT.sol\\\";\\nimport \\\"./interface/ISwapRouter.sol\\\";\\nimport \\\"./interface/ISwapFactory.sol\\\";\\nimport \\\"./interface/ISwapPair.sol\\\";\\nimport \\\"./interface/IToken.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\ncontract MintPool is Ownable, Initializable {\\n    struct UserInfo {\\n        bool isActive;\\n        uint256 amount;\\n        uint256 rewardMintDebt;\\n        uint256 calMintReward;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 totalAmount;\\n        uint256 accMintPerShare;\\n        uint256 accMintReward;\\n        uint256 mintPerSec;\\n        uint256 lastMintTime;\\n        uint256 totalMintReward;\\n    }\\n\\n    struct UserLPInfo {\\n        uint256 lockAmount;\\n        uint256 calAmount;\\n        uint256 claimedAmount;\\n        uint256 lastReleaseTime;\\n        uint256 releaseInitAmount;\\n        uint256 releaseDuration;\\n        uint256 speedUpTime;\\n    }\\n\\n    PoolInfo public poolInfo;\\n    mapping(address => UserInfo) public userInfo;\\n    mapping(address => UserLPInfo) public _userLPInfo;\\n\\n    ISwapRouter private _swapRouter;\\n    address private _usdt;\\n    uint256 private _minAmount;\\n    address private _mintRewardToken;\\n    address public  _lp;\\n    INFT public _nft;\\n\\n    mapping(address => address) public _invitor;\\n    mapping(address => address[]) public _binder;\\n    mapping(uint256 => uint256) public _inviteFee;\\n    uint256 private immutable _inviteLen = 3;\\n    address private _defaultInvitor;\\n\\n    mapping(address => uint256) public _inviteAmount;\\n    mapping(address => uint256) public _teamAmount;\\n    mapping(address => uint256) public _teamNum;\\n\\n    bool public _pauseSell;\\n    uint256 public _sellSelfRate;\\n    uint256 public _sellJoinRate;\\n    uint256 public _sellNFTRate;\\n    address public _sellLPReceiver;\\n    mapping(address => uint256) private _sellJoinAmount;\\n    address public _fundAddress;\\n\\n    mapping(address => address[]) public referrals;\\n    mapping(address => address) public superAccount;\\n    mapping(address => uint256) public referralAmount;\\n    mapping(address => uint256) public depositAmount;\\n    mapping(address => uint256) public referralReward;\\n    mapping(address => uint256) public userLevel;\\n\\n    uint256 public immutable v1Amount = 2500 ether;\\n    uint256 public immutable v2Amount = 20000 ether;\\n    uint256 public immutable v3Amount = 50000 ether;\\n    uint256 public immutable v4Amount = 150000 ether;\\n    uint256 public immutable v5Amount = 500000 ether;\\n\\n    bool private _pauseJoin;\\n    uint256 public _lastDailyUpTime;\\n    uint256 public _lastAmountRate;\\n    uint256 public _amountDailyUp;\\n    uint256 private immutable _divFactor = 10000;\\n    uint256 private immutable _dailyDuration = 1 days;\\n\\n    uint256 public _lpReleaseDuration;\\n    //\\n    uint256 private _speedUpCost;\\n    uint256 public _speedUpDuration;\\n    address public _speedUpReceiver;\\n    uint256 private _speedUpMaxTime;\\n    uint256 private _totalUsdt;\\n\\n    mapping(address => bool) public _inProject;\\n    uint256 private _lastDailyReward;\\n\\n    mapping(address => bool) public blacklist;\\n\\n\\n    event nftTokenReward(address indexed account, uint256 indexed level, uint256 indexed tokenAmount);\\n    event nftPowerReward(address indexed account, uint256 indexed level, uint256 indexed powerAmount);\\n    event Deposit(address indexed account, uint256 indexed amount);\\n    event Sell(address indexed account, uint256 indexed tokenAmount, uint256 indexed selfAmount);\\n\\n\\n    // ******** modifier *********\\n\\n    modifier onlyWhiteList() {\\n        require(\\n            msg.sender == _fundAddress ||\\n            msg.sender == owner() ||\\n            msg.sender == address(_nft),\\n            \\\"only white\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyNotInBlacklist() {\\n        require(!blacklist[msg.sender], \\\"in black\\\");\\n        _;\\n    }\\n\\n\\n    // ******** constructor *********\\n    function initialize(\\n        address swapRouter,\\n        address usdt,\\n        address mintRewardToken,\\n        address nft,\\n        address defaultInvitor,\\n        address fundAddress,\\n        address _owner\\n    ) external initializer {\\n//        _pauseJoin = true;\\n//        _swapRouter = ISwapRouter(swapRouter);\\n//        _usdt = usdt;\\n//        _minAmount = 10 ether;\\n//        _nft = INFT(nft);\\n//        _mintRewardToken = mintRewardToken;\\n//\\n//        _lp = ISwapFactory(_swapRouter.factory()).getPair(usdt, mintRewardToken);\\n//\\n//        poolInfo.lastMintTime = block.timestamp;\\n//        _defaultInvitor = defaultInvitor;\\n//        userInfo[defaultInvitor].isActive = true;\\n//\\n//        _inviteFee[0] = 800;\\n//        // 8%\\n//        _inviteFee[1] = 500;\\n//        // 5%\\n//        _inviteFee[2] = 300;\\n//        // 3%\\n//\\n//        _speedUpCost = 300 ether;\\n//\\n//        safeApprove(usdt, swapRouter, ~uint256(0));\\n//        safeApprove(mintRewardToken, swapRouter, ~uint256(0));\\n//        _sellLPReceiver = fundAddress;\\n//        _fundAddress = fundAddress;\\n//        _speedUpMaxTime = 3;\\n//        _speedUpReceiver = 0x000000000000000000000000000000000000dEaD;\\n//\\n//        _sellSelfRate = 5000;\\n//        _sellJoinRate = 4000;\\n//        _sellNFTRate = 500;\\n//\\n//        _lastAmountRate = 10000;\\n//        _amountDailyUp = 10100;\\n//        _lpReleaseDuration = 90 days;\\n//        _speedUpDuration = 10 days;\\n//\\n//        _transferOwnership(_owner);\\n    }\\n\\n    receive() external payable {}\\n\\n\\n    //         ******** public *********\\n    function sell(uint256 tokenAmount) public onlyNotInBlacklist{\\n        require(msg.sender == tx.origin, \\\"not Origin\\\");\\n        require(!_pauseSell, \\\"pause\\\");\\n\\n        _bindInvitor(msg.sender, _defaultInvitor);\\n        _takeToken(_mintRewardToken, msg.sender, address(this), tokenAmount);\\n\\n        IERC20 USDT = IERC20(_usdt);\\n        uint256 usdtBalanceBefore = USDT.balanceOf(address(this));\\n\\n        address[] memory path = new address[](2);\\n        path[0] = _mintRewardToken;\\n        path[1] = _usdt;\\n\\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 usdtAmount = USDT.balanceOf(address(this)) - usdtBalanceBefore;\\n        uint256 selfUsdt = (usdtAmount * _sellSelfRate) / 10000;\\n        _giveToken(_usdt, msg.sender, selfUsdt);\\n\\n        uint256 sellJoinUsdt = (usdtAmount * _sellJoinRate) / 10000;\\n        addLP(msg.sender, sellJoinUsdt, 0, false);\\n\\n        _updatePool();\\n        uint256 sellJoinAmount = (sellJoinUsdt * _lastAmountRate) / _divFactor;\\n        _addUserAmount(msg.sender, sellJoinAmount, false);\\n        _sellJoinAmount[msg.sender] += sellJoinAmount;\\n\\n        uint256 nftUsdt = (usdtAmount * _sellNFTRate) / 10000;\\n        _giveToken(_usdt, address(_nft), nftUsdt);\\n        _nft.addTokenReward(nftUsdt);\\n\\n        uint256 fundUsdt = usdtAmount - selfUsdt - sellJoinUsdt - nftUsdt;\\n        _giveToken(_usdt, _fundAddress, fundUsdt);\\n\\n        IToken(_mintRewardToken).giveMintReward();\\n\\n        emit Sell(msg.sender, tokenAmount, selfUsdt);\\n    }\\n\\n\\n    function deposit(uint256 amount, uint256 minTokenAmount, address invitor) external {\\n        require(!_pauseJoin, \\\"pause\\\");\\n        require(amount >= _minAmount, \\\"too low\\\");\\n\\n        address account = msg.sender;\\n        require(account == msg.sender, \\\"not origin\\\");\\n\\n        _totalUsdt += amount;\\n\\n        _bindInvitor(account, invitor);\\n\\n        _takeToken(_usdt, account, address(this), amount);\\n\\n        addLP(account, amount, minTokenAmount, true);\\n\\n        _updatePool();\\n\\n        _addUserAmount(account, (amount * _lastAmountRate) / _divFactor, true);\\n\\n        IToken(_mintRewardToken).giveMintReward();\\n\\n        distributeNFTRewards(invitor, amount);\\n\\n        addReferral(amount, account, invitor);\\n\\n        emit Deposit(account, amount);\\n    }\\n\\n\\n    function claim() public onlyNotInBlacklist{\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        _calReward(user, true);\\n        uint256 pendingMint = user.calMintReward;\\n\\n        if (pendingMint > 0) {\\n            _giveToken(_mintRewardToken, msg.sender, pendingMint);\\n            user.calMintReward = 0;\\n        }\\n\\n        IToken(_mintRewardToken).giveMintReward();\\n    }\\n\\n\\n    function claimLP() public onlyNotInBlacklist {\\n        require(msg.sender == tx.origin, \\\"claimLP not Origin\\\");\\n\\n        UserLPInfo storage userLPInfo = _userLPInfo[msg.sender];\\n        uint256 nowTime = block.timestamp;\\n\\n        if (userLPInfo.lastReleaseTime > 0 && nowTime > userLPInfo.lastReleaseTime) {\\n            uint256 releaseAmount = (userLPInfo.releaseInitAmount * (nowTime - userLPInfo.lastReleaseTime)) / userLPInfo.releaseDuration;\\n            uint256 maxAmount = userLPInfo.lockAmount - userLPInfo.calAmount - userLPInfo.claimedAmount;\\n            if (releaseAmount > maxAmount) {\\n                releaseAmount = maxAmount;\\n            }\\n            userLPInfo.calAmount += releaseAmount;\\n        }\\n\\n        uint256 calAmount = userLPInfo.calAmount;\\n\\n        if (calAmount > 0) {\\n            _giveToken(_lp, msg.sender, calAmount);\\n            userLPInfo.calAmount = 0;\\n            userLPInfo.claimedAmount += calAmount;\\n            IToken(_mintRewardToken).addUserLPAmount(msg.sender, calAmount);\\n        }\\n\\n        if (nowTime > userLPInfo.lastReleaseTime) {\\n            userLPInfo.lastReleaseTime = nowTime;\\n        }\\n\\n        IToken(_mintRewardToken).giveMintReward();\\n    }\\n\\n\\n    function checkForLevelUp(address invitor) public {\\n        if (referrals[invitor].length > 1) {\\n            uint256 totalReferralAmount = referralAmount[invitor] + depositAmount[invitor];\\n            uint256 currentLevel = userLevel[invitor];\\n            uint256[5] memory amountCheckArray = [v1Amount * 2, v2Amount, v3Amount, v4Amount, v5Amount];\\n            if (currentLevel < 5){\\n                if (checkLevelCount(invitor, amountCheckArray, totalReferralAmount, currentLevel)) {\\n                    userLevel[invitor] = currentLevel + 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getPendingMintReward(address account) public view returns (uint256 reward) {\\n        PoolInfo storage pool = poolInfo;\\n        UserInfo storage user = userInfo[account];\\n\\n        if (user.amount > 0) {\\n            uint256 blockTime = block.timestamp;\\n            uint256 lastRewardTime = pool.lastMintTime;\\n\\n            if (blockTime > lastRewardTime) {\\n                uint256 poolPendingReward = pool.mintPerSec * (blockTime - lastRewardTime);\\n                uint256 totalReward = pool.totalMintReward;\\n                uint256 accReward = pool.accMintReward;\\n                uint256 remainReward = (totalReward > accReward) ? (totalReward - accReward) : 0;\\n\\n                poolPendingReward = (poolPendingReward > remainReward) ? remainReward : poolPendingReward;\\n\\n                reward = (user.amount * (pool.accMintPerShare + (poolPendingReward * 1e18) / pool.totalAmount)) / 1e18 - user.rewardMintDebt;\\n            }\\n        }\\n\\n        return reward;\\n    }\\n\\n\\n    function updateDailyUpRate() public {\\n        uint256 lastDailyUpTime = _lastDailyUpTime;\\n        if (0 == lastDailyUpTime) {\\n            return;\\n        }\\n        uint256 dailyDuration = _dailyDuration;\\n        uint256 nowTime = block.timestamp;\\n        if (nowTime < lastDailyUpTime + dailyDuration) {\\n            return;\\n        }\\n        uint256 ds = (nowTime - lastDailyUpTime) / dailyDuration;\\n        _lastDailyUpTime = lastDailyUpTime + ds * dailyDuration;\\n\\n        uint256 lastAmountRate = _lastAmountRate;\\n        lastAmountRate = (lastAmountRate * _amountDailyUp ** ds) / _divFactor ** ds;\\n        _lastAmountRate = lastAmountRate;\\n    }\\n\\n    function speedUpLP(uint256 maxTokenAmount) public {\\n        require(msg.sender == tx.origin, \\\"not Origin\\\");\\n        UserLPInfo storage userLPInfo = _userLPInfo[msg.sender];\\n        uint256 lastReleaseTime = userLPInfo.lastReleaseTime;\\n        uint256 nowTime = block.timestamp;\\n        if (lastReleaseTime > 0 && nowTime > lastReleaseTime) {\\n            uint256 releaseAmount = (userLPInfo.releaseInitAmount *\\n            (nowTime - lastReleaseTime)) / userLPInfo.releaseDuration;\\n            uint256 maxAmount = userLPInfo.lockAmount -\\n            userLPInfo.calAmount -\\n            userLPInfo.claimedAmount;\\n            if (releaseAmount > maxAmount) {\\n                releaseAmount = maxAmount;\\n            }\\n            userLPInfo.calAmount += releaseAmount;\\n        }\\n\\n        if (nowTime > lastReleaseTime) {\\n            userLPInfo.lastReleaseTime = nowTime;\\n        }\\n\\n        require(userLPInfo.speedUpTime < _speedUpMaxTime, \\\"speedUpTime is max\\\");\\n        userLPInfo.speedUpTime++;\\n        uint256 tokenAmount = getSpeedUpTokenAmount();\\n        require(tokenAmount <= maxTokenAmount, \\\"token amount is too much\\\");\\n        _takeToken(_mintRewardToken, msg.sender, _speedUpReceiver, tokenAmount);\\n\\n        //\\n        uint256 remainAmount = userLPInfo.lockAmount -\\n        userLPInfo.calAmount -\\n        userLPInfo.claimedAmount;\\n        uint256 remainDuration = (remainAmount * userLPInfo.releaseDuration) /\\n        userLPInfo.releaseInitAmount;\\n\\n        //\\n        userLPInfo.releaseInitAmount = remainAmount;\\n        uint256 speedUpDuration = _speedUpDuration;\\n        require(remainDuration > speedUpDuration, \\\"releaseDuration is too short\\\");\\n        userLPInfo.releaseDuration = remainDuration - speedUpDuration;\\n\\n        IToken(_mintRewardToken).giveMintReward();\\n    }\\n\\n    // ******** private *********\\n    function checkLevelCount(address invitor, uint[5] memory amountCheckArray, uint totalReferralAmount, uint currentLevel)\\n    internal view returns (bool) {\\n        address[] memory referralArr = referrals[invitor];\\n        if (totalReferralAmount >= amountCheckArray[currentLevel]) {\\n            uint cnt = 0;\\n            for (uint256 i; i < referrals[invitor].length; ++i) {\\n                if (currentLevel == 0) {\\n                    if (referralAmount[referralArr[i]] + depositAmount[referralArr[i]] >= v1Amount) {\\n                        ++cnt;\\n                    }\\n                } else {\\n                    if (userLevel[referralArr[i]] >= 1) {\\n                        ++cnt;\\n                    }\\n                }\\n                if (cnt >= 2) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n    // Give NFT reward\\n    function distributeNFTRewards(address invitor, uint256 amount) private {\\n        uint256 invLevel = userLevel[invitor];\\n        uint256 nBalance = _nft.balanceOf(invitor);\\n        uint256 rewardAmount = calculateNFTReward(invLevel, amount);\\n\\n        if (invLevel > 0 && nBalance > 0) {\\n            distributeMainReward(invitor, rewardAmount);\\n            distributeSuperRewards(invitor, invLevel, amount);\\n        } else {\\n            // Loop super wallet\\n            address currentAccount = superAccount[invitor];\\n            bool hasNFT = false;\\n            while (currentAccount != address(0) && !hasNFT) {\\n                uint256 sLevel = userLevel[currentAccount];\\n                uint256 sBalance = _nft.balanceOf(currentAccount);\\n                if (sLevel > 0 && sBalance > 0) {\\n                    hasNFT = true;\\n                    rewardAmount = calculateNFTReward(sLevel, amount);\\n                    distributeMainReward(currentAccount, rewardAmount);\\n                    distributeSuperRewards(currentAccount, sLevel, amount);\\n                }\\n                if (currentAccount == superAccount[currentAccount]) {\\n                    currentAccount = address(0);\\n                } else {\\n                    currentAccount = superAccount[currentAccount];\\n                }\\n            }\\n        }\\n    }\\n\\n    function distributeMainReward(address invitor, uint256 rewardAmount) private {\\n        // Add power\\n        uint256 addAmount = (rewardAmount * _lastAmountRate) / _divFactor;\\n        _addUserAmount(invitor, addAmount, false);\\n\\n        uint256 level = userLevel[invitor];\\n        emit nftPowerReward(invitor, level, addAmount);\\n\\n        // Give token\\n        _giveToken(_usdt, invitor, rewardAmount);\\n\\n        emit nftTokenReward(invitor, level, rewardAmount);\\n    }\\n\\n    function distributeSuperRewards(address invitor, uint256 invLevel, uint256 amount) private {\\n        address currentAccount = superAccount[invitor];\\n        uint256 nextLevel = invLevel;\\n        uint256 sameLevel = invLevel + 1;\\n\\n        while (currentAccount != address(0) && nextLevel <= 5) {\\n            uint256 sLevel = userLevel[currentAccount];\\n            uint256 sAmount = calculateNFTReward(sLevel, amount);\\n\\n            if (sLevel > nextLevel || sLevel == sameLevel) {\\n                distributeSuperReward(currentAccount, sAmount);\\n                nextLevel = sLevel;\\n                sameLevel = sLevel + 1;\\n            } else if (sLevel == nextLevel) {\\n                distributeSameLevelReward(currentAccount, sAmount);\\n                nextLevel = sLevel + 1;\\n            }\\n            if (currentAccount == superAccount[currentAccount]) {\\n                currentAccount = address(0);\\n            } else {\\n                currentAccount = superAccount[currentAccount];\\n            }\\n        }\\n    }\\n\\n    function distributeSuperReward(address invitor, uint256 sAmount) private {\\n        // Add power\\n        uint256 srAmount = (sAmount * _lastAmountRate) / _divFactor;\\n        _addUserAmount(invitor, srAmount, false);\\n\\n        uint256 level = userLevel[invitor];\\n        emit nftPowerReward(invitor, level, srAmount);\\n\\n        // Give token\\n        _giveToken(_usdt, invitor, sAmount);\\n\\n        emit nftTokenReward(invitor, level, sAmount);\\n    }\\n\\n    function distributeSameLevelReward(address invitor, uint256 sAmount) private {\\n        // Same level 20% rewards\\n        uint256 srAmount = (sAmount * _lastAmountRate) / _divFactor;\\n        uint256 sameLevelAmount = (srAmount * 20) / 100;\\n\\n        // Add power\\n        _addUserAmount(invitor, sameLevelAmount, false);\\n\\n        uint256 level = userLevel[invitor];\\n        emit nftPowerReward(invitor, level, sameLevelAmount);\\n\\n        // Token reward\\n        uint256 tokenAmount = (sAmount * 20) / 100;\\n        _giveToken(_usdt, invitor, tokenAmount);\\n\\n        emit nftTokenReward(invitor, level, tokenAmount);\\n    }\\n\\n    // NFT add ref\\n    function addReferral(uint256 amount, address account, address invitor) private {\\n        depositAmount[account] += amount;\\n\\n        address currentAccount = invitor;\\n        while (currentAccount != address(0)) {\\n            referralAmount[currentAccount] += amount;\\n            checkForLevelUp(currentAccount);\\n            if (currentAccount == superAccount[currentAccount]) {\\n                currentAccount = address(0);\\n            }\\n            currentAccount = superAccount[currentAccount];\\n        }\\n    }\\n\\n    function addLP(address account, uint256 usdtAmount, uint256 minTokenAmount, bool lockLP) private {\\n        address token = _mintRewardToken;\\n        IERC20 Token = IERC20(token);\\n        uint256 tokenBalanceBefore = Token.balanceOf(address(this));\\n\\n        address usdt = _usdt;\\n        address[] memory path = new address[](2);\\n        path[0] = usdt;\\n        path[1] = token;\\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            usdtAmount / 2,\\n            minTokenAmount,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 tokenAmount = Token.balanceOf(address(this)) - tokenBalanceBefore;\\n\\n        address lpReceiver = lockLP ? address(this) : _sellLPReceiver;\\n        (, , uint256 liquidity) = _swapRouter.addLiquidity(\\n            usdt,\\n            token,\\n            usdtAmount / 2,\\n            tokenAmount,\\n            0,\\n            0,\\n            lpReceiver,\\n            block.timestamp\\n        );\\n        //\\n        if (lockLP) {\\n            _addLockLP(account, liquidity);\\n        } else {\\n            IToken(_mintRewardToken).addUserLPAmount(lpReceiver, liquidity);\\n        }\\n    }\\n\\n    function _addLockLP(address account, uint256 liquidity) private {\\n        UserLPInfo storage userLPInfo = _userLPInfo[account];\\n        uint256 lastReleaseTime = userLPInfo.lastReleaseTime;\\n        uint256 nowTime = block.timestamp;\\n        if (lastReleaseTime > 0 && nowTime > lastReleaseTime) {\\n            uint256 releaseAmount = (userLPInfo.releaseInitAmount * (nowTime - lastReleaseTime)) / userLPInfo.releaseDuration;\\n            uint256 maxAmount = userLPInfo.lockAmount - userLPInfo.calAmount - userLPInfo.claimedAmount;\\n            if (releaseAmount > maxAmount) {\\n                releaseAmount = maxAmount;\\n            }\\n            userLPInfo.calAmount += releaseAmount;\\n        }\\n        uint256 remainAmount = userLPInfo.lockAmount - userLPInfo.calAmount - userLPInfo.claimedAmount;\\n        userLPInfo.lockAmount += liquidity;\\n        userLPInfo.releaseInitAmount = remainAmount + liquidity;\\n        userLPInfo.releaseDuration = _lpReleaseDuration;\\n\\n        if (nowTime > lastReleaseTime) {\\n            userLPInfo.lastReleaseTime = nowTime;\\n        }\\n    }\\n\\n    function _addUserAmount(address account, uint256 amount, bool calInvite) private {\\n        UserInfo storage user = userInfo[account];\\n        _calReward(user, false);\\n\\n        uint256 userAmount = user.amount;\\n        userAmount += amount;\\n        user.amount = userAmount;\\n\\n        uint256 poolTotalAmount = poolInfo.totalAmount;\\n        poolTotalAmount += amount;\\n\\n        uint256 poolAccMintPerShare = poolInfo.accMintPerShare;\\n        user.rewardMintDebt = (userAmount * poolAccMintPerShare) / 1e18;\\n\\n        if (calInvite) {\\n            uint256 len = _inviteLen;\\n            UserInfo storage invitorInfo;\\n            address current = account;\\n            address invitor;\\n            uint256 invitorTotalAmount;\\n            for (uint256 i; i < len; ++i) {\\n                invitor = _invitor[current];\\n                if (address(0) == invitor) {\\n                    break;\\n                }\\n                invitorInfo = userInfo[invitor];\\n                _calReward(invitorInfo, false);\\n                uint256 inviteAmount = (amount * _inviteFee[i]) / 10000;\\n                _inviteAmount[invitor] += inviteAmount;\\n                _teamAmount[invitor] += amount;\\n\\n                invitorTotalAmount = invitorInfo.amount;\\n                invitorTotalAmount += inviteAmount;\\n                invitorInfo.amount = invitorTotalAmount;\\n                invitorInfo.rewardMintDebt = (invitorTotalAmount * poolAccMintPerShare) / 1e18;\\n\\n                poolTotalAmount += inviteAmount;\\n                current = invitor;\\n            }\\n        }\\n        poolInfo.totalAmount = poolTotalAmount;\\n    }\\n\\n    function _updatePool() private {\\n        updateDailyUpRate();\\n        PoolInfo storage pool = poolInfo;\\n        uint256 blockTime = block.timestamp;\\n        uint256 lastRewardTime = pool.lastMintTime;\\n        if (blockTime <= lastRewardTime) {\\n            return;\\n        }\\n        pool.lastMintTime = blockTime;\\n\\n        uint256 accReward = pool.accMintReward;\\n        uint256 totalReward = pool.totalMintReward;\\n        if (accReward >= totalReward) {\\n            return;\\n        }\\n\\n        uint256 totalAmount = pool.totalAmount;\\n        uint256 rewardPerSec = pool.mintPerSec;\\n        if (0 < totalAmount && 0 < rewardPerSec) {\\n            uint256 reward = rewardPerSec * (blockTime - lastRewardTime);\\n            uint256 remainReward = totalReward - accReward;\\n            if (reward > remainReward) {\\n                reward = remainReward;\\n            }\\n            pool.accMintPerShare += (reward * 1e18) / totalAmount;\\n            pool.accMintReward += reward;\\n        }\\n    }\\n\\n    function _calReward(UserInfo storage user, bool updatePool) private {\\n        if (updatePool) {\\n            _updatePool();\\n        }\\n        if (user.amount > 0) {\\n            uint256 accMintReward = (user.amount * poolInfo.accMintPerShare) / 1e18;\\n            uint256 pendingMintAmount = accMintReward - user.rewardMintDebt;\\n            if (pendingMintAmount > 0) {\\n                user.rewardMintDebt = accMintReward;\\n                user.calMintReward += pendingMintAmount;\\n            }\\n        }\\n    }\\n\\n\\n    // ******** view *********\\n    function getDailyRate() private view returns (uint256) {\\n        uint256 lastAmountRate = _lastAmountRate;\\n        uint256 lastDailyUpTime = _lastDailyUpTime;\\n        if (0 == lastDailyUpTime) {\\n            return lastAmountRate;\\n        }\\n        uint256 dailyDuration = _dailyDuration;\\n        uint256 nowTime = block.timestamp;\\n        if (nowTime < lastDailyUpTime + dailyDuration) {\\n            return lastAmountRate;\\n        }\\n        uint256 ds = (nowTime - lastDailyUpTime) / dailyDuration;\\n\\n        uint256 amountDailyUp = _amountDailyUp;\\n        for (uint256 i; i < ds; ++i) {\\n            lastAmountRate = (lastAmountRate * amountDailyUp) / _divFactor;\\n        }\\n        return lastAmountRate;\\n    }\\n\\n    function calculateNFTReward(uint256 userRewardLevel, uint256 amount) public pure returns (uint256){\\n        if (userRewardLevel == 0 || userRewardLevel > 5) {\\n            return 0;\\n        }\\n        return (amount * userRewardLevel) / 100;\\n    }\\n\\n    function getSpeedUpTokenAmount() private view returns (uint256 tokenAmount){\\n        (uint256 rUsdt, uint256 rToken) = _getReserves();\\n        tokenAmount = (_speedUpCost * rToken) / rUsdt;\\n    }\\n\\n    function _getReserves() public view returns (uint256 rUsdt, uint256 rToken){\\n        ISwapPair pair = ISwapPair(_lp);\\n        (uint256 r0, uint256 r1,) = pair.getReserves();\\n\\n        if (_usdt < _mintRewardToken) {\\n            rUsdt = r0;\\n            rToken = r1;\\n        } else {\\n            rUsdt = r1;\\n            rToken = r0;\\n        }\\n    }\\n\\n    function getJoinTokenAmountOut(uint256 usdtAmount) public view returns (uint256 tokenAmount){\\n        address[] memory path = new address[](2);\\n        path[0] = _usdt;\\n        path[1] = _mintRewardToken;\\n        uint256[] memory amounts = _swapRouter.getAmountsOut(\\n            usdtAmount / 2,\\n            path\\n        );\\n        tokenAmount = amounts[1];\\n    }\\n\\n    function getSellUsdtOut(uint256 tokenAmount) public view\\n    returns (uint256 usdtAmount, uint256 selfUsdt, uint256 mintAmount){\\n        address[] memory path = new address[](2);\\n        path[0] = _mintRewardToken;\\n        path[1] = _usdt;\\n        uint256[] memory amounts = _swapRouter.getAmountsOut(tokenAmount, path);\\n        usdtAmount = amounts[1];\\n        selfUsdt = (usdtAmount * _sellSelfRate) / 10000;\\n        mintAmount = (usdtAmount * _sellJoinRate) / 10000;\\n        mintAmount = (mintAmount * getDailyRate()) / 10000;\\n    }\\n\\n    function getBinderLength(address account) public view returns (uint256) {\\n        return _binder[account].length;\\n    }\\n\\n    // NFT level\\n    function getUserNFTLevel(address account) external view returns (uint256) {\\n        return userLevel[account];\\n    }\\n\\n    //\\u7ed1\\u5b9a\\u9080\\u8bf7\\u5173\\u7cfb\\n    function _bindInvitor(address account, address invitor) private {\\n        UserInfo storage user = userInfo[account];\\n        if (!user.isActive) {\\n            require(address(0) != invitor, \\\"invitor 0\\\");\\n            require(userInfo[invitor].isActive, \\\"invitor !Active\\\");\\n            //nft refer\\n            referrals[invitor].push(account);\\n            superAccount[account] = invitor;\\n\\n            _invitor[account] = invitor;\\n            _binder[invitor].push(account);\\n            for (uint256 i; i < _inviteLen;) {\\n                _teamNum[invitor] += 1;\\n                invitor = _invitor[invitor];\\n                if (address(0) == invitor) {\\n                    break;\\n                }\\n            unchecked {\\n                ++i;\\n            }\\n            }\\n            user.isActive = true;\\n        }\\n    }\\n\\n    function getBinderList(address account, uint256 start, uint256 length) external view\\n    returns (uint256 returnCount, address[] memory binders) {\\n        address[] storage _binders = _binder[account];\\n        uint256 recordLen = _binders.length;\\n        if (0 == length) {\\n            length = recordLen;\\n        }\\n        returnCount = length;\\n        binders = new address[](length);\\n        uint256 index = 0;\\n        for (uint256 i = start; i < start + length; i++) {\\n            if (i >= recordLen) {\\n                return (index, binders);\\n            }\\n            binders[index] = _binders[i];\\n            index++;\\n        }\\n    }\\n\\n    function getDirectList(address account) external view\\n    returns (address[] memory binders, uint256[] memory teamAmounts){\\n        address[] storage _binders = referrals[account];\\n        uint256 recordLen = _binders.length;\\n        binders = new address[](recordLen);\\n        teamAmounts = new uint256[](recordLen);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < recordLen; i++) {\\n            if (i >= recordLen) {\\n                return (binders, teamAmounts);\\n            }\\n\\n            address binder = _binders[i];\\n            binders[index] = binder;\\n            teamAmounts[index] = depositAmount[binder] + referralAmount[binder];\\n            index++;\\n        }\\n    }\\n\\n\\n    function getUserLPInfo(address account)\\n    public\\n    view\\n    returns (\\n        uint256 lockAmount,\\n        uint256 calAmount,\\n        uint256 claimedAmount,\\n        uint256 lastReleaseTime,\\n        uint256 releaseInitAmount,\\n        uint256 releaseDuration,\\n        uint256 speedUpTime,\\n        uint256 tokenBalance,\\n        uint256 tokenAllowance\\n    ){\\n        UserLPInfo storage userLPInfo = _userLPInfo[account];\\n        lockAmount = userLPInfo.lockAmount;\\n        calAmount = userLPInfo.calAmount;\\n        claimedAmount = userLPInfo.claimedAmount;\\n        releaseInitAmount = userLPInfo.releaseInitAmount;\\n        releaseDuration = userLPInfo.releaseDuration;\\n        speedUpTime = userLPInfo.speedUpTime;\\n        lastReleaseTime = userLPInfo.lastReleaseTime;\\n        tokenBalance = IERC20(_mintRewardToken).balanceOf(account);\\n        tokenAllowance = IERC20(_mintRewardToken).allowance(\\n            account,\\n            address(this)\\n        );\\n    }\\n\\n    function getUserInfo(address account)\\n    public\\n    view\\n    returns (\\n        uint256 amount,\\n        uint256 usdtBalance,\\n        uint256 usdtAllowance,\\n        uint256 pendingMintReward,\\n        uint256 inviteAmount,\\n        uint256 sellJoinAmount,\\n        uint256 teamNum,\\n        uint256 teamAmount\\n    )\\n    {\\n        UserInfo storage user = userInfo[account];\\n        amount = user.amount;\\n        usdtBalance = IERC20(_usdt).balanceOf(account);\\n        usdtAllowance = IERC20(_usdt).allowance(account, address(this));\\n        pendingMintReward = getPendingMintReward(account) + user.calMintReward;\\n        inviteAmount = _inviteAmount[account];\\n        sellJoinAmount = _sellJoinAmount[account];\\n        teamNum = _teamNum[account];\\n        teamAmount = _teamAmount[account];\\n    }\\n\\n    function getBaseInfo()\\n    external\\n    view\\n    returns (\\n        address usdt,\\n        uint256 usdtDecimals,\\n        address mintRewardToken,\\n        uint256 mintRewardTokenDecimals,\\n        uint256 totalUsdt,\\n        uint256 totalAmount,\\n        uint256 lastDailyReward,\\n        uint256 dailyAmountRate,\\n        uint256 minAmount,\\n        address defaultInvitor,\\n        bool pauseJoin\\n    )\\n    {\\n        usdt = _usdt;\\n        usdtDecimals = 18;\\n        mintRewardToken = _mintRewardToken;\\n        mintRewardTokenDecimals = 18;\\n        totalUsdt = _totalUsdt;\\n        totalAmount = poolInfo.totalAmount;\\n        lastDailyReward = _lastDailyReward;\\n        dailyAmountRate = getDailyRate();\\n        minAmount = _minAmount;\\n        defaultInvitor = _defaultInvitor;\\n        pauseJoin = _pauseJoin;\\n    }\\n\\n    function getLPInfo()\\n    external\\n    view\\n    returns (\\n        uint256 totalLP,\\n        uint256 lockLP,\\n        uint256 speedUpMaxTime,\\n        uint256 speedCostUsdt,\\n        uint256 speedCostToken\\n    )\\n    {\\n        totalLP = IERC20(_lp).totalSupply();\\n        lockLP = IERC20(_lp).balanceOf(address(this));\\n        speedUpMaxTime = _speedUpMaxTime;\\n        speedCostUsdt = _speedUpCost;\\n        speedCostToken = getSpeedUpTokenAmount();\\n    }\\n\\n\\n    // ******** owner *********\\n    function setNFTAddress(address _nftAddress) external onlyWhiteList {\\n        _nft = INFT(_nftAddress);\\n    }\\n\\n    function setUserLevel(address account, uint256 level) external onlyWhiteList {\\n        userLevel[account] = level;\\n    }\\n\\n    // Batch userInfo\\n    function batchInsertUserInfo(address[] memory users, UserInfo[] memory userInfos) external onlyWhiteList {\\n        require(users.length == userInfos.length, \\\"Array lengths do not match\\\");\\n        for (uint256 i = 0; i < users.length; i++) {\\n            userInfo[users[i]] = userInfos[i];\\n        }\\n    }\\n\\n    function setPauseSell(bool p) external onlyWhiteList {\\n        _pauseSell = p;\\n    }\\n\\n    function setSellSelfRate(uint256 r) external onlyWhiteList {\\n        _sellSelfRate = r;\\n        require(_sellSelfRate + _sellJoinRate + _sellNFTRate <= 10000, \\\"rate overflow\\\");\\n    }\\n\\n    function setSellJoinRate(uint256 r) external onlyWhiteList {\\n        _sellJoinRate = r;\\n        require(_sellSelfRate + _sellJoinRate + _sellNFTRate <= 10000, \\\"rate overflow\\\");\\n    }\\n\\n    function setSellNFTRate(uint256 r) external onlyWhiteList {\\n        _sellNFTRate = r;\\n        require(_sellSelfRate + _sellJoinRate + _sellNFTRate <= 10000, \\\"rate overflow\\\");\\n    }\\n\\n    function setSellLPReceiver(address a) external onlyWhiteList {\\n        _sellLPReceiver = a;\\n    }\\n\\n    function setFundAddress(address a) external onlyWhiteList {\\n        _fundAddress = a;\\n    }\\n\\n    function setSpeedUpMaxTime(uint256 mt) external onlyWhiteList {\\n        _speedUpMaxTime = mt;\\n    }\\n\\n    function setSpeedUpCost(uint256 c) external onlyWhiteList {\\n        _speedUpCost = c;\\n    }\\n\\n    function setSpeedUpDuration(uint256 d) external onlyWhiteList {\\n        _speedUpDuration = d;\\n    }\\n\\n    function setSeedUpReceiver(address a) external onlyWhiteList {\\n        _speedUpReceiver = a;\\n    }\\n\\n    function setLPReleaseDuration(uint256 d) external onlyWhiteList {\\n        require(d > 0, \\\"release duration must > 0\\\");\\n        _lpReleaseDuration = d;\\n    }\\n\\n    function setAmountDailyUp(uint256 r) external onlyWhiteList {\\n        _amountDailyUp = r;\\n    }\\n\\n    function setLastDailyUpTime(uint256 t) external onlyWhiteList {\\n        _lastDailyUpTime = t;\\n    }\\n\\n    function setLastAmountRate(uint256 r) external onlyWhiteList {\\n        _lastAmountRate = r;\\n    }\\n\\n    function open() external onlyWhiteList {\\n        if (0 == _lastDailyUpTime) {\\n            _lastDailyUpTime = block.timestamp;\\n        }\\n        _pauseJoin = false;\\n    }\\n\\n    function close() external onlyWhiteList {\\n        _pauseJoin = true;\\n    }\\n\\n    function addMintAmount(address account, uint256 amount) external onlyWhiteList {\\n        _bindInvitor(account, _defaultInvitor);\\n        _updatePool();\\n        _addUserAmount(account, amount, false);\\n    }\\n\\n    function setMintPerSec(uint256 mintPerSec) external onlyWhiteList {\\n        _updatePool();\\n        poolInfo.mintPerSec = mintPerSec;\\n    }\\n\\n    function setInviteFee(uint256 i, uint256 fee) external onlyWhiteList {\\n        _inviteFee[i] = fee;\\n    }\\n\\n    function claimBalance(address to, uint256 amount) external onlyWhiteList {\\n        safeTransferETH(to, amount);\\n    }\\n\\n    function claimToken(address token, address to, uint256 amount) external onlyWhiteList {\\n        _giveToken(token, to, amount);\\n    }\\n\\n    function setDefaultInvitor(address adr) external onlyWhiteList {\\n        _defaultInvitor = adr;\\n        userInfo[adr].isActive = true;\\n    }\\n\\n    function setInProject(address adr, bool enable) external onlyWhiteList {\\n        _inProject[adr] = enable;\\n    }\\n\\n    function setBlockList(address adr, bool enable) external onlyWhiteList {\\n        blacklist[adr] = enable;\\n    }\\n\\n    function addTotalMintReward(uint256 reward) external onlyWhiteList {\\n        _updatePool();\\n        poolInfo.totalMintReward += reward;\\n        poolInfo.mintPerSec = reward / _dailyDuration;\\n        _lastDailyReward = reward;\\n    }\\n\\n    function bindInvitor(address account, address invitor) public onlyWhiteList {\\n        _bindInvitor(account, invitor);\\n    }\\n\\n    //    function bindInvitors(address[] memory account, address[] memory invitor) public onlyWhiteList {\\n    //        for (uint256 i = 0; i < account.length; i++) {\\n    //            _bindInvitor(account[i], invitor[i]);\\n    //        }\\n    //    }\\n\\n    function addUserAmount(address account, uint256 amount, bool calInvite) public onlyWhiteList {\\n        _bindInvitor(account, _defaultInvitor);\\n        _updatePool();\\n        _addUserAmount(account, amount, calInvite);\\n    }\\n\\n\\n    // ******** utils *********\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        //bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"approve fail\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success,) = to.call{value : value}(new bytes(0));\\n        require(success, \\\"eth transfer fail\\\");\\n    }\\n\\n    function _giveToken(address tokenAddress, address account, uint256 amount) private {\\n        if (0 == amount) {\\n            return;\\n        }\\n        IERC20 token = IERC20(tokenAddress);\\n        require(token.balanceOf(address(this)) >= amount, \\\"balance not enough\\\");\\n        token.transfer(account, amount);\\n    }\\n\\n    function _takeToken(address tokenAddress, address from, address to, uint256 tokenNum) private {\\n        IERC20 token = IERC20(tokenAddress);\\n        require(token.balanceOf(address(from)) >= tokenNum, \\\"balance not enough\\\");\\n        token.transferFrom(from, to, tokenNum);\\n    }\\n\\n    // ********* setting *********\\n    //    function setPoolInfo(uint256 totalAmount, uint256 accMintPerShare, uint256 accMintReward, uint256 mintPerSec,\\n    //        uint256 lastMintTime, uint256 totalMintReward) external onlyWhiteList {\\n    //        poolInfo.totalAmount = totalAmount;\\n    //        poolInfo.accMintPerShare = accMintPerShare;\\n    //        poolInfo.accMintReward = accMintReward;\\n    //        poolInfo.mintPerSec = mintPerSec;\\n    //        poolInfo.lastMintTime = lastMintTime;\\n    //        poolInfo.totalMintReward = totalMintReward;\\n    //    }\\n    //\\n    //    function setUserLpInfos(address[] memory account, UserLPInfo[] memory lpInfos) external onlyWhiteList {\\n    //        for (uint256 i = 0; i < account.length; i++) {\\n    //            _userLPInfo[account[i]] = lpInfos[i];\\n    //        }\\n    //    }\\n    //\\n    //    function setInviteAmount(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n    //        for (uint256 i = 0; i < account.length; i++) {\\n    //            _inviteAmount[account[i]] = amount[i];\\n    //        }\\n    //    }\\n    //\\n    //    function setTeamAmount(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n    //        for (uint256 i = 0; i < account.length; i++) {\\n    //            _teamAmount[account[i]] = amount[i];\\n    //        }\\n    //    }\\n    //\\n    //    function setSellJoinAmount(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n    //        for (uint256 i = 0; i < account.length; i++) {\\n    //            _sellJoinAmount[account[i]] = amount[i];\\n    //        }\\n    //    }\\n    //\\n    //    function setReferralAmount(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n    //        for (uint256 i = 0; i < account.length; i++) {\\n    //            referralAmount[account[i]] = amount[i];\\n    //        }\\n    //    }\\n    //\\n    //    function setDepositAmount(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n    //        for (uint256 i = 0; i < account.length; i++) {\\n    //            depositAmount[account[i]] = amount[i];\\n    //        }\\n    //    }\\n    //\\n    //    function setReferralReward(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n    //        for (uint256 i = 0; i < account.length; i++) {\\n    //            referralReward[account[i]] = amount[i];\\n    //        }\\n    //    }\\n    //\\n    //    function setUserLevels(address[] memory account, uint256[] memory level) external onlyWhiteList {\\n    //        for (uint256 i = 0; i < account.length; i++) {\\n    //            userLevel[account[i]] = level[i];\\n    //        }\\n    //    }\\n    //\\n    //    function setTotalUsd(uint256 amount) external onlyWhiteList {\\n    //        _totalUsdt = amount;\\n    //    }\\n    //\\n    //    function setLastDailyReward(uint256 reward) external onlyWhiteList {\\n    //        _lastDailyReward = reward;\\n    //    }\\n}\",\"keccak256\":\"0x2a63be5dad0d684bf44957f29d732bcb66fa7723ead53f069047f770959656ef\",\"license\":\"MIT\"},\"contracts/interface/INFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n\\ninterface INFT {\\n    function addTokenReward(uint256 rewardAmount) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n}\",\"keccak256\":\"0xa06dd537bdcde34f676176568c584079729a211bce9f392a5470140dc6007b00\",\"license\":\"MIT\"},\"contracts/interface/ISwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n\\ninterface ISwapFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function feeTo() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\",\"keccak256\":\"0x5849d5f6a26192dc835dd0a452df981b5742afda0fe9ecb564edbb304b6e09e9\",\"license\":\"MIT\"},\"contracts/interface/ISwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface ISwapPair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function sync() external;\\n}\",\"keccak256\":\"0x528ce2a8bd0f10b92a547c7b86bdb098308adb1a1be12a13c4e09964d2047424\",\"license\":\"MIT\"},\"contracts/interface/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface ISwapRouter {\\n    function factory() external pure returns (address);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n}\",\"keccak256\":\"0x8b6dcc30c60ffafe15874d4c3920157a8aa7b5c2141e3d5fefb5593df50397ca\",\"license\":\"MIT\"},\"contracts/interface/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n\\ninterface IToken {\\n    function giveMintReward() external;\\n\\n    function addUserLPAmount(address account, uint256 lpAmount) external;\\n}\\n\",\"keccak256\":\"0xef20803f40e623bfd961ddd3c5486646f1cfc82f7bab120d817917007a7d5c3a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610180604052600360805268878678326eac90000060a05269043c33c193756480000060c052690a968163f0a57b40000060e052691fc3842bd1f071c00000610100526969e10de76676d0800000610120526127106101405262015180610160523480156200006d57600080fd5b5062000079336200007f565b620000cf565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60805160a05160c05160e05161010051610120516101405161016051615d8e6200019760003960008181611792015281816134370152614e8701526000818161259a015281816134a60152818161386d01528181614eeb0152818161513c01526153360152600081816105a101526127a901526000818161073b0152612783015260008181610c10015261275d01526000818161083c01526127370152600081816110180152818161270a0152614d2a015260008181613f60015261414d0152615d8e6000f3fe6080604052600436106104e45760003560e01c80638a56d30611610281578063bc980f8c1161015a578063e5d65633116100cc578063f12e6eb711610085578063f12e6eb714611280578063f2fde38b146112a0578063f48544c3146112c0578063f9f92be4146112d6578063fcfff16f14611306578063fd3cf8851461131b57600080fd5b8063e5d656331461117d578063e697b5d8146111ad578063e7acf131146111cd578063e9f22169146111ed578063ec747edb1461120d578063f0c52e4c1461124357600080fd5b8063d5559e211161011e578063d5559e21146110dd578063dde40dda146110f3578063de44391a14611113578063e20ae39214611128578063e3ca487a1461113d578063e4849b321461115d57600080fd5b8063bc980f8c14611006578063cc396be11461103a578063ce4d9f1514611070578063ce5611431461109a578063cef6632d146110b057600080fd5b8063a779fe92116101f3578063b272d7c3116101b7578063b272d7c314610f50578063b38dcd7114610f70578063b612511014610f86578063b64cf2d914610fa6578063b75265d314610fc6578063b791904514610fe657600080fd5b8063a779fe9214610e92578063aa1a8c6014610ea8578063aa8b38d914610ee3578063ac86af9414610f03578063b1a8c45914610f3057600080fd5b80639551ae44116102455780639551ae4414610d6a57806395d4c7bb14610de557806398300e1814610e12578063a40a789c14610e32578063a4e48ed814610e52578063a5b64e5e14610e7257600080fd5b80638a56d30614610cbf5780638da5cb5b14610cdf5780638dbdbe6d14610cfd57806393b556ad14610d1d57806394f738a214610d4a57600080fd5b80634e71d92d116103be5780636ca9ee1b116103305780637f15b36b116102e95780637f15b36b14610bde578063815a7beb14610bfe5780638230af5a14610c32578063834f8f5514610c525780638593b2b114610c7f57806385dc300414610c9f57600080fd5b80636ca9ee1b14610b0a5780636e18b6db14610b205780636ec42c2c14610b4d578063715018a614610b7b5780637512474e14610b905780637d3643b514610bb057600080fd5b80635f84aecd116103825780635f84aecd14610a035780636386c1c714610a19578063681982a714610a74578063692c7bf714610a9457806369d0373814610ab457806369da132614610ad457600080fd5b80634e71d92d1461092a57806350f62da71461093f5780635239a9931461096b5780635a2f3d091461098b5780635ca8e3f2146109e357600080fd5b80631e8074b511610457578063358764761161041b57806335876476146107ea5780633a0dde511461080a5780633bf5f9341461082a5780633c6369fc1461085e57806343d726d6146108eb578063449fe5001461090057600080fd5b80631e8074b51461072957806326e641ea1461075d578063280e31cc1461077d5780632e0dd9c7146107aa57806333f5780e146107ca57600080fd5b80630c28525d116104a95780630c28525d146105d1578063119f3eb6146105f1578063125bfb66146106555780631703dd12146106755780631959a0021461068b5780631b967ad4146106f357600080fd5b80625a3ff1146104f0578063029a0c9d1461052d5780630600ffc11461054f5780630681c58d1461056f5780630b2ef5f71461058f57600080fd5b366104eb57005b600080fd5b3480156104fc57600080fd5b50600d54610510906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561053957600080fd5b5061054d61054836600461544f565b61133b565b005b34801561055b57600080fd5b5061054d61056a366004615492565b61139d565b34801561057b57600080fd5b5061054d61058a36600461544f565b611420565b34801561059b57600080fd5b506105c37f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610524565b3480156105dd57600080fd5b5061054d6105ec36600461544f565b6114da565b3480156105fd57600080fd5b5061061161060c3660046154d2565b611583565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915260a085015260c084015260e083015261010082015261012001610524565b34801561066157600080fd5b5061054d6106703660046154ed565b6116b7565b34801561068157600080fd5b506105c360255481565b34801561069757600080fd5b506106d16106a63660046154d2565b600760205260009081526040902080546001820154600283015460039093015460ff90921692909184565b6040805194151585526020850193909352918301526060820152608001610524565b3480156106ff57600080fd5b506105c361070e3660046154d2565b6001600160a01b031660009081526010602052604090205490565b34801561073557600080fd5b506105c37f000000000000000000000000000000000000000000000000000000000000000081565b34801561076957600080fd5b5061054d61077836600461544f565b611716565b34801561078957600080fd5b506105c36107983660046154d2565b60226020526000908152604090205481565b3480156107b657600080fd5b5061054d6107c536600461544f565b6117bf565b3480156107d657600080fd5b5061054d6107e5366004615529565b611818565b3480156107f657600080fd5b5061054d610805366004615553565b611888565b34801561081657600080fd5b5061054d61082536600461544f565b6119b3565b34801561083657600080fd5b506105c37f000000000000000000000000000000000000000000000000000000000000000081565b34801561086a57600080fd5b506108b66108793660046154d2565b6008602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610524565b3480156108f757600080fd5b5061054d611a0c565b34801561090c57600080fd5b5060165461091a9060ff1681565b6040519015158152602001610524565b34801561093657600080fd5b5061054d611a6f565b34801561094b57600080fd5b506105c361095a3660046154d2565b602080526000908152604090205481565b34801561097757600080fd5b506105c36109863660046155d9565b611b4f565b34801561099757600080fd5b506001546002546003546004546005546006546109b695949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610524565b3480156109ef57600080fd5b5061054d6109fe3660046155d9565b611b8a565b348015610a0f57600080fd5b506105c360265481565b348015610a2557600080fd5b50610a39610a343660046154d2565b611bf0565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e082015261010001610524565b348015610a8057600080fd5b5061054d610a8f3660046154d2565b611d60565b348015610aa057600080fd5b5061054d610aaf3660046155fb565b611dd6565b348015610ac057600080fd5b5061054d610acf3660046154d2565b611e55565b348015610ae057600080fd5b50610510610aef3660046154d2565b600f602052600090815260409020546001600160a01b031681565b348015610b1657600080fd5b506105c360275481565b348015610b2c57600080fd5b506105c3610b3b3660046154d2565b60216020526000908152604090205481565b348015610b5957600080fd5b50610b6d610b68366004615632565b611ecb565b6040516105249291906156a9565b348015610b8757600080fd5b5061054d611fea565b348015610b9c57600080fd5b5061054d610bab366004615802565b611ffe565b348015610bbc57600080fd5b50610bd0610bcb3660046154d2565b612142565b6040516105249291906158c2565b348015610bea57600080fd5b5061054d610bf936600461544f565b6122d1565b348015610c0a57600080fd5b506105c37f000000000000000000000000000000000000000000000000000000000000000081565b348015610c3e57600080fd5b50601c54610510906001600160a01b031681565b348015610c5e57600080fd5b506105c3610c6d3660046154d2565b60146020526000908152604090205481565b348015610c8b57600080fd5b50610510610c9a366004615529565b61232a565b348015610cab57600080fd5b5061054d610cba3660046154d2565b612362565b348015610ccb57600080fd5b506105c3610cda3660046154d2565b6123d8565b348015610ceb57600080fd5b506000546001600160a01b0316610510565b348015610d0957600080fd5b5061054d610d18366004615919565b6124cd565b348015610d2957600080fd5b506105c3610d383660046154d2565b60156020526000908152604090205481565b348015610d5657600080fd5b5061054d610d653660046154d2565b612691565b348015610d7657600080fd5b50610d7f612812565b604080516001600160a01b039c8d168152602081019b909b52988b16988a01989098526060890196909652608088019490945260a087019290925260c086015260e085015261010084015290921661012082015290151561014082015261016001610524565b348015610df157600080fd5b506105c3610e003660046154d2565b601f6020526000908152604090205481565b348015610e1e57600080fd5b50600e54610510906001600160a01b031681565b348015610e3e57600080fd5b506105c3610e4d36600461544f565b612873565b348015610e5e57600080fd5b5061054d610e6d36600461544f565b61299f565b348015610e7e57600080fd5b5061054d610e8d36600461544f565b612a00565b348015610e9e57600080fd5b506105c360295481565b348015610eb457600080fd5b50610ec8610ec336600461544f565b612ce5565b60408051938452602084019290925290820152606001610524565b348015610eef57600080fd5b5061054d610efe366004615529565b612e68565b348015610f0f57600080fd5b506105c3610f1e3660046154d2565b60136020526000908152604090205481565b348015610f3c57600080fd5b5061054d610f4b36600461544f565b612eca565b348015610f5c57600080fd5b50601a54610510906001600160a01b031681565b348015610f7c57600080fd5b506105c360195481565b348015610f9257600080fd5b5061054d610fa13660046154d2565b612f38565b348015610fb257600080fd5b5061054d610fc136600461594e565b612fae565b348015610fd257600080fd5b5061054d610fe13660046154d2565b613015565b348015610ff257600080fd5b5061054d61100136600461544f565b6130a3565b34801561101257600080fd5b506105c37f000000000000000000000000000000000000000000000000000000000000000081565b34801561104657600080fd5b506105106110553660046154d2565b601e602052600090815260409020546001600160a01b031681565b34801561107c57600080fd5b50611085613112565b60408051928352602083019190915201610524565b3480156110a657600080fd5b506105c360175481565b3480156110bc57600080fd5b506105c36110cb36600461544f565b60116020526000908152604090205481565b3480156110e957600080fd5b506105c360245481565b3480156110ff57600080fd5b50602a54610510906001600160a01b031681565b34801561111f57600080fd5b5061054d6131da565b34801561113457600080fd5b5061054d613426565b34801561114957600080fd5b5061054d61115836600461544f565b6134f6565b34801561116957600080fd5b5061054d61117836600461544f565b61354f565b34801561118957600080fd5b5061091a6111983660046154d2565b602d6020526000908152604090205460ff1681565b3480156111b957600080fd5b506105106111c8366004615529565b613a59565b3480156111d957600080fd5b5061054d6111e83660046155fb565b613a75565b3480156111f957600080fd5b5061054d611208366004615529565b613af4565b34801561121957600080fd5b506105c36112283660046154d2565b6001600160a01b031660009081526022602052604090205490565b34801561124f57600080fd5b50611258613b73565b604080519586526020860194909452928401919091526060830152608082015260a001610524565b34801561128c57600080fd5b5061054d61129b366004615972565b613c7c565b3480156112ac57600080fd5b5061054d6112bb3660046154d2565b613cda565b3480156112cc57600080fd5b506105c360185481565b3480156112e257600080fd5b5061091a6112f13660046154d2565b602f6020526000908152604090205460ff1681565b34801561131257600080fd5b5061054d613d50565b34801561132757600080fd5b5061054d61133636600461544f565b613dbf565b601c546001600160a01b031633148061135e57506000546001600160a01b031633145b806113735750600e546001600160a01b031633145b6113985760405162461bcd60e51b815260040161138f906159a5565b60405180910390fd5b602455565b601c546001600160a01b03163314806113c057506000546001600160a01b031633145b806113d55750600e546001600160a01b031633145b6113f15760405162461bcd60e51b815260040161138f906159a5565b6012546114089084906001600160a01b0316613e18565b611410613ff1565b61141b8383836140d4565b505050565b601c546001600160a01b031633148061144357506000546001600160a01b031633145b806114585750600e546001600160a01b031633145b6114745760405162461bcd60e51b815260040161138f906159a5565b6018819055601954601754612710919061148f9084906159df565b61149991906159df565b11156114d75760405162461bcd60e51b815260206004820152600d60248201526c72617465206f766572666c6f7760981b604482015260640161138f565b50565b601c546001600160a01b03163314806114fd57506000546001600160a01b031633145b806115125750600e546001600160a01b031633145b61152e5760405162461bcd60e51b815260040161138f906159a5565b6000811161157e5760405162461bcd60e51b815260206004820152601960248201527f72656c65617365206475726174696f6e206d757374203e203000000000000000604482015260640161138f565b602755565b6001600160a01b03818116600081815260086020526040808220805460018201546002830154600480850154600586015460068701546003880154600c5499516370a0823160e01b81529485019b909b52959a94999398939791969095948493919216906370a0823190602401602060405180830381865afa15801561160d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163191906159f7565b600c54604051636eb1769f60e11b81526001600160a01b038e8116600483015230602483015292955091169063dd62ed3e90604401602060405180830381865afa158015611683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a791906159f7565b9150509193959799909294969850565b601c546001600160a01b03163314806116da57506000546001600160a01b031633145b806116ef5750600e546001600160a01b031633145b61170b5760405162461bcd60e51b815260040161138f906159a5565b61141b8383836142b8565b601c546001600160a01b031633148061173957506000546001600160a01b031633145b8061174e5750600e546001600160a01b031633145b61176a5760405162461bcd60e51b815260040161138f906159a5565b611772613ff1565b806001600501600082825461178791906159df565b909155506117b790507f000000000000000000000000000000000000000000000000000000000000000082615a10565b600455602e55565b601c546001600160a01b03163314806117e257506000546001600160a01b031633145b806117f75750600e546001600160a01b031633145b6118135760405162461bcd60e51b815260040161138f906159a5565b602555565b601c546001600160a01b031633148061183b57506000546001600160a01b031633145b806118505750600e546001600160a01b031633145b61186c5760405162461bcd60e51b815260040161138f906159a5565b6001600160a01b03909116600090815260226020526040902055565b600054600160a81b900460ff16158080156118b057506000546001600160a01b90910460ff16105b806118d15750303b1580156118d15750600054600160a01b900460ff166001145b6119345760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161138f565b6000805460ff60a01b1916600160a01b1790558015611961576000805460ff60a81b1916600160a81b1790555b80156119a9576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b601c546001600160a01b03163314806119d657506000546001600160a01b031633145b806119eb5750600e546001600160a01b031633145b611a075760405162461bcd60e51b815260040161138f906159a5565b602b55565b601c546001600160a01b0316331480611a2f57506000546001600160a01b031633145b80611a445750600e546001600160a01b031633145b611a605760405162461bcd60e51b815260040161138f906159a5565b6023805460ff19166001179055565b336000908152602f602052604090205460ff1615611a9f5760405162461bcd60e51b815260040161138f90615a32565b336000908152600760205260409020611ab98160016143ee565b60038101548015611ae357600c54611adb906001600160a01b031633836142b8565b600060038301555b600c60009054906101000a90046001600160a01b03166001600160a01b0316632e05661b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611b3357600080fd5b505af1158015611b47573d6000803e3d6000fd5b505050505050565b6000821580611b5e5750600583115b15611b6b57506000611b84565b6064611b778484615a54565b611b819190615a10565b90505b92915050565b601c546001600160a01b0316331480611bad57506000546001600160a01b031633145b80611bc25750600e546001600160a01b031633145b611bde5760405162461bcd60e51b815260040161138f906159a5565b60009182526011602052604090912055565b6001600160a01b038181166000818152600760205260408082206001810154600a5492516370a0823160e01b8152600481019590955294929384938493849384938493849316906370a0823190602401602060405180830381865afa158015611c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8191906159f7565b600a54604051636eb1769f60e11b81526001600160a01b038d81166004830152306024830152929a5091169063dd62ed3e90604401602060405180830381865afa158015611cd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf791906159f7565b96508060030154611d078b6123d8565b611d1191906159df565b6001600160a01b03909a16600090815260136020908152604080832054601b8352818420546015845282852054601490945291909320549b9d9a9c999b999a9299909850909650945092505050565b601c546001600160a01b0316331480611d8357506000546001600160a01b031633145b80611d985750600e546001600160a01b031633145b611db45760405162461bcd60e51b815260040161138f906159a5565b602a80546001600160a01b0319166001600160a01b0392909216919091179055565b601c546001600160a01b0316331480611df957506000546001600160a01b031633145b80611e0e5750600e546001600160a01b031633145b611e2a5760405162461bcd60e51b815260040161138f906159a5565b6001600160a01b03919091166000908152602d60205260409020805460ff1916911515919091179055565b601c546001600160a01b0316331480611e7857506000546001600160a01b031633145b80611e8d5750600e546001600160a01b031633145b611ea95760405162461bcd60e51b815260040161138f906159a5565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166000908152601060205260408120805460609190848403611ef4578094505b8493508467ffffffffffffffff811115611f1057611f106156c2565b604051908082528060200260200182016040528015611f39578160200160208202803683370190505b5092506000865b611f4a87896159df565b811015611fdd57828110611f6357509350611fe2915050565b838181548110611f7557611f75615a73565b9060005260206000200160009054906101000a90046001600160a01b0316858381518110611fa557611fa5615a73565b6001600160a01b039092166020928302919091019091015281611fc781615a89565b9250508080611fd590615a89565b915050611f40565b505050505b935093915050565b611ff2614473565b611ffc60006144cd565b565b601c546001600160a01b031633148061202157506000546001600160a01b031633145b806120365750600e546001600160a01b031633145b6120525760405162461bcd60e51b815260040161138f906159a5565b80518251146120a35760405162461bcd60e51b815260206004820152601a60248201527f4172726179206c656e6774687320646f206e6f74206d61746368000000000000604482015260640161138f565b60005b825181101561141b578181815181106120c1576120c1615a73565b6020026020010151600760008584815181106120df576120df615a73565b6020908102919091018101516001600160a01b031682528181019290925260409081016000208351815460ff191690151517815591830151600183015582015160028201556060909101516003909101558061213a81615a89565b9150506120a6565b6001600160a01b0381166000908152601d60205260409020805460609182918067ffffffffffffffff81111561217a5761217a6156c2565b6040519080825280602002602001820160405280156121a3578160200160208202803683370190505b5093508067ffffffffffffffff8111156121bf576121bf6156c2565b6040519080825280602002602001820160405280156121e8578160200160208202803683370190505b5092506000805b828110156122c8578281106122075750505050915091565b600084828154811061221b5761221b615a73565b9060005260206000200160009054906101000a90046001600160a01b031690508087848151811061224e5761224e615a73565b6001600160a01b039283166020918202929092018101919091529082166000908152601f825260408082205492805290205461228a91906159df565b86848151811061229c5761229c615a73565b6020908102919091010152826122b181615a89565b9350505080806122c090615a89565b9150506121ef565b50505050915091565b601c546001600160a01b03163314806122f457506000546001600160a01b031633145b806123095750600e546001600160a01b031633145b6123255760405162461bcd60e51b815260040161138f906159a5565b602855565b6010602052816000526040600020818154811061234657600080fd5b6000918252602090912001546001600160a01b03169150829050565b601c546001600160a01b031633148061238557506000546001600160a01b031633145b8061239a5750600e546001600160a01b031633145b6123b65760405162461bcd60e51b815260040161138f906159a5565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600760205260408120600181810154909190156124c65760048201544290808211156124c35760006124198284615aa2565b85600301546124289190615a54565b60058601546002870154919250906000818311612446576000612450565b6124508284615aa2565b905080841161245f5783612461565b805b6002880154895491955090670de0b6b3a7640000906124808783615a54565b61248a9190615a10565b8a6001015461249991906159df565b89600101546124a89190615a54565b6124b29190615a10565b6124bc9190615aa2565b9850505050505b50505b5050919050565b60235460ff16156125085760405162461bcd60e51b8152602060048201526005602482015264706175736560d81b604482015260640161138f565b600b548310156125445760405162461bcd60e51b8152602060048201526007602482015266746f6f206c6f7760c81b604482015260640161138f565b3383602c600082825461255791906159df565b9091555061256790508183613e18565b600a5461257f906001600160a01b031682308761451d565b61258c8185856001614649565b612594613ff1565b6125d8817f0000000000000000000000000000000000000000000000000000000000000000602554876125c79190615a54565b6125d19190615a10565b60016140d4565b600c60009054906101000a90046001600160a01b03166001600160a01b0316632e05661b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561262857600080fd5b505af115801561263c573d6000803e3d6000fd5b5050505061264a82856149aa565b612655848284614bb5565b60405184906001600160a01b038316907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c90600090a350505050565b6001600160a01b0381166000908152601d6020526040902054600110156114d7576001600160a01b03811660009081526020808052604080832054601f9092528220546126de91906159df565b6001600160a01b03831660009081526022602052604080822054815160a08101909252929350806127307f00000000000000000000000000000000000000000000000000000000000000006002615a54565b81526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000008152509050600582101561280c576127e284828585614c71565b1561280c576127f28260016159df565b6001600160a01b0385166000908152602260205260409020555b50505050565b600a54600c54602c54600154602e546001600160a01b03948516946012941692849290916000808080612843614e6e565b600b546012546023549d9e9c9d9b9c9a9b999a9899979892979196506001600160a01b0316945060ff1692509050565b604080516002808252606082018352600092839291906020830190803683375050600a5482519293506001600160a01b0316918391506000906128b8576128b8615a73565b6001600160a01b039283166020918202929092010152600c548251911690829060019081106128e9576128e9615a73565b6001600160a01b0392831660209182029290920101526009546000911663d06ca61f612916600287615a10565b846040518363ffffffff1660e01b81526004016129349291906156a9565b600060405180830381865afa158015612951573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129799190810190615ab9565b90508060018151811061298e5761298e615a73565b602002602001015192505050919050565b601c546001600160a01b03163314806129c257506000546001600160a01b031633145b806129d75750600e546001600160a01b031633145b6129f35760405162461bcd60e51b815260040161138f906159a5565b6129fb613ff1565b600455565b333214612a3c5760405162461bcd60e51b815260206004820152600a6024820152693737ba1027b934b3b4b760b11b604482015260640161138f565b3360009081526008602052604090206003810154428115801590612a5f57508181115b15612ae0576005830154600090612a768484615aa2565b8560040154612a859190615a54565b612a8f9190615a10565b90506000846002015485600101548660000154612aac9190615aa2565b612ab69190615aa2565b905080821115612ac4578091505b81856001016000828254612ad891906159df565b909155505050505b81811115612af057600383018190555b602b54836006015410612b3a5760405162461bcd60e51b81526020600482015260126024820152710e6e0cacac8aae0a8d2daca40d2e640dac2f60731b604482015260640161138f565b600683018054906000612b4c83615a89565b91905055506000612b5b614f3c565b905084811115612bad5760405162461bcd60e51b815260206004820152601860248201527f746f6b656e20616d6f756e7420697320746f6f206d7563680000000000000000604482015260640161138f565b600c54602a54612bcc916001600160a01b03908116913391168461451d565b60028401546001850154855460009291612be591615aa2565b612bef9190615aa2565b905060008560040154866005015483612c089190615a54565b612c129190615a10565b60048701839055602954909150808211612c6e5760405162461bcd60e51b815260206004820152601c60248201527f72656c656173654475726174696f6e20697320746f6f2073686f727400000000604482015260640161138f565b612c788183615aa2565b6005880155600c5460408051632e05661b60e01b815290516001600160a01b0390921691632e05661b9160048082019260009290919082900301818387803b158015612cc357600080fd5b505af1158015612cd7573d6000803e3d6000fd5b505050505050505050505050565b6040805160028082526060820183526000928392839283926020830190803683375050600c5482519293506001600160a01b031691839150600090612d2c57612d2c615a73565b6001600160a01b039283166020918202929092010152600a54825191169082906001908110612d5d57612d5d615a73565b6001600160a01b03928316602091820292909201015260095460405163d06ca61f60e01b8152600092919091169063d06ca61f90612da190899086906004016156a9565b600060405180830381865afa158015612dbe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612de69190810190615ab9565b905080600181518110612dfb57612dfb615a73565b6020026020010151945061271060175486612e169190615a54565b612e209190615a10565b935061271060185486612e339190615a54565b612e3d9190615a10565b9250612710612e4a614e6e565b612e549085615a54565b612e5e9190615a10565b9496939550505050565b601c546001600160a01b0316331480612e8b57506000546001600160a01b031633145b80612ea05750600e546001600160a01b031633145b612ebc5760405162461bcd60e51b815260040161138f906159a5565b612ec68282614f6d565b5050565b601c546001600160a01b0316331480612eed57506000546001600160a01b031633145b80612f025750600e546001600160a01b031633145b612f1e5760405162461bcd60e51b815260040161138f906159a5565b6017819055601954601854612710919061148f90846159df565b601c546001600160a01b0316331480612f5b57506000546001600160a01b031633145b80612f705750600e546001600160a01b031633145b612f8c5760405162461bcd60e51b815260040161138f906159a5565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b601c546001600160a01b0316331480612fd157506000546001600160a01b031633145b80612fe65750600e546001600160a01b031633145b6130025760405162461bcd60e51b815260040161138f906159a5565b6016805460ff1916911515919091179055565b601c546001600160a01b031633148061303857506000546001600160a01b031633145b8061304d5750600e546001600160a01b031633145b6130695760405162461bcd60e51b815260040161138f906159a5565b601280546001600160a01b039092166001600160a01b0319909216821790556000908152600760205260409020805460ff19166001179055565b601c546001600160a01b03163314806130c657506000546001600160a01b031633145b806130db5750600e546001600160a01b031633145b6130f75760405162461bcd60e51b815260040161138f906159a5565b601981905560185460175461271091839161148f91906159df565b6000806000600d60009054906101000a90046001600160a01b03169050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131949190615b61565b50600c54600a546001600160701b0393841695509190921692506001600160a01b03918216911610156131cc578194508093506131d3565b8094508193505b5050509091565b336000908152602f602052604090205460ff161561320a5760405162461bcd60e51b815260040161138f90615a32565b33321461324e5760405162461bcd60e51b815260206004820152601260248201527131b630b4b6a628103737ba1027b934b3b4b760711b604482015260640161138f565b33600090815260086020526040902060038101544290158015906132755750816003015481115b156132fb57600082600501548360030154836132919190615aa2565b84600401546132a09190615a54565b6132aa9190615a10565b905060008360020154846001015485600001546132c79190615aa2565b6132d19190615aa2565b9050808211156132df578091505b818460010160008282546132f391906159df565b909155505050505b600182015480156133a557600d5461331d906001600160a01b031633836142b8565b600083600101819055508083600201600082825461333b91906159df565b9091555050600c5460405163899d9c9d60e01b8152336004820152602481018390526001600160a01b039091169063899d9c9d90604401600060405180830381600087803b15801561338c57600080fd5b505af11580156133a0573d6000803e3d6000fd5b505050505b82600301548211156133b957600383018290555b600c60009054906101000a90046001600160a01b03166001600160a01b0316632e05661b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561340957600080fd5b505af115801561341d573d6000803e3d6000fd5b50505050505050565b60245460008190036134355750565b7f00000000000000000000000000000000000000000000000000000000000000004261346182846159df565b81101561346d57505050565b60008261347a8584615aa2565b6134849190615a10565b90506134908382615a54565b61349a90856159df565b6024556025546134ca827f0000000000000000000000000000000000000000000000000000000000000000615c8a565b826026546134d89190615c8a565b6134e29083615a54565b6134ec9190615a10565b6025555050505050565b601c546001600160a01b031633148061351957506000546001600160a01b031633145b8061352e5750600e546001600160a01b031633145b61354a5760405162461bcd60e51b815260040161138f906159a5565b602955565b336000908152602f602052604090205460ff161561357f5760405162461bcd60e51b815260040161138f90615a32565b3332146135bb5760405162461bcd60e51b815260206004820152600a6024820152693737ba1027b934b3b4b760b11b604482015260640161138f565b60165460ff16156135f65760405162461bcd60e51b8152602060048201526005602482015264706175736560d81b604482015260640161138f565b60125461360d9033906001600160a01b0316613e18565b600c54613625906001600160a01b031633308461451d565b600a546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a0823190602401602060405180830381865afa158015613672573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061369691906159f7565b60408051600280825260608201835292935060009290916020830190803683375050600c5482519293506001600160a01b0316918391506000906136dc576136dc615a73565b6001600160a01b039283166020918202929092010152600a5482519116908290600190811061370d5761370d615a73565b6001600160a01b039283166020918202929092010152600954604051635c11d79560e01b8152911690635c11d79590613753908790600090869030904290600401615c96565b600060405180830381600087803b15801561376d57600080fd5b505af1158015613781573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508491506001600160a01b038616906370a0823190602401602060405180830381865afa1580156137ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137f291906159f7565b6137fc9190615aa2565b90506000612710601754836138119190615a54565b61381b9190615a10565b600a54909150613835906001600160a01b031633836142b8565b6000612710601854846138489190615a54565b6138529190615a10565b90506138613382600080614649565b613869613ff1565b60007f00000000000000000000000000000000000000000000000000000000000000006025548361389a9190615a54565b6138a49190615a10565b90506138b2338260006140d4565b336000908152601b6020526040812080548392906138d19084906159df565b9091555050601954600090612710906138ea9087615a54565b6138f49190615a10565b600a54600e54919250613914916001600160a01b039182169116836142b8565b600e54604051632841a14360e01b8152600481018390526001600160a01b0390911690632841a14390602401600060405180830381600087803b15801561395a57600080fd5b505af115801561396e573d6000803e3d6000fd5b505050506000818486886139829190615aa2565b61398c9190615aa2565b6139969190615aa2565b600a54601c549192506139b6916001600160a01b039182169116836142b8565b600c60009054906101000a90046001600160a01b03166001600160a01b0316632e05661b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613a0657600080fd5b505af1158015613a1a573d6000803e3d6000fd5b50506040518792508c915033907fed7a144fad14804d5c249145e3e0e2b63a9eb455b76aee5bc92d711e9bba3e4a90600090a450505050505050505050565b601d602052816000526040600020818154811061234657600080fd5b601c546001600160a01b0316331480613a9857506000546001600160a01b031633145b80613aad5750600e546001600160a01b031633145b613ac95760405162461bcd60e51b815260040161138f906159a5565b6001600160a01b03919091166000908152602f60205260409020805460ff1916911515919091179055565b601c546001600160a01b0316331480613b1757506000546001600160a01b031633145b80613b2c5750600e546001600160a01b031633145b613b485760405162461bcd60e51b815260040161138f906159a5565b601254613b5f9083906001600160a01b0316613e18565b613b67613ff1565b612ec6828260006140d4565b6000806000806000600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bf291906159f7565b600d546040516370a0823160e01b81523060048201529196506001600160a01b0316906370a0823190602401602060405180830381865afa158015613c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5f91906159f7565b9350602b5492506028549150613c73614f3c565b90509091929394565b601c546001600160a01b0316331480613c9f57506000546001600160a01b031633145b80613cb45750600e546001600160a01b031633145b613cd05760405162461bcd60e51b815260040161138f906159a5565b612ec68282613e18565b613ce2614473565b6001600160a01b038116613d475760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161138f565b6114d7816144cd565b601c546001600160a01b0316331480613d7357506000546001600160a01b031633145b80613d885750600e546001600160a01b031633145b613da45760405162461bcd60e51b815260040161138f906159a5565b602454600003613db357426024555b6023805460ff19169055565b601c546001600160a01b0316331480613de257506000546001600160a01b031633145b80613df75750600e546001600160a01b031633145b613e135760405162461bcd60e51b815260040161138f906159a5565b602655565b6001600160a01b0382166000908152600760205260409020805460ff1661141b576001600160a01b038216600003613e7e5760405162461bcd60e51b81526020600482015260096024820152680696e7669746f7220360bc1b604482015260640161138f565b6001600160a01b03821660009081526007602052604090205460ff16613ed85760405162461bcd60e51b815260206004820152600f60248201526e696e7669746f72202141637469766560881b604482015260640161138f565b6001600160a01b038083166000818152601d60209081526040808320805460018181018355918552838520018054968a166001600160a01b03199788168117909155808552601e84528285208054881687179055600f84528285208054881687179055948452601083529083208054918201815583529082200180549093169091179091555b7f0000000000000000000000000000000000000000000000000000000000000000811015613fe0576001600160a01b0383166000908152601560205260408120805460019290613faf9084906159df565b90915550506001600160a01b039283166000908152600f6020526040902054909216918215613fe057600101613f5e565b50805460ff19166001178155505050565b613ff9613426565b600554600190429080821161400d57505050565b600483018290556002830154600584015480821061402c575050505050565b8454600386015481158015906140425750806000105b1561341d5760006140538688615aa2565b61405d9083615a54565b9050600061406b8686615aa2565b905080821115614079578091505b8361408c83670de0b6b3a7640000615a54565b6140969190615a10565b8960010160008282546140a991906159df565b92505081905550818960020160008282546140c491906159df565b9091555050505050505050505050565b6001600160a01b0383166000908152600760205260408120906140f89082906143ee565b600181015461410784826159df565b60018084018290555490915061411d85826159df565b600254909150670de0b6b3a76400006141368285615a54565b6141409190615a10565b600285015584156142ad577f00000000000000000000000000000000000000000000000000000000000000006000888180805b858110156142a6576001600160a01b038085166000908152600f602052604090205416925082156142a6576001600160a01b038316600090815260076020526040812095506141c39086906143ee565b600081815260116020526040812054612710906141e0908f615a54565b6141ea9190615a10565b6001600160a01b0385166000908152601360205260408120805492935083929091906142179084906159df565b90915550506001600160a01b038416600090815260146020526040812080548f92906142449084906159df565b90915550506001860154925061425a81846159df565b600187018190559250670de0b6b3a76400006142768985615a54565b6142809190615a10565b600287015561428f818a6159df565b9850839450508061429f90615a89565b9050614173565b5050505050505b506001555050505050565b806000036142c557505050565b6040516370a0823160e01b8152306004820152839082906001600160a01b038316906370a0823190602401602060405180830381865afa15801561430d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061433191906159f7565b10156143745760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b604482015260640161138f565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905282169063a9059cbb906044016020604051808303816000875af11580156143c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143e79190615cd2565b5050505050565b80156143fc576143fc613ff1565b600182015415612ec6576000670de0b6b3a7640000600180015484600101546144259190615a54565b61442f9190615a10565b905060008360020154826144439190615aa2565b9050801561280c578184600201819055508084600301600082825461446891906159df565b909155505050505050565b6000546001600160a01b03163314611ffc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161138f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516370a0823160e01b81526001600160a01b038481166004830152859183918316906370a0823190602401602060405180830381865afa158015614567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061458b91906159f7565b10156145ce5760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b604482015260640161138f565b6040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528216906323b872dd906064016020604051808303816000875af1158015614625573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b479190615cd2565b600c546040516370a0823160e01b81523060048201526001600160a01b0390911690819060009082906370a0823190602401602060405180830381865afa158015614698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146bc91906159f7565b600a546040805160028082526060820183529394506001600160a01b039092169260009291602083019080368337019050509050818160008151811061470457614704615a73565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061473857614738615a73565b6001600160a01b03928316602091820292909201015260095416635c11d79561476260028b615a10565b898430426040518663ffffffff1660e01b8152600401614786959493929190615c96565b600060405180830381600087803b1580156147a057600080fd5b505af11580156147b4573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508591506001600160a01b038716906370a0823190602401602060405180830381865afa158015614801573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061482591906159f7565b61482f9190615aa2565b905060008761484957601a546001600160a01b031661484b565b305b90506000600960009054906101000a90046001600160a01b03166001600160a01b031663e8e33700868a60028f6148829190615a10565b6040516001600160e01b031960e086901b1681526001600160a01b039384166004820152918316602483015260448201526064810187905260006084820181905260a482015290851660c48201524260e4820152610104016060604051808303816000875af11580156148f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061491d9190615cef565b925050508815614936576149318c8261501e565b612cd7565b600c5460405163899d9c9d60e01b81526001600160a01b038481166004830152602482018490529091169063899d9c9d90604401600060405180830381600087803b15801561498457600080fd5b505af1158015614998573d6000803e3d6000fd5b50505050505050505050505050505050565b6001600160a01b0382811660008181526022602052604080822054600e5491516370a0823160e01b815260048101949094529391929116906370a0823190602401602060405180830381865afa158015614a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a2c91906159f7565b90506000614a3a8385611b4f565b9050600083118015614a4c5750600082115b15614a6b57614a5b8582615138565b614a6685848661521c565b6143e7565b6001600160a01b038086166000908152601e6020526040812054909116905b6001600160a01b03821615801590614aa0575080155b1561341d576001600160a01b0382811660008181526022602052604080822054600e5491516370a0823160e01b815260048101949094529391929116906370a0823190602401602060405180830381865afa158015614b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b2791906159f7565b9050600082118015614b395750600081115b15614b635760019250614b4c8289611b4f565b9450614b588486615138565b614b6384838a61521c565b6001600160a01b038085166000818152601e60205260409020549091169003614b8f5760009350614bae565b6001600160a01b039384166000908152601e6020526040902054909316925b5050614a8a565b6001600160a01b038216600090815260208052604081208054859290614bdc9084906159df565b909155508190505b6001600160a01b0381161561280c576001600160a01b0381166000908152601f602052604081208054869290614c1b9084906159df565b90915550614c2a905081612691565b6001600160a01b038082166000818152601e60205260409020549091169003614c51575060005b6001600160a01b039081166000908152601e602052604090205416614be4565b6001600160a01b0384166000908152601d6020908152604080832080548251818502810185019093528083528493830182828015614cd857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614cba575b50505050509050848360058110614cf157614cf1615a73565b60200201518410614e60576000805b6001600160a01b0388166000908152601d6020526040902054811015614e5d5784600003614de7577f000000000000000000000000000000000000000000000000000000000000000060206000858481518110614d5f57614d5f615a73565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054601f6000868581518110614d9e57614d9e615a73565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054614dd191906159df565b10614de257614ddf82615a89565b91505b614e39565b600160226000858481518110614dff57614dff615a73565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205410614e3957614e3682615a89565b91505b60028210614e4d5760019350505050614e66565b614e5681615a89565b9050614d00565b50505b60009150505b949350505050565b60255460245460009190808303614e855750919050565b7f000000000000000000000000000000000000000000000000000000000000000042614eb182846159df565b811015614ec15750919392505050565b600082614ece8584615aa2565b614ed89190615a10565b60265490915060005b82811015614f30577f0000000000000000000000000000000000000000000000000000000000000000614f148389615a54565b614f1e9190615a10565b9650614f2981615a89565b9050614ee1565b50949695505050505050565b6000806000614f49613112565b915091508181602854614f5c9190615a54565b614f669190615a10565b9250505090565b604080516000808252602082019092526001600160a01b038416908390604051614f979190615d1d565b60006040518083038185875af1925050503d8060008114614fd4576040519150601f19603f3d011682016040523d82523d6000602084013e614fd9565b606091505b505090508061141b5760405162461bcd60e51b8152602060048201526011602482015270195d1a081d1c985b9cd9995c8819985a5b607a1b604482015260640161138f565b6001600160a01b0382166000908152600860205260409020600381015442811580159061504a57508181115b156150cb5760058301546000906150618484615aa2565b85600401546150709190615a54565b61507a9190615a10565b905060008460020154856001015486600001546150979190615aa2565b6150a19190615aa2565b9050808211156150af578091505b818560010160008282546150c391906159df565b909155505050505b600283015460018401548454600092916150e491615aa2565b6150ee9190615aa2565b90508484600001600082825461510491906159df565b90915550615114905085826159df565b6004850155602754600585015582821115611b475760038401829055505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000602554836151699190615a54565b6151739190615a10565b9050615181838260006140d4565b6001600160a01b0383166000818152602260205260408082205490519092849284927fb6e5be43155b74262b7be6ccc5012bb6df33759145b8a6d4bc9f3e98c6d87b489190a4600a546151de906001600160a01b031685856142b8565b8281856001600160a01b03167f449ba527ea8f6ec8dc6af63b425e187506ac5b1635308d35ba1fe32da2b0d2e360405160405180910390a450505050565b6001600160a01b038084166000908152601e60205260408120549091169083906152478260016159df565b90505b6001600160a01b03831615801590615263575060058211155b15611b47576001600160a01b0383166000908152602260205260408120549061528c8287611b4f565b90508382118061529b57508282145b156152c1576152aa8582615138565b8193508160016152ba91906159df565b92506152e0565b8382036152e0576152d28582615332565b6152dd8260016159df565b93505b6001600160a01b038086166000818152601e6020526040902054909116900361530c576000945061532b565b6001600160a01b039485166000908152601e6020526040902054909416935b505061524a565b60007f0000000000000000000000000000000000000000000000000000000000000000602554836153639190615a54565b61536d9190615a10565b90506000606461537e836014615a54565b6153889190615a10565b9050615396848260006140d4565b6001600160a01b0384166000818152602260205260408082205490519092849284927fb6e5be43155b74262b7be6ccc5012bb6df33759145b8a6d4bc9f3e98c6d87b489190a4600060646153eb866014615a54565b6153f59190615a10565b600a5490915061540f906001600160a01b031687836142b8565b8082876001600160a01b03167f449ba527ea8f6ec8dc6af63b425e187506ac5b1635308d35ba1fe32da2b0d2e360405160405180910390a4505050505050565b60006020828403121561546157600080fd5b5035919050565b80356001600160a01b038116811461547f57600080fd5b919050565b80151581146114d757600080fd5b6000806000606084860312156154a757600080fd5b6154b084615468565b92506020840135915060408401356154c781615484565b809150509250925092565b6000602082840312156154e457600080fd5b611b8182615468565b60008060006060848603121561550257600080fd5b61550b84615468565b925061551960208501615468565b9150604084013590509250925092565b6000806040838503121561553c57600080fd5b61554583615468565b946020939093013593505050565b600080600080600080600060e0888a03121561556e57600080fd5b61557788615468565b965061558560208901615468565b955061559360408901615468565b94506155a160608901615468565b93506155af60808901615468565b92506155bd60a08901615468565b91506155cb60c08901615468565b905092959891949750929550565b600080604083850312156155ec57600080fd5b50508035926020909101359150565b6000806040838503121561560e57600080fd5b61561783615468565b9150602083013561562781615484565b809150509250929050565b60008060006060848603121561564757600080fd5b61565084615468565b95602085013595506040909401359392505050565b600081518084526020808501945080840160005b8381101561569e5781516001600160a01b031687529582019590820190600101615679565b509495945050505050565b828152604060208201526000614e666040830184615665565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156156fb576156fb6156c2565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561572a5761572a6156c2565b604052919050565b600067ffffffffffffffff82111561574c5761574c6156c2565b5060051b60200190565b600082601f83011261576757600080fd5b8135602061577c61577783615732565b615701565b82815260079290921b8401810191818101908684111561579b57600080fd5b8286015b848110156157f757608081890312156157b85760008081fd5b6157c06156d8565b81356157cb81615484565b81528185013585820152604080830135908201526060808301359082015283529183019160800161579f565b509695505050505050565b6000806040838503121561581557600080fd5b823567ffffffffffffffff8082111561582d57600080fd5b818501915085601f83011261584157600080fd5b8135602061585161577783615732565b82815260059290921b8401810191818101908984111561587057600080fd5b948201945b838610156158955761588686615468565b82529482019490820190615875565b965050860135925050808211156158ab57600080fd5b506158b885828601615756565b9150509250929050565b6040815260006158d56040830185615665565b82810360208481019190915284518083528582019282019060005b8181101561590c578451835293830193918301916001016158f0565b5090979650505050505050565b60008060006060848603121561592e57600080fd5b833592506020840135915061594560408501615468565b90509250925092565b60006020828403121561596057600080fd5b813561596b81615484565b9392505050565b6000806040838503121561598557600080fd5b61598e83615468565b915061599c60208401615468565b90509250929050565b6020808252600a90820152696f6e6c7920776869746560b01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156159f2576159f26159c9565b500190565b600060208284031215615a0957600080fd5b5051919050565b600082615a2d57634e487b7160e01b600052601260045260246000fd5b500490565b602080825260089082015267696e20626c61636b60c01b604082015260600190565b6000816000190483118215151615615a6e57615a6e6159c9565b500290565b634e487b7160e01b600052603260045260246000fd5b600060018201615a9b57615a9b6159c9565b5060010190565b600082821015615ab457615ab46159c9565b500390565b60006020808385031215615acc57600080fd5b825167ffffffffffffffff811115615ae357600080fd5b8301601f81018513615af457600080fd5b8051615b0261577782615732565b81815260059190911b82018301908381019087831115615b2157600080fd5b928401925b82841015615b3f57835182529284019290840190615b26565b979650505050505050565b80516001600160701b038116811461547f57600080fd5b600080600060608486031215615b7657600080fd5b615b7f84615b4a565b9250615b8d60208501615b4a565b9150604084015163ffffffff811681146154c757600080fd5b600181815b80851115615be1578160001904821115615bc757615bc76159c9565b80851615615bd457918102915b93841c9390800290615bab565b509250929050565b600082615bf857506001611b84565b81615c0557506000611b84565b8160018114615c1b5760028114615c2557615c41565b6001915050611b84565b60ff841115615c3657615c366159c9565b50506001821b611b84565b5060208310610133831016604e8410600b8410161715615c64575081810a611b84565b615c6e8383615ba6565b8060001904821115615c8257615c826159c9565b029392505050565b6000611b818383615be9565b85815284602082015260a060408201526000615cb560a0830186615665565b6001600160a01b0394909416606083015250608001529392505050565b600060208284031215615ce457600080fd5b815161596b81615484565b600080600060608486031215615d0457600080fd5b8351925060208401519150604084015190509250925092565b6000825160005b81811015615d3e5760208186018101518583015201615d24565b81811115615d4d576000828501525b50919091019291505056fea264697066735822122046dac22953891dc8bdcddcf6b508181976050a9c96fe8f5ff9187f6ed4f31aaa64736f6c634300080f0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5350,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 164,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 167,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10418,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "poolInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(PoolInfo)10400_storage"
      },
      {
        "astId": 10423,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "userInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(UserInfo)10387_storage)"
      },
      {
        "astId": 10428,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_userLPInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UserLPInfo)10415_storage)"
      },
      {
        "astId": 10431,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_swapRouter",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ISwapRouter)14512"
      },
      {
        "astId": 10433,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_usdt",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 10435,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_minAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 10437,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_mintRewardToken",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 10439,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lp",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 10442,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_nft",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(INFT)14403"
      },
      {
        "astId": 10446,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_invitor",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 10451,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_binder",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 10455,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_inviteFee",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10460,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_defaultInvitor",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 10464,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_inviteAmount",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10468,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_teamAmount",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10472,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_teamNum",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10474,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_pauseSell",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 10476,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellSelfRate",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 10478,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellJoinRate",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 10480,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellNFTRate",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 10482,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellLPReceiver",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 10486,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellJoinAmount",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10488,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_fundAddress",
        "offset": 0,
        "slot": "28",
        "type": "t_address"
      },
      {
        "astId": 10493,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "referrals",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 10497,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "superAccount",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 10501,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "referralAmount",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10505,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "depositAmount",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10509,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "referralReward",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10513,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "userLevel",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10530,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_pauseJoin",
        "offset": 0,
        "slot": "35",
        "type": "t_bool"
      },
      {
        "astId": 10532,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lastDailyUpTime",
        "offset": 0,
        "slot": "36",
        "type": "t_uint256"
      },
      {
        "astId": 10534,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lastAmountRate",
        "offset": 0,
        "slot": "37",
        "type": "t_uint256"
      },
      {
        "astId": 10536,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_amountDailyUp",
        "offset": 0,
        "slot": "38",
        "type": "t_uint256"
      },
      {
        "astId": 10544,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lpReleaseDuration",
        "offset": 0,
        "slot": "39",
        "type": "t_uint256"
      },
      {
        "astId": 10546,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_speedUpCost",
        "offset": 0,
        "slot": "40",
        "type": "t_uint256"
      },
      {
        "astId": 10548,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_speedUpDuration",
        "offset": 0,
        "slot": "41",
        "type": "t_uint256"
      },
      {
        "astId": 10550,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_speedUpReceiver",
        "offset": 0,
        "slot": "42",
        "type": "t_address"
      },
      {
        "astId": 10552,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_speedUpMaxTime",
        "offset": 0,
        "slot": "43",
        "type": "t_uint256"
      },
      {
        "astId": 10554,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_totalUsdt",
        "offset": 0,
        "slot": "44",
        "type": "t_uint256"
      },
      {
        "astId": 10558,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_inProject",
        "offset": 0,
        "slot": "45",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10560,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lastDailyReward",
        "offset": 0,
        "slot": "46",
        "type": "t_uint256"
      },
      {
        "astId": 10564,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "blacklist",
        "offset": 0,
        "slot": "47",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INFT)14403": {
        "encoding": "inplace",
        "label": "contract INFT",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)14512": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)10387_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MintPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)10387_storage"
      },
      "t_mapping(t_address,t_struct(UserLPInfo)10415_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MintPool.UserLPInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserLPInfo)10415_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoolInfo)10400_storage": {
        "encoding": "inplace",
        "label": "struct MintPool.PoolInfo",
        "members": [
          {
            "astId": 10389,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10391,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "accMintPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10393,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "accMintReward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10395,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "mintPerSec",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10397,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "lastMintTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10399,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "totalMintReward",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserInfo)10387_storage": {
        "encoding": "inplace",
        "label": "struct MintPool.UserInfo",
        "members": [
          {
            "astId": 10380,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10382,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10384,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "rewardMintDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10386,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "calMintReward",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserLPInfo)10415_storage": {
        "encoding": "inplace",
        "label": "struct MintPool.UserLPInfo",
        "members": [
          {
            "astId": 10402,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "lockAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10404,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "calAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10406,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10408,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "lastReleaseTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10410,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "releaseInitAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10412,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "releaseDuration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10414,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "speedUpTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}