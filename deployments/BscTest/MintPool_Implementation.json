{
  "address": "0x4D2134A373137Fa52f4192B310426eCc852C3eE7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "selfAmount",
          "type": "uint256"
        }
      ],
      "name": "Sell",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "powerAmount",
          "type": "uint256"
        }
      ],
      "name": "nftPowerReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "nftTokenReward",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_amountDailyUp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_binder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_fundAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rUsdt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_inProject",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_inviteFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_invitor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lastAmountRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lastDailyUpTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lpReleaseDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_nft",
      "outputs": [
        {
          "internalType": "contract INFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_pauseSell",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellJoinRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellLPReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellNFTRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellSelfRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_speedUpDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_speedUpReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_userLPInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastReleaseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseInitAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedUpTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "addTotalMintReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "calInvite",
          "type": "bool"
        }
      ],
      "name": "addUserAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardMintDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "calMintReward",
              "type": "uint256"
            }
          ],
          "internalType": "struct MintPool.UserInfo[]",
          "name": "userInfos",
          "type": "tuple[]"
        }
      ],
      "name": "batchInsertUserInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "invitor",
          "type": "address"
        }
      ],
      "name": "bindInvitor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userRewardLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateNFTReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "invitor",
          "type": "address"
        }
      ],
      "name": "checkForLevelUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "invitor",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "usdt",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "usdtDecimals",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "mintRewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintRewardTokenDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalUsdt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDailyReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dailyAmountRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "defaultInvitor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "pauseJoin",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBinderLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "getBinderList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnCount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "binders",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getDirectList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "binders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "teamAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdtAmount",
          "type": "uint256"
        }
      ],
      "name": "getJoinTokenAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLPInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalLP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockLP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedUpMaxTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedCostUsdt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedCostToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPendingMintReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "getSellUsdtOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "selfUsdt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdtBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdtAllowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingMintReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inviteAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellJoinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "teamNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "teamAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserLPInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastReleaseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseInitAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedUpTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAllowance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserNFTLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usdt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mintRewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "defaultInvitor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accMintPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accMintReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPerSec",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastMintTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMintReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "sell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setAmountDailyUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setDefaultInvitor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setFundAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setInProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setInviteFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "name": "setLPReleaseDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setLastAmountRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "setLastDailyUpTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintPerSec",
          "type": "uint256"
        }
      ],
      "name": "setMintPerSec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        }
      ],
      "name": "setNFTAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "p",
          "type": "bool"
        }
      ],
      "name": "setPauseSell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setSeedUpReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setSellJoinRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setSellLPReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setSellNFTRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setSellSelfRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "c",
          "type": "uint256"
        }
      ],
      "name": "setSpeedUpCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "name": "setSpeedUpDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mt",
          "type": "uint256"
        }
      ],
      "name": "setSpeedUpMaxTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "setUserLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "speedUpLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "superAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateDailyUpRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardMintDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calMintReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v1Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v2Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v3Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v4Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v5Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4af1c5fdeffa1beb7c6f92edbea52da9011cf23851a31f733dce4dd91f67223f",
  "receipt": {
    "to": null,
    "from": "0x289F8F063c4304F432bb96DD31e82bdCc5CcE142",
    "contractAddress": "0x4D2134A373137Fa52f4192B310426eCc852C3eE7",
    "transactionIndex": 3,
    "gasUsed": "5272596",
    "logsBloom": "0x
    "blockHash": "0x539fe46fa4b0dc88c01fa0c7dad23b02cce3457aa50d9736e8e61e4136d81e4e",
    "transactionHash": "0x4af1c5fdeffa1beb7c6f92edbea52da9011cf23851a31f733dce4dd91f67223f",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 36261227,
        "transactionHash": "0x4af1c5fdeffa1beb7c6f92edbea52da9011cf23851a31f733dce4dd91f67223f",
        "address": "0x4D2134A373137Fa52f4192B310426eCc852C3eE7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000289f8f063c4304f432bb96dd31e82bdcc5cce142"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x539fe46fa4b0dc88c01fa0c7dad23b02cce3457aa50d9736e8e61e4136d81e4e"
      }
    ],
    "blockNumber": 36261227,
    "cumulativeGasUsed": "5335596",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3169eb5d82630f70452436637f2412fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"selfAmount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"powerAmount\",\"type\":\"uint256\"}],\"name\":\"nftPowerReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"nftTokenReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_amountDailyUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_binder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inProject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_inviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_invitor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastAmountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastDailyUpTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpReleaseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nft\",\"outputs\":[{\"internalType\":\"contract INFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pauseSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellJoinRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellNFTRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellSelfRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_speedUpDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_speedUpReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userLPInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseInitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedUpTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"addTotalMintReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"calInvite\",\"type\":\"bool\"}],\"name\":\"addUserAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardMintDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calMintReward\",\"type\":\"uint256\"}],\"internalType\":\"struct MintPool.UserInfo[]\",\"name\":\"userInfos\",\"type\":\"tuple[]\"}],\"name\":\"batchInsertUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"bindInvitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userRewardLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateNFTReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"checkForLevelUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdtDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mintRewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintRewardTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDailyReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyAmountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"defaultInvitor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"pauseJoin\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBinderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getBinderList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"binders\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDirectList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"binders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"teamAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"getJoinTokenAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedUpMaxTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedCostUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedCostToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPendingMintReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getSellUsdtOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingMintReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellJoinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserLPInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseInitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedUpTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserNFTLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintRewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultInvitor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMintPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMintReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMintTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMintReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setAmountDailyUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setDefaultInvitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setInProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setInviteFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setLPReleaseDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setLastAmountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setLastDailyUpTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPerSec\",\"type\":\"uint256\"}],\"name\":\"setMintPerSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"p\",\"type\":\"bool\"}],\"name\":\"setPauseSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setSeedUpReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setSellJoinRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setSellLPReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setSellNFTRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setSellSelfRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setSpeedUpCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setSpeedUpDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mt\",\"type\":\"uint256\"}],\"name\":\"setSpeedUpMaxTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setUserLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokenAmount\",\"type\":\"uint256\"}],\"name\":\"speedUpLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"superAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDailyUpRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardMintDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calMintReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v3Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v4Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v5Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintPool.sol\":\"MintPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/MintPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport \\\"./interface/INFT.sol\\\";\\nimport \\\"./interface/ISwapRouter.sol\\\";\\nimport \\\"./interface/ISwapFactory.sol\\\";\\nimport \\\"./interface/ISwapPair.sol\\\";\\nimport \\\"./interface/IToken.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\ncontract MintPool is Ownable, Initializable {\\n    struct UserInfo {\\n        bool isActive;  //\\u542f\\u52a8\\u6807\\u8bb0\\n        uint256 amount; //\\u5df2\\u5b58\\n        uint256 rewardMintDebt; //\\u70b9\\u6bd4\\n        uint256 calMintReward;  //\\u5f85\\u9886\\u53d6\\n    }\\n\\n    struct PoolInfo {\\n        uint256 totalAmount;\\n        uint256 accMintPerShare;\\n        uint256 accMintReward;\\n        uint256 mintPerSec;\\n        uint256 lastMintTime;\\n        uint256 totalMintReward;\\n    }\\n\\n    struct UserLPInfo {\\n        uint256 lockAmount;\\n        uint256 calAmount;\\n        uint256 claimedAmount;\\n        uint256 lastReleaseTime;\\n        uint256 releaseInitAmount;\\n        uint256 releaseDuration;\\n        uint256 speedUpTime;\\n    }\\n\\n    PoolInfo public poolInfo;\\n    mapping(address => UserInfo) public userInfo;\\n    mapping(address => UserLPInfo) public _userLPInfo;\\n\\n    ISwapRouter private _swapRouter;\\n    address private _usdt;             //cusd\\n    uint256 private _minAmount;\\n    address private _mintRewardToken;  //bos\\n    address public  _lp;\\n    INFT public _nft;\\n\\n    mapping(address => address) public _invitor; //\\u8981\\u8bf7\\u5173\\u7cfb \\u6211\\u7684\\u4e0a\\u7ea7\\n    mapping(address => address[]) public _binder; //\\u6211\\u9080\\u8bf7\\u7684\\u5217\\u8868\\n    mapping(uint256 => uint256) public _inviteFee;\\n    uint256 private immutable _inviteLen = 3;\\n    address private _defaultInvitor;\\n\\n    mapping(address => uint256) private _inviteAmount;\\n    mapping(address => uint256) private _teamAmount;\\n    mapping(address => uint256) private _teamNum;  //\\u8981\\u8bf7\\u7684\\u4eba\\u6570\\n\\n    bool public _pauseSell;\\n    uint256 public _sellSelfRate;\\n    uint256 public _sellJoinRate;\\n    uint256 public _sellNFTRate;\\n    address public _sellLPReceiver;\\n    mapping(address => uint256) private _sellJoinAmount;\\n    address public _fundAddress;\\n\\n    //NFT reward\\n    mapping(address => address[]) public referrals;  //\\u8981\\u8bf7\\u7684\\u4eba\\n    mapping(address => address) public superAccount; //\\u4e0a\\u7ea7\\n    mapping(address => uint256) public referralAmount;  // \\u8981\\u8bf7\\u7684\\u5165\\u91d1\\u6570\\u91cf\\n    mapping(address => uint256) public depositAmount;   // \\u5165\\u91d1\\u6570\\u91cf\\n    mapping(address => uint256) public referralReward;  // \\u8981\\u8bf7\\u5956\\u52b1\\u6570\\u91cf\\n    mapping(address => uint256) public userLevel;   //\\u7528\\u6237\\u7b49\\u7ea7\\n\\n    uint256 public immutable v1Amount = 2500 ether;\\n    uint256 public immutable v2Amount = 20000 ether;\\n    uint256 public immutable v3Amount = 50000 ether;\\n    uint256 public immutable v4Amount = 150000 ether;\\n    uint256 public immutable v5Amount = 500000 ether;\\n\\n    bool private _pauseJoin;\\n    uint256 public _lastDailyUpTime;\\n    uint256 public _lastAmountRate;\\n    uint256 public _amountDailyUp;\\n    uint256 private immutable _divFactor = 10000;\\n    uint256 private immutable _dailyDuration = 1 days;\\n\\n    uint256 public _lpReleaseDuration;\\n    //\\n    uint256 private _speedUpCost;\\n    uint256 public _speedUpDuration;\\n    address public _speedUpReceiver;\\n    uint256 private _speedUpMaxTime;\\n    uint256 private _totalUsdt;  //\\u603b\\u8d28\\u62bcusdt\\n\\n    mapping(address => bool) public _inProject;\\n    uint256 private _lastDailyReward;\\n\\n\\n    event nftTokenReward(address indexed account, uint256 indexed level, uint256 indexed tokenAmount);\\n    event nftPowerReward(address indexed account, uint256 indexed level, uint256 indexed powerAmount);\\n    event Deposit(address indexed account, uint256 indexed amount);\\n    event Sell(address indexed account, uint256 indexed tokenAmount, uint256 indexed selfAmount);\\n\\n\\n    // ******** modifier *********\\n\\n    modifier onlyWhiteList() {\\n        require(\\n            msg.sender == _fundAddress ||\\n            msg.sender == owner() ||\\n            msg.sender == address(_nft),\\n            \\\"only white list\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyInProject() {\\n        require(_inProject[msg.sender], \\\"onley project\\\");\\n        _;\\n    }\\n\\n\\n    // ******** constructor *********\\n    function initialize(\\n        address swapRouter,\\n        address usdt,\\n        address mintRewardToken,\\n        address nft,\\n        address defaultInvitor,\\n        address fundAddress,\\n        address _owner\\n    ) external initializer {\\n        _pauseJoin = true;\\n        _swapRouter = ISwapRouter(swapRouter);\\n        _usdt = usdt;\\n        _minAmount = 100 ether;\\n        _nft = INFT(nft);\\n        _mintRewardToken = mintRewardToken;\\n\\n        // \\u83b7\\u53d6\\u4ee3\\u5e01\\u5730\\u5740\\u5e76\\u5b58\\u50a8\\n        _lp = ISwapFactory(_swapRouter.factory()).getPair(usdt, mintRewardToken);\\n\\n        // \\u8bbe\\u7f6e\\u521d\\u59cb\\u503c\\n        poolInfo.lastMintTime = block.timestamp;\\n        _defaultInvitor = defaultInvitor;\\n        userInfo[defaultInvitor].isActive = true;\\n\\n        // \\u8bbe\\u7f6e\\u9080\\u8bf7\\u8d39\\u7387\\n        _inviteFee[0] = 800;\\n        // 8%\\n        _inviteFee[1] = 500;\\n        // 5%\\n        _inviteFee[2] = 300;\\n        // 3%\\n\\n        // \\u8bbe\\u7f6e\\u5176\\u4ed6\\u53c2\\u6570\\n        _speedUpCost = 300 ether;\\n\\n        safeApprove(usdt, swapRouter, ~uint256(0));\\n        safeApprove(mintRewardToken, swapRouter, ~uint256(0));\\n        _sellLPReceiver = fundAddress;\\n        _fundAddress = fundAddress;\\n        _speedUpMaxTime = 3;\\n        _speedUpReceiver = 0x000000000000000000000000000000000000dEaD;\\n\\n        // \\u8bbe\\u7f6e\\u5356\\u51fa\\u6bd4\\u7387\\n        _sellSelfRate = 5000;\\n        _sellJoinRate = 4000;\\n        _sellNFTRate = 500;\\n\\n        // \\u8bbe\\u7f6e\\u5b58\\u6b3e\\u76f8\\u5173\\u53c2\\u6570\\n        _lastAmountRate = 10000;\\n        _amountDailyUp = 10100;\\n        _lpReleaseDuration = 90 days;\\n        _speedUpDuration = 10 days;\\n\\n        _transferOwnership(_owner);\\n    }\\n\\n    receive() external payable {}\\n\\n\\n    // ******** public *********\\n    function sell(uint256 tokenAmount) public {\\n        require(msg.sender == tx.origin, \\\"not Origin\\\");\\n        require(!_pauseSell, \\\"pause\\\");\\n\\n        _bindInvitor(msg.sender, _defaultInvitor);\\n        _takeToken(_mintRewardToken, msg.sender, address(this), tokenAmount);\\n\\n        IERC20 USDT = IERC20(_usdt);\\n        uint256 usdtBalanceBefore = USDT.balanceOf(address(this));\\n\\n        address[] memory path = new address[](2);\\n        path[0] = _mintRewardToken;\\n        path[1] = _usdt;\\n\\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 usdtAmount = USDT.balanceOf(address(this)) - usdtBalanceBefore;\\n        uint256 selfUsdt = (usdtAmount * _sellSelfRate) / 10000;\\n        _giveToken(_usdt, msg.sender, selfUsdt);\\n\\n        uint256 sellJoinUsdt = (usdtAmount * _sellJoinRate) / 10000;\\n        addLP(msg.sender, sellJoinUsdt, 0, false);\\n\\n        _updatePool();\\n        uint256 sellJoinAmount = (sellJoinUsdt * _lastAmountRate) / _divFactor;\\n        _addUserAmount(msg.sender, sellJoinAmount, false);\\n        _sellJoinAmount[msg.sender] += sellJoinAmount;\\n\\n        uint256 nftUsdt = (usdtAmount * _sellNFTRate) / 10000;\\n        _giveToken(_usdt, address(_nft), nftUsdt);\\n        _nft.addTokenReward(nftUsdt);\\n\\n        uint256 fundUsdt = usdtAmount - selfUsdt - sellJoinUsdt - nftUsdt;\\n        _giveToken(_usdt, _fundAddress, fundUsdt);\\n\\n        IToken(_mintRewardToken).giveMintReward();\\n\\n        emit Sell(msg.sender, tokenAmount,selfUsdt);\\n    }\\n\\n\\n    function deposit(uint256 amount, uint256 minTokenAmount, address invitor) external {\\n        require(!_pauseJoin, \\\"deposit pause\\\");\\n        require(amount >= _minAmount, \\\"deposit too low\\\");\\n\\n        address account = msg.sender;\\n        require(account == msg.sender, \\\"deposit not origin\\\");\\n\\n        _totalUsdt += amount;\\n\\n        // \\u7ed1\\u5b9a\\u9080\\u8bf7\\u5173\\u7cfb\\uff0c\\u7edf\\u8ba1\\u4e0a\\u4e09\\u5c42\\u4eba\\u6570\\n        _bindInvitor(account, invitor);\\n\\n        // \\u8f6c\\u79fb\\u4ee3\\u5e01\\n        _takeToken(_usdt, account, address(this), amount);\\n\\n        // \\u6dfb\\u52a0\\u6d41\\u52a8\\u6027\\n        addLP(account, amount, minTokenAmount, true);\\n\\n        // \\u66f4\\u65b0\\u5b58\\u6b3e\\u6c60\\n        _updatePool();\\n\\n        // \\u8c03\\u6574\\u7528\\u6237\\u5b58\\u6b3e\\u91d1\\u989d\\n        _addUserAmount(account, (amount * _lastAmountRate) / _divFactor, true);\\n\\n        // \\u8c03\\u7528\\u5956\\u52b1\\u5408\\u7ea6\\u7684\\u53d1\\u653e\\u5956\\u52b1\\u51fd\\u6570\\n        IToken(_mintRewardToken).giveMintReward();\\n\\n        // \\u5206\\u53d1 NFT \\u5956\\u52b1\\n        distributeNFTRewards(invitor, amount);\\n\\n        // \\u6dfb\\u52a0\\u63a8\\u8350\\u5173\\u7cfb \\u5956\\u52b1\\n        addReferral(amount, account, invitor);\\n\\n        emit Deposit(account, amount);\\n    }\\n\\n\\n    function claim() public {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        // \\u8ba1\\u7b97\\u5e76\\u9886\\u53d6\\u5956\\u52b1\\n        _calReward(user, true);\\n        uint256 pendingMint = user.calMintReward;\\n\\n        if (pendingMint > 0) {\\n            // \\u7ed9\\u4e88\\u7528\\u6237\\u4ee3\\u5e01\\u5956\\u52b1\\n            _giveToken(_mintRewardToken, msg.sender, pendingMint);\\n            user.calMintReward = 0;\\n        }\\n\\n        // \\u89e6\\u53d1\\u5168\\u5c40\\u7684\\u4ee3\\u5e01\\u5956\\u52b1\\n        IToken(_mintRewardToken).giveMintReward();\\n    }\\n\\n\\n    function claimLP() public {\\n        require(msg.sender == tx.origin, \\\"claimLP not Origin\\\");\\n\\n        UserLPInfo storage userLPInfo = _userLPInfo[msg.sender];\\n        uint256 nowTime = block.timestamp;\\n\\n        if (userLPInfo.lastReleaseTime > 0 && nowTime > userLPInfo.lastReleaseTime) {\\n            uint256 releaseAmount = (userLPInfo.releaseInitAmount * (nowTime - userLPInfo.lastReleaseTime)) / userLPInfo.releaseDuration;\\n            uint256 maxAmount = userLPInfo.lockAmount - userLPInfo.calAmount - userLPInfo.claimedAmount;\\n            if (releaseAmount > maxAmount) {\\n                releaseAmount = maxAmount;\\n            }\\n            userLPInfo.calAmount += releaseAmount;\\n        }\\n\\n        uint256 calAmount = userLPInfo.calAmount;\\n\\n        if (calAmount > 0) {\\n            _giveToken(_lp, msg.sender, calAmount);\\n            userLPInfo.calAmount = 0;\\n            userLPInfo.claimedAmount += calAmount;\\n            IToken(_mintRewardToken).addUserLPAmount(msg.sender, calAmount);\\n        }\\n\\n        if (nowTime > userLPInfo.lastReleaseTime) {\\n            userLPInfo.lastReleaseTime = nowTime;\\n        }\\n\\n        IToken(_mintRewardToken).giveMintReward();\\n    }\\n\\n\\n    function checkForLevelUp(address invitor) public {\\n        if (referrals[invitor].length > 1) {\\n            uint256 totalReferralAmount = referralAmount[invitor] + depositAmount[invitor];\\n            uint256 currentLevel = userLevel[invitor];\\n            uint256[5] memory amountCheckArray = [v1Amount * 2, v2Amount, v3Amount, v4Amount, v5Amount];\\n            if (checkLevelCount(invitor, amountCheckArray, totalReferralAmount, currentLevel) && currentLevel < 5) {\\n                userLevel[invitor] = currentLevel + 1;\\n            }\\n        }\\n    }\\n\\n    function getPendingMintReward(address account) public view returns (uint256 reward) {\\n        PoolInfo storage pool = poolInfo;\\n        UserInfo storage user = userInfo[account];\\n\\n        if (user.amount > 0) {\\n            uint256 blockTime = block.timestamp;\\n            uint256 lastRewardTime = pool.lastMintTime;\\n\\n            if (blockTime > lastRewardTime) {\\n                uint256 poolPendingReward = pool.mintPerSec * (blockTime - lastRewardTime);\\n                uint256 totalReward = pool.totalMintReward;\\n                uint256 accReward = pool.accMintReward;\\n                uint256 remainReward = (totalReward > accReward) ? (totalReward - accReward) : 0;\\n\\n                poolPendingReward = (poolPendingReward > remainReward) ? remainReward : poolPendingReward;\\n\\n                reward = (user.amount * (pool.accMintPerShare + (poolPendingReward * 1e18) / pool.totalAmount)) / 1e18 - user.rewardMintDebt;\\n            }\\n        }\\n\\n        return reward;\\n    }\\n\\n\\n    //\\u6bcf\\u5929\\u66f4\\u65b0\\u4e00\\u6b21, \\u6bcf\\u6b21\\u589e\\u52a0\\u767e\\u5206\\u4e4b\\u4e00\\n    function updateDailyUpRate() public {\\n        uint256 lastDailyUpTime = _lastDailyUpTime;\\n        if (0 == lastDailyUpTime) {\\n            return;\\n        }\\n        uint256 dailyDuration = _dailyDuration;\\n        uint256 nowTime = block.timestamp;\\n        if (nowTime < lastDailyUpTime + dailyDuration) {\\n            return;\\n        }\\n        uint256 ds = (nowTime - lastDailyUpTime) / dailyDuration;\\n        _lastDailyUpTime = lastDailyUpTime + ds * dailyDuration;\\n\\n        uint256 lastAmountRate = _lastAmountRate;\\n        lastAmountRate = (lastAmountRate * _amountDailyUp ** ds) / _divFactor ** ds;\\n        _lastAmountRate = lastAmountRate;\\n    }\\n\\n    function speedUpLP(uint256 maxTokenAmount) public {\\n        require(msg.sender == tx.origin, \\\"not Origin\\\");\\n        UserLPInfo storage userLPInfo = _userLPInfo[msg.sender];\\n        uint256 lastReleaseTime = userLPInfo.lastReleaseTime;\\n        uint256 nowTime = block.timestamp;\\n        if (lastReleaseTime > 0 && nowTime > lastReleaseTime) {\\n            uint256 releaseAmount = (userLPInfo.releaseInitAmount *\\n            (nowTime - lastReleaseTime)) / userLPInfo.releaseDuration;\\n            uint256 maxAmount = userLPInfo.lockAmount -\\n            userLPInfo.calAmount -\\n            userLPInfo.claimedAmount;\\n            if (releaseAmount > maxAmount) {\\n                releaseAmount = maxAmount;\\n            }\\n            userLPInfo.calAmount += releaseAmount;\\n        }\\n\\n        if (nowTime > lastReleaseTime) {\\n            userLPInfo.lastReleaseTime = nowTime;\\n        }\\n\\n        require(userLPInfo.speedUpTime < _speedUpMaxTime, \\\"speedUpTime is max\\\");\\n        userLPInfo.speedUpTime++;\\n        uint256 tokenAmount = getSpeedUpTokenAmount();\\n        require(tokenAmount <= maxTokenAmount, \\\"token amount is too much\\\");\\n        _takeToken(_mintRewardToken, msg.sender, _speedUpReceiver, tokenAmount);\\n\\n        //\\n        uint256 remainAmount = userLPInfo.lockAmount -\\n        userLPInfo.calAmount -\\n        userLPInfo.claimedAmount;\\n        uint256 remainDuration = (remainAmount * userLPInfo.releaseDuration) /\\n        userLPInfo.releaseInitAmount;\\n\\n        //\\n        userLPInfo.releaseInitAmount = remainAmount;\\n        uint256 speedUpDuration = _speedUpDuration;\\n        require(remainDuration > speedUpDuration, \\\"releaseDuration is too short\\\");\\n        userLPInfo.releaseDuration = remainDuration - speedUpDuration;\\n\\n        IToken(_mintRewardToken).giveMintReward();\\n    }\\n\\n    // ******** private *********\\n    function checkLevelCount(address invitor, uint[5] memory amountCheckArray, uint totalReferralAmount, uint currentLevel)\\n    internal view returns (bool) {\\n        address[] memory referralArr = referrals[invitor];\\n        if (totalReferralAmount >= amountCheckArray[currentLevel]) {\\n            uint cnt = 0;\\n            for (uint256 i; i < referrals[invitor].length; ++i) {\\n                if (currentLevel == 0) {\\n                    if (referralAmount[referralArr[i]] + depositAmount[referralArr[i]] >= v1Amount) {\\n                        ++cnt;\\n                    }\\n                } else {\\n                    if (userLevel[referralArr[i]] >= 1) {\\n                        ++cnt;\\n                    }\\n                }\\n                if (cnt >= 2) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n    // Give NFT reward\\n    function distributeNFTRewards(address invitor, uint256 amount) private {\\n        uint256 invLevel = userLevel[invitor];\\n        uint256 nBalance = _nft.balanceOf(invitor);\\n        uint256 rewardAmount = calculateNFTReward(invLevel, amount);\\n\\n        if (invLevel > 0 && nBalance > 0) {\\n            distributeMainReward(invitor, rewardAmount);\\n            distributeSuperRewards(invitor, invLevel, amount);\\n        } else {\\n            // Loop super wallet\\n            address currentAccount = superAccount[invitor];\\n            bool hasNFT = false;\\n            while (currentAccount != address(0) && !hasNFT) {\\n                uint256 sLevel = userLevel[currentAccount];\\n                uint256 sBalance = _nft.balanceOf(currentAccount);\\n                if (sLevel > 0 && sBalance > 0) {\\n                    hasNFT = true;\\n                    rewardAmount = calculateNFTReward(sLevel, amount);\\n                    distributeMainReward(currentAccount, rewardAmount);\\n                    distributeSuperRewards(currentAccount, sLevel, amount);\\n                }\\n                if (currentAccount == superAccount[currentAccount]) {\\n                    currentAccount = address(0);\\n                } else {\\n                    currentAccount = superAccount[currentAccount];\\n                }\\n            }\\n        }\\n    }\\n\\n    function distributeMainReward(address invitor, uint256 rewardAmount) private {\\n        // Add power\\n        uint256 addAmount = (rewardAmount * _lastAmountRate) / _divFactor;\\n        _addUserAmount(invitor, addAmount, false);\\n\\n        uint256 level = userLevel[invitor];\\n        emit nftPowerReward(invitor, level, addAmount);\\n\\n        // Give token\\n        _giveToken(_usdt, invitor, rewardAmount);\\n\\n        emit nftTokenReward(invitor, level, rewardAmount);\\n    }\\n\\n    function distributeSuperRewards(address invitor, uint256 invLevel, uint256 amount) private {\\n        address currentAccount = superAccount[invitor];\\n        uint256 nextLevel = invLevel;\\n        uint256 sameLevel = invLevel + 1;\\n\\n        while (currentAccount != address(0) && nextLevel <= 5) {\\n            uint256 sLevel = userLevel[currentAccount];\\n            uint256 sAmount = calculateNFTReward(sLevel, amount);\\n\\n            if (sLevel > nextLevel || sLevel == sameLevel) {\\n                distributeSuperReward(currentAccount, sAmount);\\n                nextLevel = sLevel;\\n                sameLevel = sLevel + 1;\\n            } else if (sLevel == nextLevel) {\\n                distributeSameLevelReward(currentAccount, sAmount);\\n                nextLevel = sLevel + 1;\\n            }\\n            if (currentAccount == superAccount[currentAccount]) {\\n                currentAccount = address(0);\\n            } else {\\n                currentAccount = superAccount[currentAccount];\\n            }\\n        }\\n    }\\n\\n    function distributeSuperReward(address invitor, uint256 sAmount) private {\\n        // Add power\\n        uint256 srAmount = (sAmount * _lastAmountRate) / _divFactor;\\n        _addUserAmount(invitor, srAmount, false);\\n\\n        uint256 level = userLevel[invitor];\\n        emit nftPowerReward(invitor, level, srAmount);\\n\\n        // Give token\\n        _giveToken(_usdt, invitor, sAmount);\\n\\n        emit nftTokenReward(invitor, level, sAmount);\\n    }\\n\\n    function distributeSameLevelReward(address invitor, uint256 sAmount) private {\\n        // Same level 20% rewards\\n        uint256 srAmount = (sAmount * _lastAmountRate) / _divFactor;\\n        uint256 sameLevelAmount = (srAmount * 20) / 100;\\n\\n        // Add power\\n        _addUserAmount(invitor, sameLevelAmount, false);\\n\\n        uint256 level = userLevel[invitor];\\n        emit nftPowerReward(invitor, level, sameLevelAmount);\\n\\n        // Token reward\\n        uint256 tokenAmount = (sAmount * 20) / 100;\\n        _giveToken(_usdt, invitor, tokenAmount);\\n\\n        emit nftTokenReward(invitor, level, tokenAmount);\\n    }\\n\\n    // NFT add ref\\n    function addReferral(uint256 amount, address account, address invitor) private {\\n        depositAmount[account] += amount;\\n\\n        address currentAccount = invitor;\\n        while (currentAccount != address(0)) {\\n            referralAmount[currentAccount] += amount;\\n            checkForLevelUp(currentAccount);\\n            if (currentAccount == superAccount[currentAccount]) {\\n                currentAccount = address(0);\\n            }\\n            currentAccount = superAccount[currentAccount];\\n        }\\n    }\\n\\n    function addLP(address account, uint256 usdtAmount, uint256 minTokenAmount, bool lockLP) private {\\n        address token = _mintRewardToken;\\n        IERC20 Token = IERC20(token);\\n        uint256 tokenBalanceBefore = Token.balanceOf(address(this));\\n\\n        address usdt = _usdt;\\n        address[] memory path = new address[](2);\\n        path[0] = usdt;\\n        path[1] = token;\\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            usdtAmount / 2,\\n            minTokenAmount,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 tokenAmount = Token.balanceOf(address(this)) - tokenBalanceBefore;\\n\\n        address lpReceiver = lockLP ? address(this) : _sellLPReceiver;\\n        (, , uint256 liquidity) = _swapRouter.addLiquidity(\\n            usdt,\\n            token,\\n            usdtAmount / 2,\\n            tokenAmount,\\n            0,\\n            0,\\n            lpReceiver,\\n            block.timestamp\\n        );\\n        //\\n        if (lockLP) {\\n            _addLockLP(account, liquidity);\\n        } else {\\n            IToken(_mintRewardToken).addUserLPAmount(lpReceiver, liquidity);\\n        }\\n    }\\n\\n    function _addLockLP(address account, uint256 liquidity) private {\\n        UserLPInfo storage userLPInfo = _userLPInfo[account];\\n        uint256 lastReleaseTime = userLPInfo.lastReleaseTime;\\n        uint256 nowTime = block.timestamp;\\n        if (lastReleaseTime > 0 && nowTime > lastReleaseTime) {\\n            uint256 releaseAmount = (userLPInfo.releaseInitAmount * (nowTime - lastReleaseTime)) / userLPInfo.releaseDuration;\\n            uint256 maxAmount = userLPInfo.lockAmount - userLPInfo.calAmount - userLPInfo.claimedAmount;\\n            if (releaseAmount > maxAmount) {\\n                releaseAmount = maxAmount;\\n            }\\n            userLPInfo.calAmount += releaseAmount;\\n        }\\n        uint256 remainAmount = userLPInfo.lockAmount - userLPInfo.calAmount - userLPInfo.claimedAmount;\\n        userLPInfo.lockAmount += liquidity;\\n        userLPInfo.releaseInitAmount = remainAmount + liquidity;\\n        userLPInfo.releaseDuration = _lpReleaseDuration;\\n\\n        if (nowTime > lastReleaseTime) {\\n            userLPInfo.lastReleaseTime = nowTime;\\n        }\\n    }\\n\\n    function _addUserAmount(address account, uint256 amount, bool calInvite) private {\\n        UserInfo storage user = userInfo[account];\\n        _calReward(user, false);\\n\\n        uint256 userAmount = user.amount;\\n        userAmount += amount;\\n        user.amount = userAmount;\\n\\n        uint256 poolTotalAmount = poolInfo.totalAmount;\\n        poolTotalAmount += amount;\\n\\n        uint256 poolAccMintPerShare = poolInfo.accMintPerShare;\\n        user.rewardMintDebt = (userAmount * poolAccMintPerShare) / 1e18;\\n\\n        if (calInvite) {\\n            uint256 len = _inviteLen;\\n            UserInfo storage invitorInfo;\\n            address current = account;\\n            address invitor;\\n            uint256 invitorTotalAmount;\\n            for (uint256 i; i < len; ++i) {\\n                invitor = _invitor[current];\\n                if (address(0) == invitor) {\\n                    break;\\n                }\\n                invitorInfo = userInfo[invitor];\\n                _calReward(invitorInfo, false);\\n                uint256 inviteAmount = (amount * _inviteFee[i]) / 10000;\\n                _inviteAmount[invitor] += inviteAmount;\\n                _teamAmount[invitor] += amount;\\n\\n                invitorTotalAmount = invitorInfo.amount;\\n                invitorTotalAmount += inviteAmount;\\n                invitorInfo.amount = invitorTotalAmount;\\n                invitorInfo.rewardMintDebt = (invitorTotalAmount * poolAccMintPerShare) / 1e18;\\n\\n                poolTotalAmount += inviteAmount;\\n                current = invitor;\\n            }\\n        }\\n        poolInfo.totalAmount = poolTotalAmount;\\n    }\\n\\n    function _updatePool() private {\\n        updateDailyUpRate();\\n        PoolInfo storage pool = poolInfo;\\n        uint256 blockTime = block.timestamp;\\n        uint256 lastRewardTime = pool.lastMintTime;\\n        if (blockTime <= lastRewardTime) {\\n            return;\\n        }\\n        pool.lastMintTime = blockTime;\\n\\n        uint256 accReward = pool.accMintReward;\\n        uint256 totalReward = pool.totalMintReward;\\n        if (accReward >= totalReward) {\\n            return;\\n        }\\n\\n        uint256 totalAmount = pool.totalAmount;\\n        uint256 rewardPerSec = pool.mintPerSec;\\n        if (0 < totalAmount && 0 < rewardPerSec) {\\n            uint256 reward = rewardPerSec * (blockTime - lastRewardTime);\\n            uint256 remainReward = totalReward - accReward;\\n            if (reward > remainReward) {\\n                reward = remainReward;\\n            }\\n            pool.accMintPerShare += (reward * 1e18) / totalAmount;\\n            pool.accMintReward += reward;\\n        }\\n    }\\n\\n    function _calReward(UserInfo storage user, bool updatePool) private {\\n        if (updatePool) {\\n            _updatePool();\\n        }\\n        if (user.amount > 0) {\\n            uint256 accMintReward = (user.amount * poolInfo.accMintPerShare) / 1e18;\\n            uint256 pendingMintAmount = accMintReward - user.rewardMintDebt;\\n            if (pendingMintAmount > 0) {\\n                user.rewardMintDebt = accMintReward;\\n                user.calMintReward += pendingMintAmount;\\n            }\\n        }\\n    }\\n\\n\\n    // ******** view *********\\n    function getDailyRate() private view returns (uint256) {\\n        uint256 lastAmountRate = _lastAmountRate;\\n        uint256 lastDailyUpTime = _lastDailyUpTime;\\n        if (0 == lastDailyUpTime) {\\n            return lastAmountRate;\\n        }\\n        uint256 dailyDuration = _dailyDuration;\\n        uint256 nowTime = block.timestamp;\\n        if (nowTime < lastDailyUpTime + dailyDuration) {\\n            return lastAmountRate;\\n        }\\n        uint256 ds = (nowTime - lastDailyUpTime) / dailyDuration;\\n\\n        uint256 amountDailyUp = _amountDailyUp;\\n        for (uint256 i; i < ds; ++i) {\\n            lastAmountRate = (lastAmountRate * amountDailyUp) / _divFactor;\\n        }\\n        return lastAmountRate;\\n    }\\n\\n    function calculateNFTReward(uint256 userRewardLevel, uint256 amount) public pure returns (uint256){\\n        if (userRewardLevel == 0 || userRewardLevel > 5) {\\n            return 0;\\n        }\\n        return (amount * userRewardLevel) / 100;\\n    }\\n\\n    function getSpeedUpTokenAmount() private view returns (uint256 tokenAmount){\\n        (uint256 rUsdt, uint256 rToken) = _getReserves();\\n        tokenAmount = (_speedUpCost * rToken) / rUsdt;\\n    }\\n\\n    function _getReserves() public view returns (uint256 rUsdt, uint256 rToken){\\n        ISwapPair pair = ISwapPair(_lp);\\n        (uint256 r0, uint256 r1,) = pair.getReserves();\\n\\n        if (_usdt < _mintRewardToken) {\\n            rUsdt = r0;\\n            rToken = r1;\\n        } else {\\n            rUsdt = r1;\\n            rToken = r0;\\n        }\\n    }\\n\\n    function getJoinTokenAmountOut(uint256 usdtAmount) public view returns (uint256 tokenAmount){\\n        address[] memory path = new address[](2);\\n        path[0] = _usdt;\\n        path[1] = _mintRewardToken;\\n        uint256[] memory amounts = _swapRouter.getAmountsOut(\\n            usdtAmount / 2,\\n            path\\n        );\\n        tokenAmount = amounts[1];\\n    }\\n\\n    function getSellUsdtOut(uint256 tokenAmount) public view\\n    returns (uint256 usdtAmount, uint256 selfUsdt, uint256 mintAmount){\\n        address[] memory path = new address[](2);\\n        path[0] = _mintRewardToken;\\n        path[1] = _usdt;\\n        uint256[] memory amounts = _swapRouter.getAmountsOut(tokenAmount, path);\\n        usdtAmount = amounts[1];\\n        selfUsdt = (usdtAmount * _sellSelfRate) / 10000;\\n        mintAmount = (usdtAmount * _sellJoinRate) / 10000;\\n        mintAmount = (mintAmount * getDailyRate()) / 10000;\\n    }\\n\\n    function getBinderLength(address account) public view returns (uint256) {\\n        return _binder[account].length;\\n    }\\n\\n    // NFT level\\n    function getUserNFTLevel(address account) external view returns (uint256) {\\n        return userLevel[account];\\n    }\\n\\n    //\\u7ed1\\u5b9a\\u9080\\u8bf7\\u5173\\u7cfb\\n    function _bindInvitor(address account, address invitor) private {\\n        UserInfo storage user = userInfo[account];\\n        if (!user.isActive) {\\n            require(address(0) != invitor, \\\"invitor 0\\\");\\n            require(userInfo[invitor].isActive, \\\"invitor !Active\\\");\\n            //nft refer\\n            referrals[invitor].push(account);\\n            superAccount[account] = invitor;\\n\\n            _invitor[account] = invitor;\\n            _binder[invitor].push(account);\\n            for (uint256 i; i < _inviteLen;) {\\n                _teamNum[invitor] += 1;\\n                invitor = _invitor[invitor];\\n                if (address(0) == invitor) {\\n                    break;\\n                }\\n            unchecked {\\n                ++i;\\n            }\\n            }\\n            user.isActive = true;\\n        }\\n    }\\n\\n    function getBinderList(address account, uint256 start, uint256 length) external view\\n    returns (uint256 returnCount, address[] memory binders) {\\n        address[] storage _binders = _binder[account];\\n        uint256 recordLen = _binders.length;\\n        if (0 == length) {\\n            length = recordLen;\\n        }\\n        returnCount = length;\\n        binders = new address[](length);\\n        uint256 index = 0;\\n        for (uint256 i = start; i < start + length; i++) {\\n            if (i >= recordLen) {\\n                return (index, binders);\\n            }\\n            binders[index] = _binders[i];\\n            index++;\\n        }\\n    }\\n\\n    function getDirectList(address account) external view\\n    returns (address[] memory binders, uint256[] memory teamAmounts){\\n        address[] storage _binders = referrals[account];\\n        uint256 recordLen = _binders.length;\\n        binders = new address[](recordLen);\\n        teamAmounts = new uint256[](recordLen);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < recordLen; i++) {\\n            if (i >= recordLen) {\\n                return (binders, teamAmounts);\\n            }\\n\\n            address binder = _binders[i];\\n            binders[index] = binder;\\n            teamAmounts[index] = depositAmount[binder] + referralAmount[binder];\\n            index++;\\n        }\\n    }\\n\\n\\n    function getUserLPInfo(address account)\\n    public\\n    view\\n    returns (\\n        uint256 lockAmount,\\n        uint256 calAmount,\\n        uint256 claimedAmount,\\n        uint256 lastReleaseTime,\\n        uint256 releaseInitAmount,\\n        uint256 releaseDuration,\\n        uint256 speedUpTime,\\n        uint256 tokenBalance,\\n        uint256 tokenAllowance\\n    ){\\n        UserLPInfo storage userLPInfo = _userLPInfo[account];\\n        lockAmount = userLPInfo.lockAmount;\\n        calAmount = userLPInfo.calAmount;\\n        claimedAmount = userLPInfo.claimedAmount;\\n        releaseInitAmount = userLPInfo.releaseInitAmount;\\n        releaseDuration = userLPInfo.releaseDuration;\\n        speedUpTime = userLPInfo.speedUpTime;\\n        lastReleaseTime = userLPInfo.lastReleaseTime;\\n        tokenBalance = IERC20(_mintRewardToken).balanceOf(account);\\n        tokenAllowance = IERC20(_mintRewardToken).allowance(\\n            account,\\n            address(this)\\n        );\\n    }\\n\\n    function getUserInfo(address account)\\n    public\\n    view\\n    returns (\\n        uint256 amount,\\n        uint256 usdtBalance,\\n        uint256 usdtAllowance,\\n        uint256 pendingMintReward,\\n        uint256 inviteAmount,\\n        uint256 sellJoinAmount,\\n        uint256 teamNum,\\n        uint256 teamAmount\\n    )\\n    {\\n        UserInfo storage user = userInfo[account];\\n        amount = user.amount;\\n        usdtBalance = IERC20(_usdt).balanceOf(account);\\n        usdtAllowance = IERC20(_usdt).allowance(account, address(this));\\n        pendingMintReward = getPendingMintReward(account) + user.calMintReward;\\n        inviteAmount = _inviteAmount[account];\\n        sellJoinAmount = _sellJoinAmount[account];\\n        teamNum = _teamNum[account];\\n        teamAmount = _teamAmount[account];\\n    }\\n\\n    function getBaseInfo()\\n    external\\n    view\\n    returns (\\n        address usdt,\\n        uint256 usdtDecimals,\\n        address mintRewardToken,\\n        uint256 mintRewardTokenDecimals,\\n        uint256 totalUsdt,\\n        uint256 totalAmount,\\n        uint256 lastDailyReward,\\n        uint256 dailyAmountRate,\\n        uint256 minAmount,\\n        address defaultInvitor,\\n        bool pauseJoin\\n    )\\n    {\\n        usdt = _usdt;\\n        usdtDecimals = 18;\\n        mintRewardToken = _mintRewardToken;\\n        mintRewardTokenDecimals = 18;\\n        totalUsdt = _totalUsdt;\\n        totalAmount = poolInfo.totalAmount;\\n        lastDailyReward = _lastDailyReward;\\n        dailyAmountRate = getDailyRate();\\n        minAmount = _minAmount;\\n        defaultInvitor = _defaultInvitor;\\n        pauseJoin = _pauseJoin;\\n    }\\n\\n    function getLPInfo()\\n    external\\n    view\\n    returns (\\n        uint256 totalLP,\\n        uint256 lockLP,\\n        uint256 speedUpMaxTime,\\n        uint256 speedCostUsdt,\\n        uint256 speedCostToken\\n    )\\n    {\\n        totalLP = IERC20(_lp).totalSupply();\\n        lockLP = IERC20(_lp).balanceOf(address(this));\\n        speedUpMaxTime = _speedUpMaxTime;\\n        speedCostUsdt = _speedUpCost;\\n        speedCostToken = getSpeedUpTokenAmount();\\n    }\\n\\n\\n    // ******** owner *********\\n    function setNFTAddress(address _nftAddress) external onlyOwner {\\n        _nft = INFT(_nftAddress);\\n    }\\n\\n    function setUserLevel(address account, uint256 level) external onlyOwner {\\n        userLevel[account] = level;\\n    }\\n\\n    // Batch userInfo\\n    function batchInsertUserInfo(address[] memory users, UserInfo[] memory userInfos) external onlyOwner {\\n        require(users.length == userInfos.length, \\\"Array lengths do not match\\\");\\n        for (uint256 i = 0; i < users.length; i++) {\\n            userInfo[users[i]] = userInfos[i];\\n        }\\n    }\\n\\n    function setPauseSell(bool p) external onlyWhiteList {\\n        _pauseSell = p;\\n    }\\n\\n    function setSellSelfRate(uint256 r) external onlyWhiteList {\\n        _sellSelfRate = r;\\n        require(_sellSelfRate + _sellJoinRate + _sellNFTRate <= 10000, \\\"rate overflow\\\");\\n    }\\n\\n    function setSellJoinRate(uint256 r) external onlyWhiteList {\\n        _sellJoinRate = r;\\n        require(_sellSelfRate + _sellJoinRate + _sellNFTRate <= 10000, \\\"rate overflow\\\");\\n    }\\n\\n    function setSellNFTRate(uint256 r) external onlyWhiteList {\\n        _sellNFTRate = r;\\n        require(_sellSelfRate + _sellJoinRate + _sellNFTRate <= 10000, \\\"rate overflow\\\");\\n    }\\n\\n    function setSellLPReceiver(address a) external onlyWhiteList {\\n        _sellLPReceiver = a;\\n    }\\n\\n    function setFundAddress(address a) external onlyWhiteList {\\n        _fundAddress = a;\\n    }\\n\\n    function setSpeedUpMaxTime(uint256 mt) external onlyWhiteList {\\n        _speedUpMaxTime = mt;\\n    }\\n\\n    function setSpeedUpCost(uint256 c) external onlyWhiteList {\\n        _speedUpCost = c;\\n    }\\n\\n    function setSpeedUpDuration(uint256 d) external onlyWhiteList {\\n        _speedUpDuration = d;\\n    }\\n\\n    function setSeedUpReceiver(address a) external onlyWhiteList {\\n        _speedUpReceiver = a;\\n    }\\n\\n    function setLPReleaseDuration(uint256 d) external onlyWhiteList {\\n        require(d > 0, \\\"release duration must > 0\\\");\\n        _lpReleaseDuration = d;\\n    }\\n\\n    function setAmountDailyUp(uint256 r) external onlyWhiteList {\\n        _amountDailyUp = r;\\n    }\\n\\n    function setLastDailyUpTime(uint256 t) external onlyWhiteList {\\n        _lastDailyUpTime = t;\\n    }\\n\\n    function setLastAmountRate(uint256 r) external onlyWhiteList {\\n        _lastAmountRate = r;\\n    }\\n\\n    function open() external onlyWhiteList {\\n        if (0 == _lastDailyUpTime) {\\n            _lastDailyUpTime = block.timestamp;\\n        }\\n        _pauseJoin = false;\\n    }\\n\\n    function close() external onlyWhiteList {\\n        _pauseJoin = true;\\n    }\\n\\n    function addMintAmount(address account, uint256 amount) external onlyWhiteList {\\n        _bindInvitor(account, _defaultInvitor);\\n        _updatePool();\\n        _addUserAmount(account, amount, false);\\n    }\\n\\n    function setMintPerSec(uint256 mintPerSec) external onlyWhiteList {\\n        _updatePool();\\n        poolInfo.mintPerSec = mintPerSec;\\n    }\\n\\n    function setInviteFee(uint256 i, uint256 fee) external onlyWhiteList {\\n        _inviteFee[i] = fee;\\n    }\\n\\n    function claimBalance(address to, uint256 amount) external onlyWhiteList {\\n        safeTransferETH(to, amount);\\n    }\\n\\n    function claimToken(address token, address to, uint256 amount) external onlyWhiteList {\\n        _giveToken(token, to, amount);\\n    }\\n\\n    function setDefaultInvitor(address adr) external onlyWhiteList {\\n        _defaultInvitor = adr;\\n        userInfo[adr].isActive = true;\\n    }\\n\\n    function setInProject(address adr, bool enable) external onlyWhiteList {\\n        _inProject[adr] = enable;\\n    }\\n\\n    function addTotalMintReward(uint256 reward) external onlyInProject {\\n        _updatePool();\\n        poolInfo.totalMintReward += reward;\\n        poolInfo.mintPerSec = reward / _dailyDuration;\\n        _lastDailyReward = reward;\\n    }\\n\\n    function bindInvitor(address account, address invitor) public onlyInProject {\\n        _bindInvitor(account, invitor);\\n    }\\n\\n    function addUserAmount(address account, uint256 amount, bool calInvite) public onlyInProject {\\n        _bindInvitor(account, _defaultInvitor);\\n        _updatePool();\\n        _addUserAmount(account, amount, calInvite);\\n    }\\n\\n\\n    // ******** utils *********\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        //bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"approve fail\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success,) = to.call{value : value}(new bytes(0));\\n        require(success, \\\"eth transfer fail\\\");\\n    }\\n\\n    function _giveToken(address tokenAddress, address account, uint256 amount) private {\\n        if (0 == amount) {\\n            return;\\n        }\\n        IERC20 token = IERC20(tokenAddress);\\n        require(token.balanceOf(address(this)) >= amount, \\\"balance not enough\\\");\\n        token.transfer(account, amount);\\n    }\\n\\n    function _takeToken(address tokenAddress, address from, address to, uint256 tokenNum) private {\\n        IERC20 token = IERC20(tokenAddress);\\n        require(token.balanceOf(address(from)) >= tokenNum, \\\"balance not enough\\\");\\n        token.transferFrom(from, to, tokenNum);\\n    }\\n}\",\"keccak256\":\"0xe85b33c27cb3cbf2aca08b962a2793df51c418b1460295813ce91895b9c6b977\",\"license\":\"MIT\"},\"contracts/interface/INFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n\\ninterface INFT {\\n    function addTokenReward(uint256 rewardAmount) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n}\",\"keccak256\":\"0xa06dd537bdcde34f676176568c584079729a211bce9f392a5470140dc6007b00\",\"license\":\"MIT\"},\"contracts/interface/ISwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n\\ninterface ISwapFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function feeTo() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\",\"keccak256\":\"0x5849d5f6a26192dc835dd0a452df981b5742afda0fe9ecb564edbb304b6e09e9\",\"license\":\"MIT\"},\"contracts/interface/ISwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface ISwapPair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function sync() external;\\n}\",\"keccak256\":\"0x528ce2a8bd0f10b92a547c7b86bdb098308adb1a1be12a13c4e09964d2047424\",\"license\":\"MIT\"},\"contracts/interface/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface ISwapRouter {\\n    function factory() external pure returns (address);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n}\",\"keccak256\":\"0x8b6dcc30c60ffafe15874d4c3920157a8aa7b5c2141e3d5fefb5593df50397ca\",\"license\":\"MIT\"},\"contracts/interface/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n\\ninterface IToken {\\n    function giveMintReward() external;\\n\\n    function addUserLPAmount(address account, uint256 lpAmount) external;\\n}\\n\",\"keccak256\":\"0xef20803f40e623bfd961ddd3c5486646f1cfc82f7bab120d817917007a7d5c3a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610180604052600360805268878678326eac90000060a05269043c33c193756480000060c052690a968163f0a57b40000060e052691fc3842bd1f071c00000610100526969e10de76676d0800000610120526127106101405262015180610160523480156200006d57600080fd5b5062000079336200007f565b620000cf565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60805160a05160c05160e05161010051610120516101405161016051615e00620001976000396000818161163a015281816134400152614ebf0152600081816125d0015281816134af0152818161384601528181614f2301528181615174015261536e01526000818161056a01526127df01526000818161070401526127b9015260008181610bd90152612793015260008181610805015261276d015260008181610f5a015281816127400152614d62015260008181613e9501526140820152615e006000f3fe6080604052600436106104ad5760003560e01c80638593b2b11161026b578063b79190451161014f578063e4849b32116100c1578063f0c52e4c11610085578063f0c52e4c14611165578063f12e6eb7146111a2578063f2fde38b146111c2578063f48544c3146111e2578063fcfff16f146111f8578063fd3cf8851461120d57600080fd5b8063e4849b321461109f578063e5d65633146110bf578063e697b5d8146110ef578063e9f221691461110f578063ec747edb1461112f57600080fd5b8063cef6632d11610113578063cef6632d14610ff2578063d5559e211461101f578063dde40dda14611035578063de44391a14611055578063e20ae3921461106a578063e3ca487a1461107f57600080fd5b8063b791904514610f28578063bc980f8c14610f48578063cc396be114610f7c578063ce4d9f1514610fb2578063ce56114314610fdc57600080fd5b8063a4e48ed8116101e8578063b1a8c459116101ac578063b1a8c45914610e72578063b272d7c314610e92578063b38dcd7114610eb2578063b612511014610ec8578063b64cf2d914610ee8578063b75265d314610f0857600080fd5b8063a4e48ed814610dc1578063a5b64e5e14610de1578063a779fe9214610e01578063aa1a8c6014610e17578063aa8b38d914610e5257600080fd5b806394f738a21161022f57806394f738a214610cb95780639551ae4414610cd957806395d4c7bb14610d5457806398300e1814610d81578063a40a789c14610da157600080fd5b80638593b2b114610c1b57806385dc300414610c3b5780638a56d30614610c5b5780638da5cb5b14610c7b5780638dbdbe6d14610c9957600080fd5b8063449fe5001161039257806369d037381161030f578063715018a6116102d3578063715018a614610b445780637512474e14610b595780637d3643b514610b795780637f15b36b14610ba7578063815a7beb14610bc75780638230af5a14610bfb57600080fd5b806369d0373814610a7d57806369da132614610a9d5780636ca9ee1b14610ad35780636e18b6db14610ae95780636ec42c2c14610b1657600080fd5b80635ca8e3f2116103565780635ca8e3f2146109ac5780635f84aecd146109cc5780636386c1c7146109e2578063681982a714610a3d578063692c7bf714610a5d57600080fd5b8063449fe500146108c95780634e71d92d146108f357806350f62da7146109085780635239a993146109345780635a2f3d091461095457600080fd5b80631b967ad41161042b57806333f5780e116103ef57806333f5780e1461079357806335876476146107b35780633a0dde51146107d35780633bf5f934146107f35780633c6369fc1461082757806343d726d6146108b457600080fd5b80631b967ad4146106bc5780631e8074b5146106f257806326e641ea14610726578063280e31cc146107465780632e0dd9c71461077357600080fd5b80630c28525d116104725780630c28525d1461059a578063119f3eb6146105ba578063125bfb661461061e5780631703dd121461063e5780631959a0021461065457600080fd5b80625a3ff1146104b9578063029a0c9d146104f65780630600ffc1146105185780630681c58d146105385780630b2ef5f71461055857600080fd5b366104b457005b600080fd5b3480156104c557600080fd5b50600d546104d9906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561050257600080fd5b50610516610511366004615487565b61122d565b005b34801561052457600080fd5b506105166105333660046154c3565b61128f565b34801561054457600080fd5b50610516610553366004615487565b6112ed565b34801561056457600080fd5b5061058c7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016104ed565b3480156105a657600080fd5b506105166105b5366004615487565b6113a7565b3480156105c657600080fd5b506105da6105d5366004615505565b611450565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915260a085015260c084015260e0830152610100820152610120016104ed565b34801561062a57600080fd5b50610516610639366004615529565b611584565b34801561064a57600080fd5b5061058c60255481565b34801561066057600080fd5b5061069a61066f366004615505565b600760205260009081526040902080546001820154600283015460039093015460ff90921692909184565b60408051941515855260208501939093529183015260608201526080016104ed565b3480156106c857600080fd5b5061058c6106d7366004615505565b6001600160a01b031660009081526010602052604090205490565b3480156106fe57600080fd5b5061058c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561073257600080fd5b50610516610741366004615487565b6115e3565b34801561075257600080fd5b5061058c610761366004615505565b60226020526000908152604090205481565b34801561077f57600080fd5b5061051661078e366004615487565b611667565b34801561079f57600080fd5b506105166107ae36600461556a565b6116c0565b3480156107bf57600080fd5b506105166107ce366004615596565b6116e4565b3480156107df57600080fd5b506105166107ee366004615487565b611aa1565b3480156107ff57600080fd5b5061058c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561083357600080fd5b5061087f610842366004615505565b6008602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016104ed565b3480156108c057600080fd5b50610516611afa565b3480156108d557600080fd5b506016546108e39060ff1681565b60405190151581526020016104ed565b3480156108ff57600080fd5b50610516611b5d565b34801561091457600080fd5b5061058c610923366004615505565b602080526000908152604090205481565b34801561094057600080fd5b5061058c61094f36600461562c565b611c0d565b34801561096057600080fd5b5060015460025460035460045460055460065461097f95949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016104ed565b3480156109b857600080fd5b506105166109c736600461562c565b611c48565b3480156109d857600080fd5b5061058c60265481565b3480156109ee57600080fd5b50610a026109fd366004615505565b611cae565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e0820152610100016104ed565b348015610a4957600080fd5b50610516610a58366004615505565b611e1e565b348015610a6957600080fd5b50610516610a7836600461564e565b611e94565b348015610a8957600080fd5b50610516610a98366004615505565b611f13565b348015610aa957600080fd5b506104d9610ab8366004615505565b600f602052600090815260409020546001600160a01b031681565b348015610adf57600080fd5b5061058c60275481565b348015610af557600080fd5b5061058c610b04366004615505565b60216020526000908152604090205481565b348015610b2257600080fd5b50610b36610b31366004615687565b611f3d565b6040516104ed929190615700565b348015610b5057600080fd5b5061051661205c565b348015610b6557600080fd5b50610516610b74366004615859565b612070565b348015610b8557600080fd5b50610b99610b94366004615505565b612168565b6040516104ed92919061591b565b348015610bb357600080fd5b50610516610bc2366004615487565b6122f7565b348015610bd357600080fd5b5061058c7f000000000000000000000000000000000000000000000000000000000000000081565b348015610c0757600080fd5b50601c546104d9906001600160a01b031681565b348015610c2757600080fd5b506104d9610c3636600461556a565b612350565b348015610c4757600080fd5b50610516610c56366004615505565b612388565b348015610c6757600080fd5b5061058c610c76366004615505565b6123fe565b348015610c8757600080fd5b506000546001600160a01b03166104d9565b348015610ca557600080fd5b50610516610cb4366004615972565b6124f3565b348015610cc557600080fd5b50610516610cd4366004615505565b6126c7565b348015610ce557600080fd5b50610cee61284b565b604080516001600160a01b039c8d168152602081019b909b52988b16988a01989098526060890196909652608088019490945260a087019290925260c086015260e0850152610100840152909216610120820152901515610140820152610160016104ed565b348015610d6057600080fd5b5061058c610d6f366004615505565b601f6020526000908152604090205481565b348015610d8d57600080fd5b50600e546104d9906001600160a01b031681565b348015610dad57600080fd5b5061058c610dbc366004615487565b6128ac565b348015610dcd57600080fd5b50610516610ddc366004615487565b6129d8565b348015610ded57600080fd5b50610516610dfc366004615487565b612a39565b348015610e0d57600080fd5b5061058c60295481565b348015610e2357600080fd5b50610e37610e32366004615487565b612d1e565b604080519384526020840192909252908201526060016104ed565b348015610e5e57600080fd5b50610516610e6d36600461556a565b612ea1565b348015610e7e57600080fd5b50610516610e8d366004615487565b612f03565b348015610e9e57600080fd5b50601a546104d9906001600160a01b031681565b348015610ebe57600080fd5b5061058c60195481565b348015610ed457600080fd5b50610516610ee3366004615505565b612f71565b348015610ef457600080fd5b50610516610f033660046159a0565b612fe7565b348015610f1457600080fd5b50610516610f23366004615505565b61304e565b348015610f3457600080fd5b50610516610f43366004615487565b6130dc565b348015610f5457600080fd5b5061058c7f000000000000000000000000000000000000000000000000000000000000000081565b348015610f8857600080fd5b506104d9610f97366004615505565b601e602052600090815260409020546001600160a01b031681565b348015610fbe57600080fd5b50610fc761314b565b604080519283526020830191909152016104ed565b348015610fe857600080fd5b5061058c60175481565b348015610ffe57600080fd5b5061058c61100d366004615487565b60116020526000908152604090205481565b34801561102b57600080fd5b5061058c60245481565b34801561104157600080fd5b50602a546104d9906001600160a01b031681565b34801561106157600080fd5b50610516613213565b34801561107657600080fd5b5061051661342f565b34801561108b57600080fd5b5061051661109a366004615487565b6134ff565b3480156110ab57600080fd5b506105166110ba366004615487565b613558565b3480156110cb57600080fd5b506108e36110da366004615505565b602d6020526000908152604090205460ff1681565b3480156110fb57600080fd5b506104d961110a36600461556a565b613a32565b34801561111b57600080fd5b5061051661112a36600461556a565b613a4e565b34801561113b57600080fd5b5061058c61114a366004615505565b6001600160a01b031660009081526022602052604090205490565b34801561117157600080fd5b5061117a613acd565b604080519586526020860194909452928401919091526060830152608082015260a0016104ed565b3480156111ae57600080fd5b506105166111bd3660046159bd565b613bd6565b3480156111ce57600080fd5b506105166111dd366004615505565b613c0f565b3480156111ee57600080fd5b5061058c60185481565b34801561120457600080fd5b50610516613c85565b34801561121957600080fd5b50610516611228366004615487565b613cf4565b601c546001600160a01b031633148061125057506000546001600160a01b031633145b806112655750600e546001600160a01b031633145b61128a5760405162461bcd60e51b8152600401611281906159eb565b60405180910390fd5b602455565b336000908152602d602052604090205460ff166112be5760405162461bcd60e51b815260040161128190615a14565b6012546112d59084906001600160a01b0316613d4d565b6112dd613f26565b6112e8838383614009565b505050565b601c546001600160a01b031633148061131057506000546001600160a01b031633145b806113255750600e546001600160a01b031633145b6113415760405162461bcd60e51b8152600401611281906159eb565b6018819055601954601754612710919061135c908490615a51565b6113669190615a51565b11156113a45760405162461bcd60e51b815260206004820152600d60248201526c72617465206f766572666c6f7760981b6044820152606401611281565b50565b601c546001600160a01b03163314806113ca57506000546001600160a01b031633145b806113df5750600e546001600160a01b031633145b6113fb5760405162461bcd60e51b8152600401611281906159eb565b6000811161144b5760405162461bcd60e51b815260206004820152601960248201527f72656c65617365206475726174696f6e206d757374203e2030000000000000006044820152606401611281565b602755565b6001600160a01b03818116600081815260086020526040808220805460018201546002830154600480850154600586015460068701546003880154600c5499516370a0823160e01b81529485019b909b52959a94999398939791969095948493919216906370a0823190602401602060405180830381865afa1580156114da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fe9190615a69565b600c54604051636eb1769f60e11b81526001600160a01b038e8116600483015230602483015292955091169063dd62ed3e90604401602060405180830381865afa158015611550573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115749190615a69565b9150509193959799909294969850565b601c546001600160a01b03163314806115a757506000546001600160a01b031633145b806115bc5750600e546001600160a01b031633145b6115d85760405162461bcd60e51b8152600401611281906159eb565b6112e88383836141ed565b336000908152602d602052604090205460ff166116125760405162461bcd60e51b815260040161128190615a14565b61161a613f26565b806001600501600082825461162f9190615a51565b9091555061165f90507f000000000000000000000000000000000000000000000000000000000000000082615a82565b600455602e55565b601c546001600160a01b031633148061168a57506000546001600160a01b031633145b8061169f5750600e546001600160a01b031633145b6116bb5760405162461bcd60e51b8152600401611281906159eb565b602555565b6116c8614323565b6001600160a01b03909116600090815260226020526040902055565b600054600160a81b900460ff161580801561170c57506000546001600160a01b90910460ff16105b8061172d5750303b15801561172d5750600054600160a01b900460ff166001145b6117905760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401611281565b6000805460ff60a01b1916600160a01b17905580156117bd576000805460ff60a81b1916600160a81b1790555b6023805460ff19166001179055600980546001600160a01b03808b166001600160a01b03199283168117909355600a80548b831690841617905568056bc75e2d63100000600b55600e8054898316908416179055600c8054918a16919092161790556040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa15801561185a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187e9190615aa4565b60405163e6a4390560e01b81526001600160a01b0389811660048301528881166024830152919091169063e6a4390590604401602060405180830381865afa1580156118ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f29190615aa4565b600d80546001600160a01b039283166001600160a01b0319918216179091554260055560128054928716929091168217905560009081526007602090815260408220805460ff19166001179055601190526103207f4ad3b33220dddc71b994a52d72c06b10862965f7d926534c05c00fb7e819e7b7556101f47f17bc176d2408558f6e4111feebc3cab4e16b63e967be91cde721f4c8a488b552556002905261012c7f08037d7b151cc412d25674a4e66b334d9ae9d2e5517a7feaae5cdb828bf1c62855681043561a88293000006028556119d0878960001961437d565b6119dd868960001961437d565b601a80546001600160a01b0385166001600160a01b03199182168117909255601c805482169092179091556003602b55602a805490911661dead179055611388601755610fa06018556101f46019556127106025556127746026556276a700602755620d2f00602955611a4f82614480565b8015611a97576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b601c546001600160a01b0316331480611ac457506000546001600160a01b031633145b80611ad95750600e546001600160a01b031633145b611af55760405162461bcd60e51b8152600401611281906159eb565b602b55565b601c546001600160a01b0316331480611b1d57506000546001600160a01b031633145b80611b325750600e546001600160a01b031633145b611b4e5760405162461bcd60e51b8152600401611281906159eb565b6023805460ff19166001179055565b336000908152600760205260409020611b778160016144d0565b60038101548015611ba157600c54611b99906001600160a01b031633836141ed565b600060038301555b600c60009054906101000a90046001600160a01b03166001600160a01b0316632e05661b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611bf157600080fd5b505af1158015611c05573d6000803e3d6000fd5b505050505050565b6000821580611c1c5750600583115b15611c2957506000611c42565b6064611c358484615ac1565b611c3f9190615a82565b90505b92915050565b601c546001600160a01b0316331480611c6b57506000546001600160a01b031633145b80611c805750600e546001600160a01b031633145b611c9c5760405162461bcd60e51b8152600401611281906159eb565b60009182526011602052604090912055565b6001600160a01b038181166000818152600760205260408082206001810154600a5492516370a0823160e01b8152600481019590955294929384938493849384938493849316906370a0823190602401602060405180830381865afa158015611d1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3f9190615a69565b600a54604051636eb1769f60e11b81526001600160a01b038d81166004830152306024830152929a5091169063dd62ed3e90604401602060405180830381865afa158015611d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db59190615a69565b96508060030154611dc58b6123fe565b611dcf9190615a51565b6001600160a01b03909a16600090815260136020908152604080832054601b8352818420546015845282852054601490945291909320549b9d9a9c999b999a9299909850909650945092505050565b601c546001600160a01b0316331480611e4157506000546001600160a01b031633145b80611e565750600e546001600160a01b031633145b611e725760405162461bcd60e51b8152600401611281906159eb565b602a80546001600160a01b0319166001600160a01b0392909216919091179055565b601c546001600160a01b0316331480611eb757506000546001600160a01b031633145b80611ecc5750600e546001600160a01b031633145b611ee85760405162461bcd60e51b8152600401611281906159eb565b6001600160a01b03919091166000908152602d60205260409020805460ff1916911515919091179055565b611f1b614323565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166000908152601060205260408120805460609190848403611f66578094505b8493508467ffffffffffffffff811115611f8257611f82615719565b604051908082528060200260200182016040528015611fab578160200160208202803683370190505b5092506000865b611fbc8789615a51565b81101561204f57828110611fd557509350612054915050565b838181548110611fe757611fe7615ae0565b9060005260206000200160009054906101000a90046001600160a01b031685838151811061201757612017615ae0565b6001600160a01b03909216602092830291909101909101528161203981615af6565b925050808061204790615af6565b915050611fb2565b505050505b935093915050565b612064614323565b61206e6000614480565b565b612078614323565b80518251146120c95760405162461bcd60e51b815260206004820152601a60248201527f4172726179206c656e6774687320646f206e6f74206d617463680000000000006044820152606401611281565b60005b82518110156112e8578181815181106120e7576120e7615ae0565b60200260200101516007600085848151811061210557612105615ae0565b6020908102919091018101516001600160a01b031682528181019290925260409081016000208351815460ff191690151517815591830151600183015582015160028201556060909101516003909101558061216081615af6565b9150506120cc565b6001600160a01b0381166000908152601d60205260409020805460609182918067ffffffffffffffff8111156121a0576121a0615719565b6040519080825280602002602001820160405280156121c9578160200160208202803683370190505b5093508067ffffffffffffffff8111156121e5576121e5615719565b60405190808252806020026020018201604052801561220e578160200160208202803683370190505b5092506000805b828110156122ee5782811061222d5750505050915091565b600084828154811061224157612241615ae0565b9060005260206000200160009054906101000a90046001600160a01b031690508087848151811061227457612274615ae0565b6001600160a01b039283166020918202929092018101919091529082166000908152601f82526040808220549280529020546122b09190615a51565b8684815181106122c2576122c2615ae0565b6020908102919091010152826122d781615af6565b9350505080806122e690615af6565b915050612215565b50505050915091565b601c546001600160a01b031633148061231a57506000546001600160a01b031633145b8061232f5750600e546001600160a01b031633145b61234b5760405162461bcd60e51b8152600401611281906159eb565b602855565b6010602052816000526040600020818154811061236c57600080fd5b6000918252602090912001546001600160a01b03169150829050565b601c546001600160a01b03163314806123ab57506000546001600160a01b031633145b806123c05750600e546001600160a01b031633145b6123dc5760405162461bcd60e51b8152600401611281906159eb565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600760205260408120600181810154909190156124ec5760048201544290808211156124e957600061243f8284615b0f565b856003015461244e9190615ac1565b6005860154600287015491925090600081831161246c576000612476565b6124768284615b0f565b90508084116124855783612487565b805b6002880154895491955090670de0b6b3a7640000906124a68783615ac1565b6124b09190615a82565b8a600101546124bf9190615a51565b89600101546124ce9190615ac1565b6124d89190615a82565b6124e29190615b0f565b9850505050505b50505b5050919050565b60235460ff16156125365760405162461bcd60e51b815260206004820152600d60248201526c6465706f73697420706175736560981b6044820152606401611281565b600b5483101561257a5760405162461bcd60e51b815260206004820152600f60248201526e6465706f73697420746f6f206c6f7760881b6044820152606401611281565b3383602c600082825461258d9190615a51565b9091555061259d90508183613d4d565b600a546125b5906001600160a01b0316823087614555565b6125c28185856001614681565b6125ca613f26565b61260e817f0000000000000000000000000000000000000000000000000000000000000000602554876125fd9190615ac1565b6126079190615a82565b6001614009565b600c60009054906101000a90046001600160a01b03166001600160a01b0316632e05661b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561265e57600080fd5b505af1158015612672573d6000803e3d6000fd5b5050505061268082856149e2565b61268b848284614bed565b60405184906001600160a01b038316907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c90600090a350505050565b6001600160a01b0381166000908152601d6020526040902054600110156113a4576001600160a01b03811660009081526020808052604080832054601f9092528220546127149190615a51565b6001600160a01b03831660009081526022602052604080822054815160a08101909252929350806127667f00000000000000000000000000000000000000000000000000000000000000006002615ac1565b81526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f0000000000000000000000000000000000000000000000000000000000000000815250905061280f84828585614ca9565b801561281b5750600582105b156128455761282b826001615a51565b6001600160a01b0385166000908152602260205260409020555b50505050565b600a54600c54602c54600154602e546001600160a01b0394851694601294169284929091600080808061287c614ea6565b600b546012546023549d9e9c9d9b9c9a9b999a9899979892979196506001600160a01b0316945060ff1692509050565b604080516002808252606082018352600092839291906020830190803683375050600a5482519293506001600160a01b0316918391506000906128f1576128f1615ae0565b6001600160a01b039283166020918202929092010152600c5482519116908290600190811061292257612922615ae0565b6001600160a01b0392831660209182029290920101526009546000911663d06ca61f61294f600287615a82565b846040518363ffffffff1660e01b815260040161296d929190615700565b600060405180830381865afa15801561298a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129b29190810190615b26565b9050806001815181106129c7576129c7615ae0565b602002602001015192505050919050565b601c546001600160a01b03163314806129fb57506000546001600160a01b031633145b80612a105750600e546001600160a01b031633145b612a2c5760405162461bcd60e51b8152600401611281906159eb565b612a34613f26565b600455565b333214612a755760405162461bcd60e51b815260206004820152600a6024820152693737ba1027b934b3b4b760b11b6044820152606401611281565b3360009081526008602052604090206003810154428115801590612a9857508181115b15612b19576005830154600090612aaf8484615b0f565b8560040154612abe9190615ac1565b612ac89190615a82565b90506000846002015485600101548660000154612ae59190615b0f565b612aef9190615b0f565b905080821115612afd578091505b81856001016000828254612b119190615a51565b909155505050505b81811115612b2957600383018190555b602b54836006015410612b735760405162461bcd60e51b81526020600482015260126024820152710e6e0cacac8aae0a8d2daca40d2e640dac2f60731b6044820152606401611281565b600683018054906000612b8583615af6565b91905055506000612b94614f74565b905084811115612be65760405162461bcd60e51b815260206004820152601860248201527f746f6b656e20616d6f756e7420697320746f6f206d75636800000000000000006044820152606401611281565b600c54602a54612c05916001600160a01b039081169133911684614555565b60028401546001850154855460009291612c1e91615b0f565b612c289190615b0f565b905060008560040154866005015483612c419190615ac1565b612c4b9190615a82565b60048701839055602954909150808211612ca75760405162461bcd60e51b815260206004820152601c60248201527f72656c656173654475726174696f6e20697320746f6f2073686f7274000000006044820152606401611281565b612cb18183615b0f565b6005880155600c5460408051632e05661b60e01b815290516001600160a01b0390921691632e05661b9160048082019260009290919082900301818387803b158015612cfc57600080fd5b505af1158015612d10573d6000803e3d6000fd5b505050505050505050505050565b6040805160028082526060820183526000928392839283926020830190803683375050600c5482519293506001600160a01b031691839150600090612d6557612d65615ae0565b6001600160a01b039283166020918202929092010152600a54825191169082906001908110612d9657612d96615ae0565b6001600160a01b03928316602091820292909201015260095460405163d06ca61f60e01b8152600092919091169063d06ca61f90612dda9089908690600401615700565b600060405180830381865afa158015612df7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612e1f9190810190615b26565b905080600181518110612e3457612e34615ae0565b6020026020010151945061271060175486612e4f9190615ac1565b612e599190615a82565b935061271060185486612e6c9190615ac1565b612e769190615a82565b9250612710612e83614ea6565b612e8d9085615ac1565b612e979190615a82565b9496939550505050565b601c546001600160a01b0316331480612ec457506000546001600160a01b031633145b80612ed95750600e546001600160a01b031633145b612ef55760405162461bcd60e51b8152600401611281906159eb565b612eff8282614fa5565b5050565b601c546001600160a01b0316331480612f2657506000546001600160a01b031633145b80612f3b5750600e546001600160a01b031633145b612f575760405162461bcd60e51b8152600401611281906159eb565b6017819055601954601854612710919061135c9084615a51565b601c546001600160a01b0316331480612f9457506000546001600160a01b031633145b80612fa95750600e546001600160a01b031633145b612fc55760405162461bcd60e51b8152600401611281906159eb565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b601c546001600160a01b031633148061300a57506000546001600160a01b031633145b8061301f5750600e546001600160a01b031633145b61303b5760405162461bcd60e51b8152600401611281906159eb565b6016805460ff1916911515919091179055565b601c546001600160a01b031633148061307157506000546001600160a01b031633145b806130865750600e546001600160a01b031633145b6130a25760405162461bcd60e51b8152600401611281906159eb565b601280546001600160a01b039092166001600160a01b0319909216821790556000908152600760205260409020805460ff19166001179055565b601c546001600160a01b03163314806130ff57506000546001600160a01b031633145b806131145750600e546001600160a01b031633145b6131305760405162461bcd60e51b8152600401611281906159eb565b601981905560185460175461271091839161135c9190615a51565b6000806000600d60009054906101000a90046001600160a01b03169050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156131a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cd9190615bd3565b50600c54600a546001600160701b0393841695509190921692506001600160a01b03918216911610156132055781945080935061320c565b8094508193505b5050509091565b3332146132575760405162461bcd60e51b815260206004820152601260248201527131b630b4b6a628103737ba1027b934b3b4b760711b6044820152606401611281565b336000908152600860205260409020600381015442901580159061327e5750816003015481115b15613304576000826005015483600301548361329a9190615b0f565b84600401546132a99190615ac1565b6132b39190615a82565b905060008360020154846001015485600001546132d09190615b0f565b6132da9190615b0f565b9050808211156132e8578091505b818460010160008282546132fc9190615a51565b909155505050505b600182015480156133ae57600d54613326906001600160a01b031633836141ed565b60008360010181905550808360020160008282546133449190615a51565b9091555050600c5460405163899d9c9d60e01b8152336004820152602481018390526001600160a01b039091169063899d9c9d90604401600060405180830381600087803b15801561339557600080fd5b505af11580156133a9573d6000803e3d6000fd5b505050505b82600301548211156133c257600383018290555b600c60009054906101000a90046001600160a01b03166001600160a01b0316632e05661b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561341257600080fd5b505af1158015613426573d6000803e3d6000fd5b50505050505050565b602454600081900361343e5750565b7f00000000000000000000000000000000000000000000000000000000000000004261346a8284615a51565b81101561347657505050565b6000826134838584615b0f565b61348d9190615a82565b90506134998382615ac1565b6134a39085615a51565b6024556025546134d3827f0000000000000000000000000000000000000000000000000000000000000000615cfc565b826026546134e19190615cfc565b6134eb9083615ac1565b6134f59190615a82565b6025555050505050565b601c546001600160a01b031633148061352257506000546001600160a01b031633145b806135375750600e546001600160a01b031633145b6135535760405162461bcd60e51b8152600401611281906159eb565b602955565b3332146135945760405162461bcd60e51b815260206004820152600a6024820152693737ba1027b934b3b4b760b11b6044820152606401611281565b60165460ff16156135cf5760405162461bcd60e51b8152602060048201526005602482015264706175736560d81b6044820152606401611281565b6012546135e69033906001600160a01b0316613d4d565b600c546135fe906001600160a01b0316333084614555565b600a546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a0823190602401602060405180830381865afa15801561364b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366f9190615a69565b60408051600280825260608201835292935060009290916020830190803683375050600c5482519293506001600160a01b0316918391506000906136b5576136b5615ae0565b6001600160a01b039283166020918202929092010152600a548251911690829060019081106136e6576136e6615ae0565b6001600160a01b039283166020918202929092010152600954604051635c11d79560e01b8152911690635c11d7959061372c908790600090869030904290600401615d08565b600060405180830381600087803b15801561374657600080fd5b505af115801561375a573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508491506001600160a01b038616906370a0823190602401602060405180830381865afa1580156137a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137cb9190615a69565b6137d59190615b0f565b90506000612710601754836137ea9190615ac1565b6137f49190615a82565b600a5490915061380e906001600160a01b031633836141ed565b6000612710601854846138219190615ac1565b61382b9190615a82565b905061383a3382600080614681565b613842613f26565b60007f0000000000000000000000000000000000000000000000000000000000000000602554836138739190615ac1565b61387d9190615a82565b905061388b33826000614009565b336000908152601b6020526040812080548392906138aa908490615a51565b9091555050601954600090612710906138c39087615ac1565b6138cd9190615a82565b600a54600e549192506138ed916001600160a01b039182169116836141ed565b600e54604051632841a14360e01b8152600481018390526001600160a01b0390911690632841a14390602401600060405180830381600087803b15801561393357600080fd5b505af1158015613947573d6000803e3d6000fd5b5050505060008184868861395b9190615b0f565b6139659190615b0f565b61396f9190615b0f565b600a54601c5491925061398f916001600160a01b039182169116836141ed565b600c60009054906101000a90046001600160a01b03166001600160a01b0316632e05661b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156139df57600080fd5b505af11580156139f3573d6000803e3d6000fd5b50506040518792508c915033907fed7a144fad14804d5c249145e3e0e2b63a9eb455b76aee5bc92d711e9bba3e4a90600090a450505050505050505050565b601d602052816000526040600020818154811061236c57600080fd5b601c546001600160a01b0316331480613a7157506000546001600160a01b031633145b80613a865750600e546001600160a01b031633145b613aa25760405162461bcd60e51b8152600401611281906159eb565b601254613ab99083906001600160a01b0316613d4d565b613ac1613f26565b612eff82826000614009565b6000806000806000600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b4c9190615a69565b600d546040516370a0823160e01b81523060048201529196506001600160a01b0316906370a0823190602401602060405180830381865afa158015613b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb99190615a69565b9350602b5492506028549150613bcd614f74565b90509091929394565b336000908152602d602052604090205460ff16613c055760405162461bcd60e51b815260040161128190615a14565b612eff8282613d4d565b613c17614323565b6001600160a01b038116613c7c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611281565b6113a481614480565b601c546001600160a01b0316331480613ca857506000546001600160a01b031633145b80613cbd5750600e546001600160a01b031633145b613cd95760405162461bcd60e51b8152600401611281906159eb565b602454600003613ce857426024555b6023805460ff19169055565b601c546001600160a01b0316331480613d1757506000546001600160a01b031633145b80613d2c5750600e546001600160a01b031633145b613d485760405162461bcd60e51b8152600401611281906159eb565b602655565b6001600160a01b0382166000908152600760205260409020805460ff166112e8576001600160a01b038216600003613db35760405162461bcd60e51b81526020600482015260096024820152680696e7669746f7220360bc1b6044820152606401611281565b6001600160a01b03821660009081526007602052604090205460ff16613e0d5760405162461bcd60e51b815260206004820152600f60248201526e696e7669746f72202141637469766560881b6044820152606401611281565b6001600160a01b038083166000818152601d60209081526040808320805460018181018355918552838520018054968a166001600160a01b03199788168117909155808552601e84528285208054881687179055600f84528285208054881687179055948452601083529083208054918201815583529082200180549093169091179091555b7f0000000000000000000000000000000000000000000000000000000000000000811015613f15576001600160a01b0383166000908152601560205260408120805460019290613ee4908490615a51565b90915550506001600160a01b039283166000908152600f6020526040902054909216918215613f1557600101613e93565b50805460ff19166001178155505050565b613f2e61342f565b6005546001904290808211613f4257505050565b6004830182905560028301546005840154808210613f61575050505050565b845460038601548115801590613f775750806000105b15613426576000613f888688615b0f565b613f929083615ac1565b90506000613fa08686615b0f565b905080821115613fae578091505b83613fc183670de0b6b3a7640000615ac1565b613fcb9190615a82565b896001016000828254613fde9190615a51565b9250508190555081896002016000828254613ff99190615a51565b9091555050505050505050505050565b6001600160a01b03831660009081526007602052604081209061402d9082906144d0565b600181015461403c8482615a51565b6001808401829055549091506140528582615a51565b600254909150670de0b6b3a764000061406b8285615ac1565b6140759190615a82565b600285015584156141e2577f00000000000000000000000000000000000000000000000000000000000000006000888180805b858110156141db576001600160a01b038085166000908152600f602052604090205416925082156141db576001600160a01b038316600090815260076020526040812095506140f89086906144d0565b60008181526011602052604081205461271090614115908f615ac1565b61411f9190615a82565b6001600160a01b03851660009081526013602052604081208054929350839290919061414c908490615a51565b90915550506001600160a01b038416600090815260146020526040812080548f9290614179908490615a51565b90915550506001860154925061418f8184615a51565b600187018190559250670de0b6b3a76400006141ab8985615ac1565b6141b59190615a82565b60028701556141c4818a615a51565b985083945050806141d490615af6565b90506140a8565b5050505050505b506001555050505050565b806000036141fa57505050565b6040516370a0823160e01b8152306004820152839082906001600160a01b038316906370a0823190602401602060405180830381865afa158015614242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142669190615a69565b10156142a95760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b6044820152606401611281565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905282169063a9059cbb906044016020604051808303816000875af11580156142f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061431c9190615d44565b5050505050565b6000546001600160a01b0316331461206e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611281565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916143d99190615d61565b6000604051808303816000865af19150503d8060008114614416576040519150601f19603f3d011682016040523d82523d6000602084013e61441b565b606091505b50915091508180156144455750805115806144455750808060200190518101906144459190615d44565b61431c5760405162461bcd60e51b815260206004820152600c60248201526b185c1c1c9bdd994819985a5b60a21b6044820152606401611281565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80156144de576144de613f26565b600182015415612eff576000670de0b6b3a7640000600180015484600101546145079190615ac1565b6145119190615a82565b905060008360020154826145259190615b0f565b90508015612845578184600201819055508084600301600082825461454a9190615a51565b909155505050505050565b6040516370a0823160e01b81526001600160a01b038481166004830152859183918316906370a0823190602401602060405180830381865afa15801561459f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145c39190615a69565b10156146065760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b6044820152606401611281565b6040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528216906323b872dd906064016020604051808303816000875af115801561465d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c059190615d44565b600c546040516370a0823160e01b81523060048201526001600160a01b0390911690819060009082906370a0823190602401602060405180830381865afa1580156146d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146f49190615a69565b600a546040805160028082526060820183529394506001600160a01b039092169260009291602083019080368337019050509050818160008151811061473c5761473c615ae0565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061477057614770615ae0565b6001600160a01b03928316602091820292909201015260095416635c11d79561479a60028b615a82565b898430426040518663ffffffff1660e01b81526004016147be959493929190615d08565b600060405180830381600087803b1580156147d857600080fd5b505af11580156147ec573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508591506001600160a01b038716906370a0823190602401602060405180830381865afa158015614839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061485d9190615a69565b6148679190615b0f565b905060008761488157601a546001600160a01b0316614883565b305b90506000600960009054906101000a90046001600160a01b03166001600160a01b031663e8e33700868a60028f6148ba9190615a82565b6040516001600160e01b031960e086901b1681526001600160a01b039384166004820152918316602483015260448201526064810187905260006084820181905260a482015290851660c48201524260e4820152610104016060604051808303816000875af1158015614931573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149559190615d9c565b92505050881561496e576149698c82615056565b612d10565b600c5460405163899d9c9d60e01b81526001600160a01b038481166004830152602482018490529091169063899d9c9d90604401600060405180830381600087803b1580156149bc57600080fd5b505af11580156149d0573d6000803e3d6000fd5b50505050505050505050505050505050565b6001600160a01b0382811660008181526022602052604080822054600e5491516370a0823160e01b815260048101949094529391929116906370a0823190602401602060405180830381865afa158015614a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a649190615a69565b90506000614a728385611c0d565b9050600083118015614a845750600082115b15614aa357614a938582615170565b614a9e858486615254565b61431c565b6001600160a01b038086166000908152601e6020526040812054909116905b6001600160a01b03821615801590614ad8575080155b15613426576001600160a01b0382811660008181526022602052604080822054600e5491516370a0823160e01b815260048101949094529391929116906370a0823190602401602060405180830381865afa158015614b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b5f9190615a69565b9050600082118015614b715750600081115b15614b9b5760019250614b848289611c0d565b9450614b908486615170565b614b9b84838a615254565b6001600160a01b038085166000818152601e60205260409020549091169003614bc75760009350614be6565b6001600160a01b039384166000908152601e6020526040902054909316925b5050614ac2565b6001600160a01b038216600090815260208052604081208054859290614c14908490615a51565b909155508190505b6001600160a01b03811615612845576001600160a01b0381166000908152601f602052604081208054869290614c53908490615a51565b90915550614c629050816126c7565b6001600160a01b038082166000818152601e60205260409020549091169003614c89575060005b6001600160a01b039081166000908152601e602052604090205416614c1c565b6001600160a01b0384166000908152601d6020908152604080832080548251818502810185019093528083528493830182828015614d1057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614cf2575b50505050509050848360058110614d2957614d29615ae0565b60200201518410614e98576000805b6001600160a01b0388166000908152601d6020526040902054811015614e955784600003614e1f577f000000000000000000000000000000000000000000000000000000000000000060206000858481518110614d9757614d97615ae0565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054601f6000868581518110614dd657614dd6615ae0565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054614e099190615a51565b10614e1a57614e1782615af6565b91505b614e71565b600160226000858481518110614e3757614e37615ae0565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205410614e7157614e6e82615af6565b91505b60028210614e855760019350505050614e9e565b614e8e81615af6565b9050614d38565b50505b60009150505b949350505050565b60255460245460009190808303614ebd5750919050565b7f000000000000000000000000000000000000000000000000000000000000000042614ee98284615a51565b811015614ef95750919392505050565b600082614f068584615b0f565b614f109190615a82565b60265490915060005b82811015614f68577f0000000000000000000000000000000000000000000000000000000000000000614f4c8389615ac1565b614f569190615a82565b9650614f6181615af6565b9050614f19565b50949695505050505050565b6000806000614f8161314b565b915091508181602854614f949190615ac1565b614f9e9190615a82565b9250505090565b604080516000808252602082019092526001600160a01b038416908390604051614fcf9190615d61565b60006040518083038185875af1925050503d806000811461500c576040519150601f19603f3d011682016040523d82523d6000602084013e615011565b606091505b50509050806112e85760405162461bcd60e51b8152602060048201526011602482015270195d1a081d1c985b9cd9995c8819985a5b607a1b6044820152606401611281565b6001600160a01b0382166000908152600860205260409020600381015442811580159061508257508181115b156151035760058301546000906150998484615b0f565b85600401546150a89190615ac1565b6150b29190615a82565b905060008460020154856001015486600001546150cf9190615b0f565b6150d99190615b0f565b9050808211156150e7578091505b818560010160008282546150fb9190615a51565b909155505050505b6002830154600184015484546000929161511c91615b0f565b6151269190615b0f565b90508484600001600082825461513c9190615a51565b9091555061514c90508582615a51565b6004850155602754600585015582821115611c055760038401829055505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000602554836151a19190615ac1565b6151ab9190615a82565b90506151b983826000614009565b6001600160a01b0383166000818152602260205260408082205490519092849284927fb6e5be43155b74262b7be6ccc5012bb6df33759145b8a6d4bc9f3e98c6d87b489190a4600a54615216906001600160a01b031685856141ed565b8281856001600160a01b03167f449ba527ea8f6ec8dc6af63b425e187506ac5b1635308d35ba1fe32da2b0d2e360405160405180910390a450505050565b6001600160a01b038084166000908152601e602052604081205490911690839061527f826001615a51565b90505b6001600160a01b0383161580159061529b575060058211155b15611c05576001600160a01b038316600090815260226020526040812054906152c48287611c0d565b9050838211806152d357508282145b156152f9576152e28582615170565b8193508160016152f29190615a51565b9250615318565b8382036153185761530a858261536a565b615315826001615a51565b93505b6001600160a01b038086166000818152601e602052604090205490911690036153445760009450615363565b6001600160a01b039485166000908152601e6020526040902054909416935b5050615282565b60007f00000000000000000000000000000000000000000000000000000000000000006025548361539b9190615ac1565b6153a59190615a82565b9050600060646153b6836014615ac1565b6153c09190615a82565b90506153ce84826000614009565b6001600160a01b0384166000818152602260205260408082205490519092849284927fb6e5be43155b74262b7be6ccc5012bb6df33759145b8a6d4bc9f3e98c6d87b489190a460006064615423866014615ac1565b61542d9190615a82565b600a54909150615447906001600160a01b031687836141ed565b8082876001600160a01b03167f449ba527ea8f6ec8dc6af63b425e187506ac5b1635308d35ba1fe32da2b0d2e360405160405180910390a4505050505050565b60006020828403121561549957600080fd5b5035919050565b6001600160a01b03811681146113a457600080fd5b80151581146113a457600080fd5b6000806000606084860312156154d857600080fd5b83356154e3816154a0565b92506020840135915060408401356154fa816154b5565b809150509250925092565b60006020828403121561551757600080fd5b8135615522816154a0565b9392505050565b60008060006060848603121561553e57600080fd5b8335615549816154a0565b92506020840135615559816154a0565b929592945050506040919091013590565b6000806040838503121561557d57600080fd5b8235615588816154a0565b946020939093013593505050565b600080600080600080600060e0888a0312156155b157600080fd5b87356155bc816154a0565b965060208801356155cc816154a0565b955060408801356155dc816154a0565b945060608801356155ec816154a0565b935060808801356155fc816154a0565b925060a088013561560c816154a0565b915060c088013561561c816154a0565b8091505092959891949750929550565b6000806040838503121561563f57600080fd5b50508035926020909101359150565b6000806040838503121561566157600080fd5b823561566c816154a0565b9150602083013561567c816154b5565b809150509250929050565b60008060006060848603121561569c57600080fd5b83356156a7816154a0565b95602085013595506040909401359392505050565b600081518084526020808501945080840160005b838110156156f55781516001600160a01b0316875295820195908201906001016156d0565b509495945050505050565b828152604060208201526000614e9e60408301846156bc565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561575257615752615719565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561578157615781615719565b604052919050565b600067ffffffffffffffff8211156157a3576157a3615719565b5060051b60200190565b600082601f8301126157be57600080fd5b813560206157d36157ce83615789565b615758565b82815260079290921b840181019181810190868411156157f257600080fd5b8286015b8481101561584e576080818903121561580f5760008081fd5b61581761572f565b8135615822816154b5565b8152818501358582015260408083013590820152606080830135908201528352918301916080016157f6565b509695505050505050565b6000806040838503121561586c57600080fd5b823567ffffffffffffffff8082111561588457600080fd5b818501915085601f83011261589857600080fd5b813560206158a86157ce83615789565b82815260059290921b840181019181810190898411156158c757600080fd5b948201945b838610156158ee5785356158df816154a0565b825294820194908201906158cc565b9650508601359250508082111561590457600080fd5b50615911858286016157ad565b9150509250929050565b60408152600061592e60408301856156bc565b82810360208481019190915284518083528582019282019060005b8181101561596557845183529383019391830191600101615949565b5090979650505050505050565b60008060006060848603121561598757600080fd5b833592506020840135915060408401356154fa816154a0565b6000602082840312156159b257600080fd5b8135615522816154b5565b600080604083850312156159d057600080fd5b82356159db816154a0565b9150602083013561567c816154a0565b6020808252600f908201526e1bdb9b1e481dda1a5d19481b1a5cdd608a1b604082015260600190565b6020808252600d908201526c1bdb9b195e481c1c9bda9958dd609a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115615a6457615a64615a3b565b500190565b600060208284031215615a7b57600080fd5b5051919050565b600082615a9f57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215615ab657600080fd5b8151615522816154a0565b6000816000190483118215151615615adb57615adb615a3b565b500290565b634e487b7160e01b600052603260045260246000fd5b600060018201615b0857615b08615a3b565b5060010190565b600082821015615b2157615b21615a3b565b500390565b60006020808385031215615b3957600080fd5b825167ffffffffffffffff811115615b5057600080fd5b8301601f81018513615b6157600080fd5b8051615b6f6157ce82615789565b81815260059190911b82018301908381019087831115615b8e57600080fd5b928401925b82841015615bac57835182529284019290840190615b93565b979650505050505050565b80516001600160701b0381168114615bce57600080fd5b919050565b600080600060608486031215615be857600080fd5b615bf184615bb7565b9250615bff60208501615bb7565b9150604084015163ffffffff811681146154fa57600080fd5b600181815b80851115615c53578160001904821115615c3957615c39615a3b565b80851615615c4657918102915b93841c9390800290615c1d565b509250929050565b600082615c6a57506001611c42565b81615c7757506000611c42565b8160018114615c8d5760028114615c9757615cb3565b6001915050611c42565b60ff841115615ca857615ca8615a3b565b50506001821b611c42565b5060208310610133831016604e8410600b8410161715615cd6575081810a611c42565b615ce08383615c18565b8060001904821115615cf457615cf4615a3b565b029392505050565b6000611c3f8383615c5b565b85815284602082015260a060408201526000615d2760a08301866156bc565b6001600160a01b0394909416606083015250608001529392505050565b600060208284031215615d5657600080fd5b8151615522816154b5565b6000825160005b81811015615d825760208186018101518583015201615d68565b81811115615d91576000828501525b509190910192915050565b600080600060608486031215615db157600080fd5b835192506020840151915060408401519050925092509256fea26469706673582212205660944f52ed7353e86d04c733b6f6b9841ffe901a725ac7373b5f27ad30501564736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106104ad5760003560e01c80638593b2b11161026b578063b79190451161014f578063e4849b32116100c1578063f0c52e4c11610085578063f0c52e4c14611165578063f12e6eb7146111a2578063f2fde38b146111c2578063f48544c3146111e2578063fcfff16f146111f8578063fd3cf8851461120d57600080fd5b8063e4849b321461109f578063e5d65633146110bf578063e697b5d8146110ef578063e9f221691461110f578063ec747edb1461112f57600080fd5b8063cef6632d11610113578063cef6632d14610ff2578063d5559e211461101f578063dde40dda14611035578063de44391a14611055578063e20ae3921461106a578063e3ca487a1461107f57600080fd5b8063b791904514610f28578063bc980f8c14610f48578063cc396be114610f7c578063ce4d9f1514610fb2578063ce56114314610fdc57600080fd5b8063a4e48ed8116101e8578063b1a8c459116101ac578063b1a8c45914610e72578063b272d7c314610e92578063b38dcd7114610eb2578063b612511014610ec8578063b64cf2d914610ee8578063b75265d314610f0857600080fd5b8063a4e48ed814610dc1578063a5b64e5e14610de1578063a779fe9214610e01578063aa1a8c6014610e17578063aa8b38d914610e5257600080fd5b806394f738a21161022f57806394f738a214610cb95780639551ae4414610cd957806395d4c7bb14610d5457806398300e1814610d81578063a40a789c14610da157600080fd5b80638593b2b114610c1b57806385dc300414610c3b5780638a56d30614610c5b5780638da5cb5b14610c7b5780638dbdbe6d14610c9957600080fd5b8063449fe5001161039257806369d037381161030f578063715018a6116102d3578063715018a614610b445780637512474e14610b595780637d3643b514610b795780637f15b36b14610ba7578063815a7beb14610bc75780638230af5a14610bfb57600080fd5b806369d0373814610a7d57806369da132614610a9d5780636ca9ee1b14610ad35780636e18b6db14610ae95780636ec42c2c14610b1657600080fd5b80635ca8e3f2116103565780635ca8e3f2146109ac5780635f84aecd146109cc5780636386c1c7146109e2578063681982a714610a3d578063692c7bf714610a5d57600080fd5b8063449fe500146108c95780634e71d92d146108f357806350f62da7146109085780635239a993146109345780635a2f3d091461095457600080fd5b80631b967ad41161042b57806333f5780e116103ef57806333f5780e1461079357806335876476146107b35780633a0dde51146107d35780633bf5f934146107f35780633c6369fc1461082757806343d726d6146108b457600080fd5b80631b967ad4146106bc5780631e8074b5146106f257806326e641ea14610726578063280e31cc146107465780632e0dd9c71461077357600080fd5b80630c28525d116104725780630c28525d1461059a578063119f3eb6146105ba578063125bfb661461061e5780631703dd121461063e5780631959a0021461065457600080fd5b80625a3ff1146104b9578063029a0c9d146104f65780630600ffc1146105185780630681c58d146105385780630b2ef5f71461055857600080fd5b366104b457005b600080fd5b3480156104c557600080fd5b50600d546104d9906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561050257600080fd5b50610516610511366004615487565b61122d565b005b34801561052457600080fd5b506105166105333660046154c3565b61128f565b34801561054457600080fd5b50610516610553366004615487565b6112ed565b34801561056457600080fd5b5061058c7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016104ed565b3480156105a657600080fd5b506105166105b5366004615487565b6113a7565b3480156105c657600080fd5b506105da6105d5366004615505565b611450565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915260a085015260c084015260e0830152610100820152610120016104ed565b34801561062a57600080fd5b50610516610639366004615529565b611584565b34801561064a57600080fd5b5061058c60255481565b34801561066057600080fd5b5061069a61066f366004615505565b600760205260009081526040902080546001820154600283015460039093015460ff90921692909184565b60408051941515855260208501939093529183015260608201526080016104ed565b3480156106c857600080fd5b5061058c6106d7366004615505565b6001600160a01b031660009081526010602052604090205490565b3480156106fe57600080fd5b5061058c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561073257600080fd5b50610516610741366004615487565b6115e3565b34801561075257600080fd5b5061058c610761366004615505565b60226020526000908152604090205481565b34801561077f57600080fd5b5061051661078e366004615487565b611667565b34801561079f57600080fd5b506105166107ae36600461556a565b6116c0565b3480156107bf57600080fd5b506105166107ce366004615596565b6116e4565b3480156107df57600080fd5b506105166107ee366004615487565b611aa1565b3480156107ff57600080fd5b5061058c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561083357600080fd5b5061087f610842366004615505565b6008602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016104ed565b3480156108c057600080fd5b50610516611afa565b3480156108d557600080fd5b506016546108e39060ff1681565b60405190151581526020016104ed565b3480156108ff57600080fd5b50610516611b5d565b34801561091457600080fd5b5061058c610923366004615505565b602080526000908152604090205481565b34801561094057600080fd5b5061058c61094f36600461562c565b611c0d565b34801561096057600080fd5b5060015460025460035460045460055460065461097f95949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016104ed565b3480156109b857600080fd5b506105166109c736600461562c565b611c48565b3480156109d857600080fd5b5061058c60265481565b3480156109ee57600080fd5b50610a026109fd366004615505565b611cae565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e0820152610100016104ed565b348015610a4957600080fd5b50610516610a58366004615505565b611e1e565b348015610a6957600080fd5b50610516610a7836600461564e565b611e94565b348015610a8957600080fd5b50610516610a98366004615505565b611f13565b348015610aa957600080fd5b506104d9610ab8366004615505565b600f602052600090815260409020546001600160a01b031681565b348015610adf57600080fd5b5061058c60275481565b348015610af557600080fd5b5061058c610b04366004615505565b60216020526000908152604090205481565b348015610b2257600080fd5b50610b36610b31366004615687565b611f3d565b6040516104ed929190615700565b348015610b5057600080fd5b5061051661205c565b348015610b6557600080fd5b50610516610b74366004615859565b612070565b348015610b8557600080fd5b50610b99610b94366004615505565b612168565b6040516104ed92919061591b565b348015610bb357600080fd5b50610516610bc2366004615487565b6122f7565b348015610bd357600080fd5b5061058c7f000000000000000000000000000000000000000000000000000000000000000081565b348015610c0757600080fd5b50601c546104d9906001600160a01b031681565b348015610c2757600080fd5b506104d9610c3636600461556a565b612350565b348015610c4757600080fd5b50610516610c56366004615505565b612388565b348015610c6757600080fd5b5061058c610c76366004615505565b6123fe565b348015610c8757600080fd5b506000546001600160a01b03166104d9565b348015610ca557600080fd5b50610516610cb4366004615972565b6124f3565b348015610cc557600080fd5b50610516610cd4366004615505565b6126c7565b348015610ce557600080fd5b50610cee61284b565b604080516001600160a01b039c8d168152602081019b909b52988b16988a01989098526060890196909652608088019490945260a087019290925260c086015260e0850152610100840152909216610120820152901515610140820152610160016104ed565b348015610d6057600080fd5b5061058c610d6f366004615505565b601f6020526000908152604090205481565b348015610d8d57600080fd5b50600e546104d9906001600160a01b031681565b348015610dad57600080fd5b5061058c610dbc366004615487565b6128ac565b348015610dcd57600080fd5b50610516610ddc366004615487565b6129d8565b348015610ded57600080fd5b50610516610dfc366004615487565b612a39565b348015610e0d57600080fd5b5061058c60295481565b348015610e2357600080fd5b50610e37610e32366004615487565b612d1e565b604080519384526020840192909252908201526060016104ed565b348015610e5e57600080fd5b50610516610e6d36600461556a565b612ea1565b348015610e7e57600080fd5b50610516610e8d366004615487565b612f03565b348015610e9e57600080fd5b50601a546104d9906001600160a01b031681565b348015610ebe57600080fd5b5061058c60195481565b348015610ed457600080fd5b50610516610ee3366004615505565b612f71565b348015610ef457600080fd5b50610516610f033660046159a0565b612fe7565b348015610f1457600080fd5b50610516610f23366004615505565b61304e565b348015610f3457600080fd5b50610516610f43366004615487565b6130dc565b348015610f5457600080fd5b5061058c7f000000000000000000000000000000000000000000000000000000000000000081565b348015610f8857600080fd5b506104d9610f97366004615505565b601e602052600090815260409020546001600160a01b031681565b348015610fbe57600080fd5b50610fc761314b565b604080519283526020830191909152016104ed565b348015610fe857600080fd5b5061058c60175481565b348015610ffe57600080fd5b5061058c61100d366004615487565b60116020526000908152604090205481565b34801561102b57600080fd5b5061058c60245481565b34801561104157600080fd5b50602a546104d9906001600160a01b031681565b34801561106157600080fd5b50610516613213565b34801561107657600080fd5b5061051661342f565b34801561108b57600080fd5b5061051661109a366004615487565b6134ff565b3480156110ab57600080fd5b506105166110ba366004615487565b613558565b3480156110cb57600080fd5b506108e36110da366004615505565b602d6020526000908152604090205460ff1681565b3480156110fb57600080fd5b506104d961110a36600461556a565b613a32565b34801561111b57600080fd5b5061051661112a36600461556a565b613a4e565b34801561113b57600080fd5b5061058c61114a366004615505565b6001600160a01b031660009081526022602052604090205490565b34801561117157600080fd5b5061117a613acd565b604080519586526020860194909452928401919091526060830152608082015260a0016104ed565b3480156111ae57600080fd5b506105166111bd3660046159bd565b613bd6565b3480156111ce57600080fd5b506105166111dd366004615505565b613c0f565b3480156111ee57600080fd5b5061058c60185481565b34801561120457600080fd5b50610516613c85565b34801561121957600080fd5b50610516611228366004615487565b613cf4565b601c546001600160a01b031633148061125057506000546001600160a01b031633145b806112655750600e546001600160a01b031633145b61128a5760405162461bcd60e51b8152600401611281906159eb565b60405180910390fd5b602455565b336000908152602d602052604090205460ff166112be5760405162461bcd60e51b815260040161128190615a14565b6012546112d59084906001600160a01b0316613d4d565b6112dd613f26565b6112e8838383614009565b505050565b601c546001600160a01b031633148061131057506000546001600160a01b031633145b806113255750600e546001600160a01b031633145b6113415760405162461bcd60e51b8152600401611281906159eb565b6018819055601954601754612710919061135c908490615a51565b6113669190615a51565b11156113a45760405162461bcd60e51b815260206004820152600d60248201526c72617465206f766572666c6f7760981b6044820152606401611281565b50565b601c546001600160a01b03163314806113ca57506000546001600160a01b031633145b806113df5750600e546001600160a01b031633145b6113fb5760405162461bcd60e51b8152600401611281906159eb565b6000811161144b5760405162461bcd60e51b815260206004820152601960248201527f72656c65617365206475726174696f6e206d757374203e2030000000000000006044820152606401611281565b602755565b6001600160a01b03818116600081815260086020526040808220805460018201546002830154600480850154600586015460068701546003880154600c5499516370a0823160e01b81529485019b909b52959a94999398939791969095948493919216906370a0823190602401602060405180830381865afa1580156114da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fe9190615a69565b600c54604051636eb1769f60e11b81526001600160a01b038e8116600483015230602483015292955091169063dd62ed3e90604401602060405180830381865afa158015611550573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115749190615a69565b9150509193959799909294969850565b601c546001600160a01b03163314806115a757506000546001600160a01b031633145b806115bc5750600e546001600160a01b031633145b6115d85760405162461bcd60e51b8152600401611281906159eb565b6112e88383836141ed565b336000908152602d602052604090205460ff166116125760405162461bcd60e51b815260040161128190615a14565b61161a613f26565b806001600501600082825461162f9190615a51565b9091555061165f90507f000000000000000000000000000000000000000000000000000000000000000082615a82565b600455602e55565b601c546001600160a01b031633148061168a57506000546001600160a01b031633145b8061169f5750600e546001600160a01b031633145b6116bb5760405162461bcd60e51b8152600401611281906159eb565b602555565b6116c8614323565b6001600160a01b03909116600090815260226020526040902055565b600054600160a81b900460ff161580801561170c57506000546001600160a01b90910460ff16105b8061172d5750303b15801561172d5750600054600160a01b900460ff166001145b6117905760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401611281565b6000805460ff60a01b1916600160a01b17905580156117bd576000805460ff60a81b1916600160a81b1790555b6023805460ff19166001179055600980546001600160a01b03808b166001600160a01b03199283168117909355600a80548b831690841617905568056bc75e2d63100000600b55600e8054898316908416179055600c8054918a16919092161790556040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa15801561185a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187e9190615aa4565b60405163e6a4390560e01b81526001600160a01b0389811660048301528881166024830152919091169063e6a4390590604401602060405180830381865afa1580156118ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f29190615aa4565b600d80546001600160a01b039283166001600160a01b0319918216179091554260055560128054928716929091168217905560009081526007602090815260408220805460ff19166001179055601190526103207f4ad3b33220dddc71b994a52d72c06b10862965f7d926534c05c00fb7e819e7b7556101f47f17bc176d2408558f6e4111feebc3cab4e16b63e967be91cde721f4c8a488b552556002905261012c7f08037d7b151cc412d25674a4e66b334d9ae9d2e5517a7feaae5cdb828bf1c62855681043561a88293000006028556119d0878960001961437d565b6119dd868960001961437d565b601a80546001600160a01b0385166001600160a01b03199182168117909255601c805482169092179091556003602b55602a805490911661dead179055611388601755610fa06018556101f46019556127106025556127746026556276a700602755620d2f00602955611a4f82614480565b8015611a97576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b601c546001600160a01b0316331480611ac457506000546001600160a01b031633145b80611ad95750600e546001600160a01b031633145b611af55760405162461bcd60e51b8152600401611281906159eb565b602b55565b601c546001600160a01b0316331480611b1d57506000546001600160a01b031633145b80611b325750600e546001600160a01b031633145b611b4e5760405162461bcd60e51b8152600401611281906159eb565b6023805460ff19166001179055565b336000908152600760205260409020611b778160016144d0565b60038101548015611ba157600c54611b99906001600160a01b031633836141ed565b600060038301555b600c60009054906101000a90046001600160a01b03166001600160a01b0316632e05661b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611bf157600080fd5b505af1158015611c05573d6000803e3d6000fd5b505050505050565b6000821580611c1c5750600583115b15611c2957506000611c42565b6064611c358484615ac1565b611c3f9190615a82565b90505b92915050565b601c546001600160a01b0316331480611c6b57506000546001600160a01b031633145b80611c805750600e546001600160a01b031633145b611c9c5760405162461bcd60e51b8152600401611281906159eb565b60009182526011602052604090912055565b6001600160a01b038181166000818152600760205260408082206001810154600a5492516370a0823160e01b8152600481019590955294929384938493849384938493849316906370a0823190602401602060405180830381865afa158015611d1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3f9190615a69565b600a54604051636eb1769f60e11b81526001600160a01b038d81166004830152306024830152929a5091169063dd62ed3e90604401602060405180830381865afa158015611d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db59190615a69565b96508060030154611dc58b6123fe565b611dcf9190615a51565b6001600160a01b03909a16600090815260136020908152604080832054601b8352818420546015845282852054601490945291909320549b9d9a9c999b999a9299909850909650945092505050565b601c546001600160a01b0316331480611e4157506000546001600160a01b031633145b80611e565750600e546001600160a01b031633145b611e725760405162461bcd60e51b8152600401611281906159eb565b602a80546001600160a01b0319166001600160a01b0392909216919091179055565b601c546001600160a01b0316331480611eb757506000546001600160a01b031633145b80611ecc5750600e546001600160a01b031633145b611ee85760405162461bcd60e51b8152600401611281906159eb565b6001600160a01b03919091166000908152602d60205260409020805460ff1916911515919091179055565b611f1b614323565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166000908152601060205260408120805460609190848403611f66578094505b8493508467ffffffffffffffff811115611f8257611f82615719565b604051908082528060200260200182016040528015611fab578160200160208202803683370190505b5092506000865b611fbc8789615a51565b81101561204f57828110611fd557509350612054915050565b838181548110611fe757611fe7615ae0565b9060005260206000200160009054906101000a90046001600160a01b031685838151811061201757612017615ae0565b6001600160a01b03909216602092830291909101909101528161203981615af6565b925050808061204790615af6565b915050611fb2565b505050505b935093915050565b612064614323565b61206e6000614480565b565b612078614323565b80518251146120c95760405162461bcd60e51b815260206004820152601a60248201527f4172726179206c656e6774687320646f206e6f74206d617463680000000000006044820152606401611281565b60005b82518110156112e8578181815181106120e7576120e7615ae0565b60200260200101516007600085848151811061210557612105615ae0565b6020908102919091018101516001600160a01b031682528181019290925260409081016000208351815460ff191690151517815591830151600183015582015160028201556060909101516003909101558061216081615af6565b9150506120cc565b6001600160a01b0381166000908152601d60205260409020805460609182918067ffffffffffffffff8111156121a0576121a0615719565b6040519080825280602002602001820160405280156121c9578160200160208202803683370190505b5093508067ffffffffffffffff8111156121e5576121e5615719565b60405190808252806020026020018201604052801561220e578160200160208202803683370190505b5092506000805b828110156122ee5782811061222d5750505050915091565b600084828154811061224157612241615ae0565b9060005260206000200160009054906101000a90046001600160a01b031690508087848151811061227457612274615ae0565b6001600160a01b039283166020918202929092018101919091529082166000908152601f82526040808220549280529020546122b09190615a51565b8684815181106122c2576122c2615ae0565b6020908102919091010152826122d781615af6565b9350505080806122e690615af6565b915050612215565b50505050915091565b601c546001600160a01b031633148061231a57506000546001600160a01b031633145b8061232f5750600e546001600160a01b031633145b61234b5760405162461bcd60e51b8152600401611281906159eb565b602855565b6010602052816000526040600020818154811061236c57600080fd5b6000918252602090912001546001600160a01b03169150829050565b601c546001600160a01b03163314806123ab57506000546001600160a01b031633145b806123c05750600e546001600160a01b031633145b6123dc5760405162461bcd60e51b8152600401611281906159eb565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600760205260408120600181810154909190156124ec5760048201544290808211156124e957600061243f8284615b0f565b856003015461244e9190615ac1565b6005860154600287015491925090600081831161246c576000612476565b6124768284615b0f565b90508084116124855783612487565b805b6002880154895491955090670de0b6b3a7640000906124a68783615ac1565b6124b09190615a82565b8a600101546124bf9190615a51565b89600101546124ce9190615ac1565b6124d89190615a82565b6124e29190615b0f565b9850505050505b50505b5050919050565b60235460ff16156125365760405162461bcd60e51b815260206004820152600d60248201526c6465706f73697420706175736560981b6044820152606401611281565b600b5483101561257a5760405162461bcd60e51b815260206004820152600f60248201526e6465706f73697420746f6f206c6f7760881b6044820152606401611281565b3383602c600082825461258d9190615a51565b9091555061259d90508183613d4d565b600a546125b5906001600160a01b0316823087614555565b6125c28185856001614681565b6125ca613f26565b61260e817f0000000000000000000000000000000000000000000000000000000000000000602554876125fd9190615ac1565b6126079190615a82565b6001614009565b600c60009054906101000a90046001600160a01b03166001600160a01b0316632e05661b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561265e57600080fd5b505af1158015612672573d6000803e3d6000fd5b5050505061268082856149e2565b61268b848284614bed565b60405184906001600160a01b038316907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c90600090a350505050565b6001600160a01b0381166000908152601d6020526040902054600110156113a4576001600160a01b03811660009081526020808052604080832054601f9092528220546127149190615a51565b6001600160a01b03831660009081526022602052604080822054815160a08101909252929350806127667f00000000000000000000000000000000000000000000000000000000000000006002615ac1565b81526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f0000000000000000000000000000000000000000000000000000000000000000815250905061280f84828585614ca9565b801561281b5750600582105b156128455761282b826001615a51565b6001600160a01b0385166000908152602260205260409020555b50505050565b600a54600c54602c54600154602e546001600160a01b0394851694601294169284929091600080808061287c614ea6565b600b546012546023549d9e9c9d9b9c9a9b999a9899979892979196506001600160a01b0316945060ff1692509050565b604080516002808252606082018352600092839291906020830190803683375050600a5482519293506001600160a01b0316918391506000906128f1576128f1615ae0565b6001600160a01b039283166020918202929092010152600c5482519116908290600190811061292257612922615ae0565b6001600160a01b0392831660209182029290920101526009546000911663d06ca61f61294f600287615a82565b846040518363ffffffff1660e01b815260040161296d929190615700565b600060405180830381865afa15801561298a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129b29190810190615b26565b9050806001815181106129c7576129c7615ae0565b602002602001015192505050919050565b601c546001600160a01b03163314806129fb57506000546001600160a01b031633145b80612a105750600e546001600160a01b031633145b612a2c5760405162461bcd60e51b8152600401611281906159eb565b612a34613f26565b600455565b333214612a755760405162461bcd60e51b815260206004820152600a6024820152693737ba1027b934b3b4b760b11b6044820152606401611281565b3360009081526008602052604090206003810154428115801590612a9857508181115b15612b19576005830154600090612aaf8484615b0f565b8560040154612abe9190615ac1565b612ac89190615a82565b90506000846002015485600101548660000154612ae59190615b0f565b612aef9190615b0f565b905080821115612afd578091505b81856001016000828254612b119190615a51565b909155505050505b81811115612b2957600383018190555b602b54836006015410612b735760405162461bcd60e51b81526020600482015260126024820152710e6e0cacac8aae0a8d2daca40d2e640dac2f60731b6044820152606401611281565b600683018054906000612b8583615af6565b91905055506000612b94614f74565b905084811115612be65760405162461bcd60e51b815260206004820152601860248201527f746f6b656e20616d6f756e7420697320746f6f206d75636800000000000000006044820152606401611281565b600c54602a54612c05916001600160a01b039081169133911684614555565b60028401546001850154855460009291612c1e91615b0f565b612c289190615b0f565b905060008560040154866005015483612c419190615ac1565b612c4b9190615a82565b60048701839055602954909150808211612ca75760405162461bcd60e51b815260206004820152601c60248201527f72656c656173654475726174696f6e20697320746f6f2073686f7274000000006044820152606401611281565b612cb18183615b0f565b6005880155600c5460408051632e05661b60e01b815290516001600160a01b0390921691632e05661b9160048082019260009290919082900301818387803b158015612cfc57600080fd5b505af1158015612d10573d6000803e3d6000fd5b505050505050505050505050565b6040805160028082526060820183526000928392839283926020830190803683375050600c5482519293506001600160a01b031691839150600090612d6557612d65615ae0565b6001600160a01b039283166020918202929092010152600a54825191169082906001908110612d9657612d96615ae0565b6001600160a01b03928316602091820292909201015260095460405163d06ca61f60e01b8152600092919091169063d06ca61f90612dda9089908690600401615700565b600060405180830381865afa158015612df7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612e1f9190810190615b26565b905080600181518110612e3457612e34615ae0565b6020026020010151945061271060175486612e4f9190615ac1565b612e599190615a82565b935061271060185486612e6c9190615ac1565b612e769190615a82565b9250612710612e83614ea6565b612e8d9085615ac1565b612e979190615a82565b9496939550505050565b601c546001600160a01b0316331480612ec457506000546001600160a01b031633145b80612ed95750600e546001600160a01b031633145b612ef55760405162461bcd60e51b8152600401611281906159eb565b612eff8282614fa5565b5050565b601c546001600160a01b0316331480612f2657506000546001600160a01b031633145b80612f3b5750600e546001600160a01b031633145b612f575760405162461bcd60e51b8152600401611281906159eb565b6017819055601954601854612710919061135c9084615a51565b601c546001600160a01b0316331480612f9457506000546001600160a01b031633145b80612fa95750600e546001600160a01b031633145b612fc55760405162461bcd60e51b8152600401611281906159eb565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b601c546001600160a01b031633148061300a57506000546001600160a01b031633145b8061301f5750600e546001600160a01b031633145b61303b5760405162461bcd60e51b8152600401611281906159eb565b6016805460ff1916911515919091179055565b601c546001600160a01b031633148061307157506000546001600160a01b031633145b806130865750600e546001600160a01b031633145b6130a25760405162461bcd60e51b8152600401611281906159eb565b601280546001600160a01b039092166001600160a01b0319909216821790556000908152600760205260409020805460ff19166001179055565b601c546001600160a01b03163314806130ff57506000546001600160a01b031633145b806131145750600e546001600160a01b031633145b6131305760405162461bcd60e51b8152600401611281906159eb565b601981905560185460175461271091839161135c9190615a51565b6000806000600d60009054906101000a90046001600160a01b03169050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156131a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cd9190615bd3565b50600c54600a546001600160701b0393841695509190921692506001600160a01b03918216911610156132055781945080935061320c565b8094508193505b5050509091565b3332146132575760405162461bcd60e51b815260206004820152601260248201527131b630b4b6a628103737ba1027b934b3b4b760711b6044820152606401611281565b336000908152600860205260409020600381015442901580159061327e5750816003015481115b15613304576000826005015483600301548361329a9190615b0f565b84600401546132a99190615ac1565b6132b39190615a82565b905060008360020154846001015485600001546132d09190615b0f565b6132da9190615b0f565b9050808211156132e8578091505b818460010160008282546132fc9190615a51565b909155505050505b600182015480156133ae57600d54613326906001600160a01b031633836141ed565b60008360010181905550808360020160008282546133449190615a51565b9091555050600c5460405163899d9c9d60e01b8152336004820152602481018390526001600160a01b039091169063899d9c9d90604401600060405180830381600087803b15801561339557600080fd5b505af11580156133a9573d6000803e3d6000fd5b505050505b82600301548211156133c257600383018290555b600c60009054906101000a90046001600160a01b03166001600160a01b0316632e05661b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561341257600080fd5b505af1158015613426573d6000803e3d6000fd5b50505050505050565b602454600081900361343e5750565b7f00000000000000000000000000000000000000000000000000000000000000004261346a8284615a51565b81101561347657505050565b6000826134838584615b0f565b61348d9190615a82565b90506134998382615ac1565b6134a39085615a51565b6024556025546134d3827f0000000000000000000000000000000000000000000000000000000000000000615cfc565b826026546134e19190615cfc565b6134eb9083615ac1565b6134f59190615a82565b6025555050505050565b601c546001600160a01b031633148061352257506000546001600160a01b031633145b806135375750600e546001600160a01b031633145b6135535760405162461bcd60e51b8152600401611281906159eb565b602955565b3332146135945760405162461bcd60e51b815260206004820152600a6024820152693737ba1027b934b3b4b760b11b6044820152606401611281565b60165460ff16156135cf5760405162461bcd60e51b8152602060048201526005602482015264706175736560d81b6044820152606401611281565b6012546135e69033906001600160a01b0316613d4d565b600c546135fe906001600160a01b0316333084614555565b600a546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a0823190602401602060405180830381865afa15801561364b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366f9190615a69565b60408051600280825260608201835292935060009290916020830190803683375050600c5482519293506001600160a01b0316918391506000906136b5576136b5615ae0565b6001600160a01b039283166020918202929092010152600a548251911690829060019081106136e6576136e6615ae0565b6001600160a01b039283166020918202929092010152600954604051635c11d79560e01b8152911690635c11d7959061372c908790600090869030904290600401615d08565b600060405180830381600087803b15801561374657600080fd5b505af115801561375a573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508491506001600160a01b038616906370a0823190602401602060405180830381865afa1580156137a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137cb9190615a69565b6137d59190615b0f565b90506000612710601754836137ea9190615ac1565b6137f49190615a82565b600a5490915061380e906001600160a01b031633836141ed565b6000612710601854846138219190615ac1565b61382b9190615a82565b905061383a3382600080614681565b613842613f26565b60007f0000000000000000000000000000000000000000000000000000000000000000602554836138739190615ac1565b61387d9190615a82565b905061388b33826000614009565b336000908152601b6020526040812080548392906138aa908490615a51565b9091555050601954600090612710906138c39087615ac1565b6138cd9190615a82565b600a54600e549192506138ed916001600160a01b039182169116836141ed565b600e54604051632841a14360e01b8152600481018390526001600160a01b0390911690632841a14390602401600060405180830381600087803b15801561393357600080fd5b505af1158015613947573d6000803e3d6000fd5b5050505060008184868861395b9190615b0f565b6139659190615b0f565b61396f9190615b0f565b600a54601c5491925061398f916001600160a01b039182169116836141ed565b600c60009054906101000a90046001600160a01b03166001600160a01b0316632e05661b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156139df57600080fd5b505af11580156139f3573d6000803e3d6000fd5b50506040518792508c915033907fed7a144fad14804d5c249145e3e0e2b63a9eb455b76aee5bc92d711e9bba3e4a90600090a450505050505050505050565b601d602052816000526040600020818154811061236c57600080fd5b601c546001600160a01b0316331480613a7157506000546001600160a01b031633145b80613a865750600e546001600160a01b031633145b613aa25760405162461bcd60e51b8152600401611281906159eb565b601254613ab99083906001600160a01b0316613d4d565b613ac1613f26565b612eff82826000614009565b6000806000806000600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b4c9190615a69565b600d546040516370a0823160e01b81523060048201529196506001600160a01b0316906370a0823190602401602060405180830381865afa158015613b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb99190615a69565b9350602b5492506028549150613bcd614f74565b90509091929394565b336000908152602d602052604090205460ff16613c055760405162461bcd60e51b815260040161128190615a14565b612eff8282613d4d565b613c17614323565b6001600160a01b038116613c7c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611281565b6113a481614480565b601c546001600160a01b0316331480613ca857506000546001600160a01b031633145b80613cbd5750600e546001600160a01b031633145b613cd95760405162461bcd60e51b8152600401611281906159eb565b602454600003613ce857426024555b6023805460ff19169055565b601c546001600160a01b0316331480613d1757506000546001600160a01b031633145b80613d2c5750600e546001600160a01b031633145b613d485760405162461bcd60e51b8152600401611281906159eb565b602655565b6001600160a01b0382166000908152600760205260409020805460ff166112e8576001600160a01b038216600003613db35760405162461bcd60e51b81526020600482015260096024820152680696e7669746f7220360bc1b6044820152606401611281565b6001600160a01b03821660009081526007602052604090205460ff16613e0d5760405162461bcd60e51b815260206004820152600f60248201526e696e7669746f72202141637469766560881b6044820152606401611281565b6001600160a01b038083166000818152601d60209081526040808320805460018181018355918552838520018054968a166001600160a01b03199788168117909155808552601e84528285208054881687179055600f84528285208054881687179055948452601083529083208054918201815583529082200180549093169091179091555b7f0000000000000000000000000000000000000000000000000000000000000000811015613f15576001600160a01b0383166000908152601560205260408120805460019290613ee4908490615a51565b90915550506001600160a01b039283166000908152600f6020526040902054909216918215613f1557600101613e93565b50805460ff19166001178155505050565b613f2e61342f565b6005546001904290808211613f4257505050565b6004830182905560028301546005840154808210613f61575050505050565b845460038601548115801590613f775750806000105b15613426576000613f888688615b0f565b613f929083615ac1565b90506000613fa08686615b0f565b905080821115613fae578091505b83613fc183670de0b6b3a7640000615ac1565b613fcb9190615a82565b896001016000828254613fde9190615a51565b9250508190555081896002016000828254613ff99190615a51565b9091555050505050505050505050565b6001600160a01b03831660009081526007602052604081209061402d9082906144d0565b600181015461403c8482615a51565b6001808401829055549091506140528582615a51565b600254909150670de0b6b3a764000061406b8285615ac1565b6140759190615a82565b600285015584156141e2577f00000000000000000000000000000000000000000000000000000000000000006000888180805b858110156141db576001600160a01b038085166000908152600f602052604090205416925082156141db576001600160a01b038316600090815260076020526040812095506140f89086906144d0565b60008181526011602052604081205461271090614115908f615ac1565b61411f9190615a82565b6001600160a01b03851660009081526013602052604081208054929350839290919061414c908490615a51565b90915550506001600160a01b038416600090815260146020526040812080548f9290614179908490615a51565b90915550506001860154925061418f8184615a51565b600187018190559250670de0b6b3a76400006141ab8985615ac1565b6141b59190615a82565b60028701556141c4818a615a51565b985083945050806141d490615af6565b90506140a8565b5050505050505b506001555050505050565b806000036141fa57505050565b6040516370a0823160e01b8152306004820152839082906001600160a01b038316906370a0823190602401602060405180830381865afa158015614242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142669190615a69565b10156142a95760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b6044820152606401611281565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905282169063a9059cbb906044016020604051808303816000875af11580156142f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061431c9190615d44565b5050505050565b6000546001600160a01b0316331461206e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611281565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916143d99190615d61565b6000604051808303816000865af19150503d8060008114614416576040519150601f19603f3d011682016040523d82523d6000602084013e61441b565b606091505b50915091508180156144455750805115806144455750808060200190518101906144459190615d44565b61431c5760405162461bcd60e51b815260206004820152600c60248201526b185c1c1c9bdd994819985a5b60a21b6044820152606401611281565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80156144de576144de613f26565b600182015415612eff576000670de0b6b3a7640000600180015484600101546145079190615ac1565b6145119190615a82565b905060008360020154826145259190615b0f565b90508015612845578184600201819055508084600301600082825461454a9190615a51565b909155505050505050565b6040516370a0823160e01b81526001600160a01b038481166004830152859183918316906370a0823190602401602060405180830381865afa15801561459f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145c39190615a69565b10156146065760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b6044820152606401611281565b6040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528216906323b872dd906064016020604051808303816000875af115801561465d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c059190615d44565b600c546040516370a0823160e01b81523060048201526001600160a01b0390911690819060009082906370a0823190602401602060405180830381865afa1580156146d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146f49190615a69565b600a546040805160028082526060820183529394506001600160a01b039092169260009291602083019080368337019050509050818160008151811061473c5761473c615ae0565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061477057614770615ae0565b6001600160a01b03928316602091820292909201015260095416635c11d79561479a60028b615a82565b898430426040518663ffffffff1660e01b81526004016147be959493929190615d08565b600060405180830381600087803b1580156147d857600080fd5b505af11580156147ec573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508591506001600160a01b038716906370a0823190602401602060405180830381865afa158015614839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061485d9190615a69565b6148679190615b0f565b905060008761488157601a546001600160a01b0316614883565b305b90506000600960009054906101000a90046001600160a01b03166001600160a01b031663e8e33700868a60028f6148ba9190615a82565b6040516001600160e01b031960e086901b1681526001600160a01b039384166004820152918316602483015260448201526064810187905260006084820181905260a482015290851660c48201524260e4820152610104016060604051808303816000875af1158015614931573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149559190615d9c565b92505050881561496e576149698c82615056565b612d10565b600c5460405163899d9c9d60e01b81526001600160a01b038481166004830152602482018490529091169063899d9c9d90604401600060405180830381600087803b1580156149bc57600080fd5b505af11580156149d0573d6000803e3d6000fd5b50505050505050505050505050505050565b6001600160a01b0382811660008181526022602052604080822054600e5491516370a0823160e01b815260048101949094529391929116906370a0823190602401602060405180830381865afa158015614a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a649190615a69565b90506000614a728385611c0d565b9050600083118015614a845750600082115b15614aa357614a938582615170565b614a9e858486615254565b61431c565b6001600160a01b038086166000908152601e6020526040812054909116905b6001600160a01b03821615801590614ad8575080155b15613426576001600160a01b0382811660008181526022602052604080822054600e5491516370a0823160e01b815260048101949094529391929116906370a0823190602401602060405180830381865afa158015614b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b5f9190615a69565b9050600082118015614b715750600081115b15614b9b5760019250614b848289611c0d565b9450614b908486615170565b614b9b84838a615254565b6001600160a01b038085166000818152601e60205260409020549091169003614bc75760009350614be6565b6001600160a01b039384166000908152601e6020526040902054909316925b5050614ac2565b6001600160a01b038216600090815260208052604081208054859290614c14908490615a51565b909155508190505b6001600160a01b03811615612845576001600160a01b0381166000908152601f602052604081208054869290614c53908490615a51565b90915550614c629050816126c7565b6001600160a01b038082166000818152601e60205260409020549091169003614c89575060005b6001600160a01b039081166000908152601e602052604090205416614c1c565b6001600160a01b0384166000908152601d6020908152604080832080548251818502810185019093528083528493830182828015614d1057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614cf2575b50505050509050848360058110614d2957614d29615ae0565b60200201518410614e98576000805b6001600160a01b0388166000908152601d6020526040902054811015614e955784600003614e1f577f000000000000000000000000000000000000000000000000000000000000000060206000858481518110614d9757614d97615ae0565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054601f6000868581518110614dd657614dd6615ae0565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054614e099190615a51565b10614e1a57614e1782615af6565b91505b614e71565b600160226000858481518110614e3757614e37615ae0565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205410614e7157614e6e82615af6565b91505b60028210614e855760019350505050614e9e565b614e8e81615af6565b9050614d38565b50505b60009150505b949350505050565b60255460245460009190808303614ebd5750919050565b7f000000000000000000000000000000000000000000000000000000000000000042614ee98284615a51565b811015614ef95750919392505050565b600082614f068584615b0f565b614f109190615a82565b60265490915060005b82811015614f68577f0000000000000000000000000000000000000000000000000000000000000000614f4c8389615ac1565b614f569190615a82565b9650614f6181615af6565b9050614f19565b50949695505050505050565b6000806000614f8161314b565b915091508181602854614f949190615ac1565b614f9e9190615a82565b9250505090565b604080516000808252602082019092526001600160a01b038416908390604051614fcf9190615d61565b60006040518083038185875af1925050503d806000811461500c576040519150601f19603f3d011682016040523d82523d6000602084013e615011565b606091505b50509050806112e85760405162461bcd60e51b8152602060048201526011602482015270195d1a081d1c985b9cd9995c8819985a5b607a1b6044820152606401611281565b6001600160a01b0382166000908152600860205260409020600381015442811580159061508257508181115b156151035760058301546000906150998484615b0f565b85600401546150a89190615ac1565b6150b29190615a82565b905060008460020154856001015486600001546150cf9190615b0f565b6150d99190615b0f565b9050808211156150e7578091505b818560010160008282546150fb9190615a51565b909155505050505b6002830154600184015484546000929161511c91615b0f565b6151269190615b0f565b90508484600001600082825461513c9190615a51565b9091555061514c90508582615a51565b6004850155602754600585015582821115611c055760038401829055505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000602554836151a19190615ac1565b6151ab9190615a82565b90506151b983826000614009565b6001600160a01b0383166000818152602260205260408082205490519092849284927fb6e5be43155b74262b7be6ccc5012bb6df33759145b8a6d4bc9f3e98c6d87b489190a4600a54615216906001600160a01b031685856141ed565b8281856001600160a01b03167f449ba527ea8f6ec8dc6af63b425e187506ac5b1635308d35ba1fe32da2b0d2e360405160405180910390a450505050565b6001600160a01b038084166000908152601e602052604081205490911690839061527f826001615a51565b90505b6001600160a01b0383161580159061529b575060058211155b15611c05576001600160a01b038316600090815260226020526040812054906152c48287611c0d565b9050838211806152d357508282145b156152f9576152e28582615170565b8193508160016152f29190615a51565b9250615318565b8382036153185761530a858261536a565b615315826001615a51565b93505b6001600160a01b038086166000818152601e602052604090205490911690036153445760009450615363565b6001600160a01b039485166000908152601e6020526040902054909416935b5050615282565b60007f00000000000000000000000000000000000000000000000000000000000000006025548361539b9190615ac1565b6153a59190615a82565b9050600060646153b6836014615ac1565b6153c09190615a82565b90506153ce84826000614009565b6001600160a01b0384166000818152602260205260408082205490519092849284927fb6e5be43155b74262b7be6ccc5012bb6df33759145b8a6d4bc9f3e98c6d87b489190a460006064615423866014615ac1565b61542d9190615a82565b600a54909150615447906001600160a01b031687836141ed565b8082876001600160a01b03167f449ba527ea8f6ec8dc6af63b425e187506ac5b1635308d35ba1fe32da2b0d2e360405160405180910390a4505050505050565b60006020828403121561549957600080fd5b5035919050565b6001600160a01b03811681146113a457600080fd5b80151581146113a457600080fd5b6000806000606084860312156154d857600080fd5b83356154e3816154a0565b92506020840135915060408401356154fa816154b5565b809150509250925092565b60006020828403121561551757600080fd5b8135615522816154a0565b9392505050565b60008060006060848603121561553e57600080fd5b8335615549816154a0565b92506020840135615559816154a0565b929592945050506040919091013590565b6000806040838503121561557d57600080fd5b8235615588816154a0565b946020939093013593505050565b600080600080600080600060e0888a0312156155b157600080fd5b87356155bc816154a0565b965060208801356155cc816154a0565b955060408801356155dc816154a0565b945060608801356155ec816154a0565b935060808801356155fc816154a0565b925060a088013561560c816154a0565b915060c088013561561c816154a0565b8091505092959891949750929550565b6000806040838503121561563f57600080fd5b50508035926020909101359150565b6000806040838503121561566157600080fd5b823561566c816154a0565b9150602083013561567c816154b5565b809150509250929050565b60008060006060848603121561569c57600080fd5b83356156a7816154a0565b95602085013595506040909401359392505050565b600081518084526020808501945080840160005b838110156156f55781516001600160a01b0316875295820195908201906001016156d0565b509495945050505050565b828152604060208201526000614e9e60408301846156bc565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561575257615752615719565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561578157615781615719565b604052919050565b600067ffffffffffffffff8211156157a3576157a3615719565b5060051b60200190565b600082601f8301126157be57600080fd5b813560206157d36157ce83615789565b615758565b82815260079290921b840181019181810190868411156157f257600080fd5b8286015b8481101561584e576080818903121561580f5760008081fd5b61581761572f565b8135615822816154b5565b8152818501358582015260408083013590820152606080830135908201528352918301916080016157f6565b509695505050505050565b6000806040838503121561586c57600080fd5b823567ffffffffffffffff8082111561588457600080fd5b818501915085601f83011261589857600080fd5b813560206158a86157ce83615789565b82815260059290921b840181019181810190898411156158c757600080fd5b948201945b838610156158ee5785356158df816154a0565b825294820194908201906158cc565b9650508601359250508082111561590457600080fd5b50615911858286016157ad565b9150509250929050565b60408152600061592e60408301856156bc565b82810360208481019190915284518083528582019282019060005b8181101561596557845183529383019391830191600101615949565b5090979650505050505050565b60008060006060848603121561598757600080fd5b833592506020840135915060408401356154fa816154a0565b6000602082840312156159b257600080fd5b8135615522816154b5565b600080604083850312156159d057600080fd5b82356159db816154a0565b9150602083013561567c816154a0565b6020808252600f908201526e1bdb9b1e481dda1a5d19481b1a5cdd608a1b604082015260600190565b6020808252600d908201526c1bdb9b195e481c1c9bda9958dd609a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115615a6457615a64615a3b565b500190565b600060208284031215615a7b57600080fd5b5051919050565b600082615a9f57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215615ab657600080fd5b8151615522816154a0565b6000816000190483118215151615615adb57615adb615a3b565b500290565b634e487b7160e01b600052603260045260246000fd5b600060018201615b0857615b08615a3b565b5060010190565b600082821015615b2157615b21615a3b565b500390565b60006020808385031215615b3957600080fd5b825167ffffffffffffffff811115615b5057600080fd5b8301601f81018513615b6157600080fd5b8051615b6f6157ce82615789565b81815260059190911b82018301908381019087831115615b8e57600080fd5b928401925b82841015615bac57835182529284019290840190615b93565b979650505050505050565b80516001600160701b0381168114615bce57600080fd5b919050565b600080600060608486031215615be857600080fd5b615bf184615bb7565b9250615bff60208501615bb7565b9150604084015163ffffffff811681146154fa57600080fd5b600181815b80851115615c53578160001904821115615c3957615c39615a3b565b80851615615c4657918102915b93841c9390800290615c1d565b509250929050565b600082615c6a57506001611c42565b81615c7757506000611c42565b8160018114615c8d5760028114615c9757615cb3565b6001915050611c42565b60ff841115615ca857615ca8615a3b565b50506001821b611c42565b5060208310610133831016604e8410600b8410161715615cd6575081810a611c42565b615ce08383615c18565b8060001904821115615cf457615cf4615a3b565b029392505050565b6000611c3f8383615c5b565b85815284602082015260a060408201526000615d2760a08301866156bc565b6001600160a01b0394909416606083015250608001529392505050565b600060208284031215615d5657600080fd5b8151615522816154b5565b6000825160005b81811015615d825760208186018101518583015201615d68565b81811115615d91576000828501525b509190910192915050565b600080600060608486031215615db157600080fd5b835192506020840151915060408401519050925092509256fea26469706673582212205660944f52ed7353e86d04c733b6f6b9841ffe901a725ac7373b5f27ad30501564736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 506,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 774,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "poolInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(PoolInfo)756_storage"
      },
      {
        "astId": 779,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "userInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(UserInfo)743_storage)"
      },
      {
        "astId": 784,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_userLPInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UserLPInfo)771_storage)"
      },
      {
        "astId": 787,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_swapRouter",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ISwapRouter)4917"
      },
      {
        "astId": 789,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_usdt",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 791,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_minAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 793,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_mintRewardToken",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 795,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lp",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 798,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_nft",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(INFT)4808"
      },
      {
        "astId": 802,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_invitor",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 807,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_binder",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 811,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_inviteFee",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 816,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_defaultInvitor",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 820,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_inviteAmount",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 824,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_teamAmount",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 828,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_teamNum",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 830,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_pauseSell",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 832,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellSelfRate",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 834,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellJoinRate",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 836,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellNFTRate",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 838,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellLPReceiver",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 842,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellJoinAmount",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 844,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_fundAddress",
        "offset": 0,
        "slot": "28",
        "type": "t_address"
      },
      {
        "astId": 849,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "referrals",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 853,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "superAccount",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 857,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "referralAmount",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 861,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "depositAmount",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 865,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "referralReward",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 869,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "userLevel",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 886,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_pauseJoin",
        "offset": 0,
        "slot": "35",
        "type": "t_bool"
      },
      {
        "astId": 888,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lastDailyUpTime",
        "offset": 0,
        "slot": "36",
        "type": "t_uint256"
      },
      {
        "astId": 890,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lastAmountRate",
        "offset": 0,
        "slot": "37",
        "type": "t_uint256"
      },
      {
        "astId": 892,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_amountDailyUp",
        "offset": 0,
        "slot": "38",
        "type": "t_uint256"
      },
      {
        "astId": 900,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lpReleaseDuration",
        "offset": 0,
        "slot": "39",
        "type": "t_uint256"
      },
      {
        "astId": 902,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_speedUpCost",
        "offset": 0,
        "slot": "40",
        "type": "t_uint256"
      },
      {
        "astId": 904,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_speedUpDuration",
        "offset": 0,
        "slot": "41",
        "type": "t_uint256"
      },
      {
        "astId": 906,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_speedUpReceiver",
        "offset": 0,
        "slot": "42",
        "type": "t_address"
      },
      {
        "astId": 908,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_speedUpMaxTime",
        "offset": 0,
        "slot": "43",
        "type": "t_uint256"
      },
      {
        "astId": 910,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_totalUsdt",
        "offset": 0,
        "slot": "44",
        "type": "t_uint256"
      },
      {
        "astId": 914,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_inProject",
        "offset": 0,
        "slot": "45",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 916,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lastDailyReward",
        "offset": 0,
        "slot": "46",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INFT)4808": {
        "encoding": "inplace",
        "label": "contract INFT",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)4917": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)743_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MintPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)743_storage"
      },
      "t_mapping(t_address,t_struct(UserLPInfo)771_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MintPool.UserLPInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserLPInfo)771_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoolInfo)756_storage": {
        "encoding": "inplace",
        "label": "struct MintPool.PoolInfo",
        "members": [
          {
            "astId": 745,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 747,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "accMintPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 749,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "accMintReward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 751,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "mintPerSec",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 753,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "lastMintTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 755,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "totalMintReward",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserInfo)743_storage": {
        "encoding": "inplace",
        "label": "struct MintPool.UserInfo",
        "members": [
          {
            "astId": 736,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 738,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 740,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "rewardMintDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 742,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "calMintReward",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserLPInfo)771_storage": {
        "encoding": "inplace",
        "label": "struct MintPool.UserLPInfo",
        "members": [
          {
            "astId": 758,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "lockAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 760,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "calAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 762,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 764,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "lastReleaseTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 766,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "releaseInitAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 768,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "releaseDuration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 770,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "speedUpTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}