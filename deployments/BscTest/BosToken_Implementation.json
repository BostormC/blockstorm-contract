{
  "address": "0xB3EE085e7361291Ad4F4F47448f080e424b0ACbC",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "__getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rOther",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rThis",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_feeWhiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rOther",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rThis",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceOther",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_giveRewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lastGiveRewardTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_mainPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_mintPool",
      "outputs": [
        {
          "internalType": "contract IMintPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_pauseGiveReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellPoolDestroyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellPoolRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_startBuy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_startSell",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_strictCheck",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_swapPairList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_swapRouters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_totalMintReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_usdt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "name": "addLPAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "name": "addUserLPAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addr",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "batchSetFeeWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destroySupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "destroyTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdtDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenDecimals",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "giveMintReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdtAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recevie",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fund",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setFeeWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setFundAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setGiveRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "setLastGiveRewardTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "p",
          "type": "address"
        }
      ],
      "name": "setMinPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "p",
          "type": "bool"
        }
      ],
      "name": "setPauseGiveReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setSellPoolDestroyRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setSellPoolRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setStartBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setStartSell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setStrictCheck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setSwapPairList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "name": "updateLPAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x59fc9e868fd55e6a613db945ac757314ace9e6af3b9196dad2f3ce39483b2d5c",
  "receipt": {
    "to": null,
    "from": "0x289F8F063c4304F432bb96DD31e82bdCc5CcE142",
    "contractAddress": "0xB3EE085e7361291Ad4F4F47448f080e424b0ACbC",
    "transactionIndex": 1,
    "gasUsed": "3062303",
    "logsBloom": "0x
    "blockHash": "0xdadfebdaf03093513ef732663d0fbe4ce7b2a9ddadbbe5546a33e61a0ce92981",
    "transactionHash": "0x59fc9e868fd55e6a613db945ac757314ace9e6af3b9196dad2f3ce39483b2d5c",
    "logs": [],
    "blockNumber": 36118658,
    "cumulativeGasUsed": "3283189",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bf4dd84310170c4368ec6a552e0ebbde",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_giveRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastGiveRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintPool\",\"outputs\":[{\"internalType\":\"contract IMintPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pauseGiveReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellPoolDestroyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellPoolRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_strictCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalMintReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"addLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"addUserLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroySupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destroyTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveMintReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recevie\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setGiveRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setLastGiveRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"p\",\"type\":\"address\"}],\"name\":\"setMinPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"p\",\"type\":\"bool\"}],\"name\":\"setPauseGiveReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setSellPoolDestroyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setSellPoolRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setStartBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setStartSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setStrictCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BosToken.sol\":\"BosToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/BosToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interface/ISwapFactory.sol\\\";\\nimport \\\"./interface/ISwapPair.sol\\\";\\nimport \\\"./interface/ISwapRouter.sol\\\";\\nimport \\\"./interface/IMintPool.sol\\\";\\nimport \\\"./library/Math.sol\\\";\\nimport \\\"./interface/IToken.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BosToken is IERC20, OwnableUpgradeable, IToken {\\n    struct UserInfo {\\n        uint256 lpAmount;\\n        bool preLP;\\n    }\\n\\n    mapping(address => uint256) public _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    address public fundAddress;\\n\\n    mapping(address => bool) public _feeWhiteList;\\n\\n    mapping(address => UserInfo) private _userInfo;\\n\\n    uint256 private _tTotal;\\n\\n    ISwapRouter public _swapRouter;\\n\\n    mapping(address => bool) public _swapPairList;\\n    mapping(address => bool) public _swapRouters;\\n\\n    bool private inSwap;\\n\\n    address public _mainPair;\\n    address public _usdt;\\n\\n    bool public _strictCheck;\\n\\n    bool public _startBuy;\\n    bool public _startSell;\\n\\n    IMintPool public _mintPool;\\n    uint256 public _lastGiveRewardTime;\\n    uint256 private immutable _giveRewardDuration = 1 days;\\n    bool public _pauseGiveReward;\\n    uint256 public _giveRewardRate;\\n\\n    uint256 public _totalMintReward;\\n\\n    uint256 public _sellPoolRate;\\n\\n    uint256 public _sellPoolDestroyRate;\\n\\n    modifier lockTheSwap {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n\\n    function initialize(\\n        address _router, \\n        address _usdtAddress,\\n        uint256 _supply,\\n        address _recevie, \\n        address _fund,\\n        address _owner)\\n    external initializer {\\n        _name = \\\"Block Storm\\\";\\n        _symbol = \\\"BOS\\\";\\n        _decimals = 18;\\n        _strictCheck = true;\\n        _pauseGiveReward = true;\\n        _giveRewardRate = 70;\\n        _sellPoolRate = 1000;\\n        _sellPoolDestroyRate = 10000;\\n\\n        ISwapRouter swapRouter = ISwapRouter(_router);\\n        _swapRouter = swapRouter;\\n        _allowances[address(this)][address(swapRouter)] = type(uint256).max;\\n        _swapRouters[address(swapRouter)] = true;\\n\\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\\n        _usdt = _usdtAddress;\\n        IERC20(_usdt).approve(address(swapRouter), type(uint256).max);\\n        address pair = swapFactory.createPair(address(this), _usdt);\\n        _swapPairList[pair] = true;\\n        _mainPair = pair;\\n\\n        uint256 tokenUnit = 10 ** 18;\\n        uint256 total = _supply * tokenUnit;\\n        _tTotal = total;\\n\\n        uint256 receiveTotal = total;\\n        _balances[_recevie] = receiveTotal;\\n        emit Transfer(address(0), _recevie, receiveTotal);\\n\\n        fundAddress = _fund;\\n\\n        _feeWhiteList[_recevie] = true;\\n        _feeWhiteList[_fund] = true;\\n        _feeWhiteList[address(this)] = true;\\n        _feeWhiteList[address(swapRouter)] = true;\\n        _feeWhiteList[msg.sender] = true;\\n        _feeWhiteList[address(0)] = true;\\n        _feeWhiteList[0x000000000000000000000000000000000000dEaD] = true;\\n        _feeWhiteList[0x9E80518A58442293c607C788c85ea8cC08885C08] = true;\\n\\n        _transferOwnership(_owner);\\n    }\\n\\n    function symbol() external view  returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function name() external view  returns (string memory) {\\n        return _name;\\n    }\\n\\n    function decimals() external view  returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function giveMintReward() public {\\n        if (_pauseGiveReward) {\\n            return;\\n        }\\n        if (block.timestamp < _lastGiveRewardTime + _giveRewardDuration) {\\n            return;\\n        }\\n        IMintPool mintPool = _mintPool;\\n        if (address(0) == address(mintPool)) {\\n            return;\\n        }\\n        _lastGiveRewardTime = block.timestamp;\\n        uint256 rewardAmount = balanceOf(_mainPair) * _giveRewardRate / 10000;\\n        _standTransfer(_mainPair, address(mintPool), rewardAmount);\\n        ISwapPair(_mainPair).sync();\\n        mintPool.addTotalMintReward(rewardAmount);\\n        _totalMintReward += rewardAmount;\\n    }\\n\\n    function updateLPAmount(address account, uint256 lpAmount) public onlyWhiteList {\\n        _userInfo[account].lpAmount = lpAmount;\\n    }\\n\\n    function addLPAmount(address account, uint256 lpAmount) public onlyWhiteList {\\n        _userInfo[account].lpAmount += lpAmount;\\n    }\\n\\n    function addUserLPAmount(address account, uint256 lpAmount) public {\\n        require(msg.sender == address(_mintPool), \\\"only mint pool\\\");\\n        _userInfo[account].lpAmount += lpAmount;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\\n        }\\n        return true;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal - destroySupply();\\n    }\\n\\n    function validSupply() public view returns (uint256) {\\n        return totalSupply() - balanceOf(_mainPair);\\n    }\\n\\n    function destroySupply() public view returns (uint256) {\\n        return balanceOf(address(0)) + balanceOf(address(0x000000000000000000000000000000000000dEaD));\\n    }\\n\\n    function getTokenInfo() public view returns (\\n        uint256 validTotal, uint256 maxTotal, uint256 destroyTotal, uint256 price,\\n        uint256 rewardTotal, uint256 nextReward, uint256 usdtDecimals, uint256 tokenDecimals){\\n\\n        validTotal = validSupply();\\n        maxTotal = totalSupply();\\n        destroyTotal = destroySupply();\\n        price = getTokenPrice();\\n        rewardTotal = _totalMintReward;\\n        nextReward = balanceOf(_mainPair) * _giveRewardRate / 10000;\\n        usdtDecimals = 18;\\n        tokenDecimals = _decimals;\\n    }\\n\\n    function getTokenPrice() public view returns (uint256 price){\\n        (uint256 rUsdt,uint256 rToken) = __getReserves();\\n        if (rToken > 0) {\\n            price = 10 ** _decimals * rUsdt / rToken;\\n        }\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        uint256 balance = balanceOf(from);\\n        require(balance >= amount, \\\"Invalid amount\\\");\\n\\n        bool takeFee;\\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\\n            takeFee = true;\\n            uint256 maxSellAmount = balance * 99999 / 100000;\\n            if (amount > maxSellAmount) {\\n                amount = maxSellAmount;\\n            }\\n        }\\n\\n        bool isAddLP;\\n        bool isRemoveLP;\\n        UserInfo storage userInfo;\\n\\n        uint256 addLPLiquidity;\\n        if (to == _mainPair && _swapRouters[msg.sender]) {\\n            addLPLiquidity = _isAddLiquidity(amount);\\n            if (addLPLiquidity > 0) {\\n                userInfo = _userInfo[from];\\n                userInfo.lpAmount += addLPLiquidity;\\n                isAddLP = true;\\n            }\\n        }\\n\\n        uint256 removeLPLiquidity;\\n        if (from == _mainPair) {\\n            if (_strictCheck) {\\n                removeLPLiquidity = _strictCheckBuy(amount);\\n            } else {\\n                removeLPLiquidity = _isRemoveLiquidity(amount);\\n            }\\n            if (removeLPLiquidity > 0) {\\n                require(_userInfo[to].lpAmount >= removeLPLiquidity,\\\"insufficient liquidity\\\");\\n                _userInfo[to].lpAmount -= removeLPLiquidity;\\n                isRemoveLP = true;\\n            }\\n        }\\n\\n        _tokenTransfer(from, to, amount, takeFee, isRemoveLP, isAddLP);\\n    }\\n\\n    function _isAddLiquidity(uint256 amount) internal view returns (uint256 liquidity){\\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\\n        uint256 amountOther;\\n        if (rOther > 0 && rThis > 0) {\\n            amountOther = amount * rOther / rThis;\\n        }\\n        //isAddLP\\n        if (balanceOther >= rOther + amountOther) {\\n            (liquidity,) = calLiquidity(balanceOther, amount, rOther, rThis);\\n        }\\n    }\\n\\n    function _strictCheckBuy(uint256 amount) internal view returns (uint256 liquidity){\\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\\n        //isRemoveLP\\n        if (balanceOther < rOther) {\\n            liquidity = (amount * ISwapPair(_mainPair).totalSupply()) /\\n            (_balances[_mainPair] - amount);\\n        } else {\\n            uint256 amountOther;\\n            if (rOther > 0 && rThis > 0) {\\n                amountOther = amount * rOther / (rThis - amount);\\n                //strictCheckBuy\\n                require(balanceOther >= amountOther + rOther,\\\"insufficient liquidity\\\");\\n            }\\n        }\\n    }\\n\\n    function calLiquidity(\\n        uint256 balanceA,\\n        uint256 amount,\\n        uint256 r0,\\n        uint256 r1\\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\\n        uint256 pairTotalSupply = ISwapPair(_mainPair).totalSupply();\\n        address feeTo = ISwapFactory(_swapRouter.factory()).feeTo();\\n        bool feeOn = feeTo != address(0);\\n        uint256 _kLast = ISwapPair(_mainPair).kLast();\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint256 rootK = Math.sqrt(r0 * r1);\\n                uint256 rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint256 numerator = pairTotalSupply * (rootK - rootKLast) * 8;\\n                    uint256 denominator = rootK * 17 + (rootKLast * 8);\\n                    feeToLiquidity = numerator / denominator;\\n                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;\\n                }\\n            }\\n        }\\n        uint256 amount0 = balanceA - r0;\\n        if (pairTotalSupply == 0) {\\n            liquidity = Math.sqrt(amount0 * amount) - 1000;\\n        } else {\\n            liquidity = Math.min(\\n                (amount0 * pairTotalSupply) / r0,\\n                (amount * pairTotalSupply) / r1\\n            );\\n        }\\n    }\\n\\n    function _getReserves() public view returns (uint256 rOther, uint256 rThis, uint256 balanceOther){\\n        (rOther, rThis) = __getReserves();\\n        balanceOther = IERC20(_usdt).balanceOf(_mainPair);\\n    }\\n\\n    function __getReserves() public view returns (uint256 rOther, uint256 rThis){\\n        ISwapPair mainPair = ISwapPair(_mainPair);\\n        (uint r0, uint256 r1,) = mainPair.getReserves();\\n\\n        address tokenOther = _usdt;\\n        if (tokenOther < address(this)) {\\n            rOther = r0;\\n            rThis = r1;\\n        } else {\\n            rOther = r1;\\n            rThis = r0;\\n        }\\n    }\\n\\n    function _isRemoveLiquidity(uint256 amount) internal view returns (uint256 liquidity){\\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\\n        //isRemoveLP\\n        if (balanceOther < rOther) {\\n            liquidity = (amount * ISwapPair(_mainPair).totalSupply()) /\\n            (_balances[_mainPair] - amount);\\n        }\\n    }\\n\\n    function _tokenTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount,\\n        bool takeFee,\\n        bool isRemoveLP,\\n        bool isAddLP\\n    ) private {\\n        uint256 senderBalance = _balances[sender];\\n        senderBalance -= tAmount;\\n        _balances[sender] = senderBalance;\\n\\n        if (isRemoveLP) {\\n\\n        } else if (isAddLP) {\\n            if (takeFee) {\\n                require(_startSell,\\\"only start sell\\\");\\n            }\\n        } else if (_swapPairList[sender]) {//Buy\\n            if (takeFee) {\\n                require(_startBuy && recipient != address(_swapRouter),\\\"only start buy and not swapRouter\\\");\\n            }\\n        } else if (_swapPairList[recipient]) {//Sell\\n            if (takeFee) {\\n                require(_startSell,\\\"only start sell\\\");\\n            }\\n            uint256 poolToken = balanceOf(recipient);\\n            require(tAmount <= poolToken * _sellPoolRate / 10000, \\\"not enough poolToken\\\");\\n\\n            uint256 poolDestroyAmount = tAmount * _sellPoolDestroyRate / 10000;\\n            if (poolDestroyAmount > 0) {\\n                _standTransfer(recipient, address(0x000000000000000000000000000000000000dEaD), poolDestroyAmount);\\n                ISwapPair(recipient).sync();\\n            }\\n        } else {//Transfer\\n\\n        }\\n\\n        _takeTransfer(sender, recipient, tAmount);\\n    }\\n\\n    function _standTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        _balances[sender] = _balances[sender] - tAmount;\\n        _takeTransfer(sender, recipient, tAmount);\\n    }\\n\\n    function _takeTransfer(\\n        address sender,\\n        address to,\\n        uint256 tAmount\\n    ) private {\\n        _balances[to] = _balances[to] + tAmount;\\n        emit Transfer(sender, to, tAmount);\\n    }\\n\\n    modifier onlyWhiteList() {\\n        address msgSender = msg.sender;\\n        require(_feeWhiteList[msgSender] && (msgSender == fundAddress || msgSender == owner()), \\\"only white list\\\");\\n        _;\\n    }\\n\\n    function setFundAddress(address addr) external onlyWhiteList {\\n        fundAddress = addr;\\n        _feeWhiteList[addr] = true;\\n    }\\n\\n    function setFeeWhiteList(address addr, bool enable) external onlyWhiteList {\\n        _feeWhiteList[addr] = enable;\\n    }\\n\\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyWhiteList {\\n        for (uint i = 0; i < addr.length; i++) {\\n            _feeWhiteList[addr[i]] = enable;\\n        }\\n    }\\n\\n    function setSwapPairList(address addr, bool enable) external onlyWhiteList {\\n        _swapPairList[addr] = enable;\\n    }\\n\\n    function setSwapRouter(address addr, bool enable) external onlyWhiteList {\\n        _swapRouters[addr] = enable;\\n    }\\n\\n    function claimBalance() external {\\n        safeTransferETH(fundAddress, address(this).balance);\\n    }\\n\\n    function claimToken(address token, uint256 amount) external {\\n        if (_feeWhiteList[msg.sender]) {\\n            safeTransferToken(token, fundAddress, amount);\\n        }\\n    }\\n\\n    function safeTransferToken(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'transfer fail');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value : value}(new bytes(0));\\n        require(success, 'transfer fail');\\n    }\\n\\n    receive() external payable {}\\n\\n    function setStrictCheck(bool enable) external onlyWhiteList {\\n        _strictCheck = enable;\\n    }\\n\\n    function getUserInfo(address account) public view returns (uint256 lpAmount, uint256 lpBalance) {\\n        lpAmount = _userInfo[account].lpAmount;\\n        lpBalance = IERC20(_mainPair).balanceOf(account);\\n    }\\n\\n    function setStartBuy(bool enable) external onlyWhiteList {\\n        _startBuy = enable;\\n    }\\n\\n    function setStartSell(bool enable) external onlyWhiteList {\\n        _startSell = enable;\\n    }\\n\\n\\n    function setSellPoolRate(uint256 rate) external onlyWhiteList {\\n        _sellPoolRate = rate;\\n    }\\n\\n    function setSellPoolDestroyRate(uint256 rate) external onlyWhiteList {\\n        _sellPoolDestroyRate = rate;\\n    }\\n\\n    function setMinPool(address p) public onlyWhiteList {\\n        _mintPool = IMintPool(p);\\n        _feeWhiteList[p] = true;\\n    }\\n\\n    function setLastGiveRewardTime(uint256 t) public onlyWhiteList {\\n        _lastGiveRewardTime = t;\\n    }\\n\\n    function setPauseGiveReward(bool p) public onlyWhiteList {\\n        _pauseGiveReward = p;\\n    }\\n\\n    function setGiveRewardRate(uint256 r) public onlyWhiteList {\\n        _giveRewardRate = r;\\n    }\\n}\",\"keccak256\":\"0xe911e2e6de15cfa21552d3b9cf5fecbe9613e826626e9b632ebed738a4d7b143\",\"license\":\"MIT\"},\"contracts/interface/IMintPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n\\ninterface IMintPool {\\n    function addTotalMintReward(uint256 reward) external;\\n    function getUserNFTLevel(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0xde21d8a298c9f00767d90ee44c36005fd701b4fdab91dea2b62654b9db4c39ef\",\"license\":\"MIT\"},\"contracts/interface/ISwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n\\ninterface ISwapFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function feeTo() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\",\"keccak256\":\"0x5849d5f6a26192dc835dd0a452df981b5742afda0fe9ecb564edbb304b6e09e9\",\"license\":\"MIT\"},\"contracts/interface/ISwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface ISwapPair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function sync() external;\\n}\",\"keccak256\":\"0x528ce2a8bd0f10b92a547c7b86bdb098308adb1a1be12a13c4e09964d2047424\",\"license\":\"MIT\"},\"contracts/interface/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface ISwapRouter {\\n    function factory() external pure returns (address);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n}\",\"keccak256\":\"0x8b6dcc30c60ffafe15874d4c3920157a8aa7b5c2141e3d5fefb5593df50397ca\",\"license\":\"MIT\"},\"contracts/interface/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n\\ninterface IToken {\\n    function giveMintReward() external;\\n\\n    function addUserLPAmount(address account, uint256 lpAmount) external;\\n}\\n\",\"keccak256\":\"0xef20803f40e623bfd961ddd3c5486646f1cfc82f7bab120d817917007a7d5c3a\",\"license\":\"MIT\"},\"contracts/library/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0x314676977482fc73a26e206e543e461de48c5d38aabf4e84ff2ba2918897e4ee\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526201518060805234801561001757600080fd5b5060805161366d6100336000396000610d77015261366d6000f3fe6080604052600436106103855760003560e01c806373a0a6c3116101d1578063b2887bec11610102578063d83d4143116100a0578063e82bef291161006f578063e82bef2914610ab5578063f2fde38b14610ada578063f7c8aeb814610afa578063ff9935cb14610b1a57600080fd5b8063d83d414314610a0e578063dd62ed3e14610a2e578063e24b04a814610a74578063e2b8e07214610a9457600080fd5b8063c0ed1d05116100dc578063c0ed1d051461097d578063c6c3e04c1461099d578063c882f4dd146109bd578063ce4d9f15146109de57600080fd5b8063b2887bec1461091d578063b292ab3b1461093d578063be3601f81461095d57600080fd5b806395d89b411161016f578063a5696d8911610149578063a5696d891461086d578063a84248611461088d578063a9059cbb146108ad578063abb1dc44146108cd57600080fd5b806395d89b411461082d578063984d11fc146108425780639917e2db1461085757600080fd5b80637bf5799f116101ab5780637bf5799f146107af57806385dc3004146107cf578063899d9c9d146107ef5780638da5cb5b1461080f57600080fd5b806373a0a6c31461076f578063776645a6146107845780637a37a0ed1461079a57600080fd5b8063313ce567116102b65780636386c1c7116102545780636e986dcc116102235780636e986dcc146106f75780636ebcf6071461070d57806370a082311461073a578063715018a61461075a57600080fd5b80636386c1c71461066c57806363b9fb2e146106a1578063652421e4146106c15780636ae5e569146106d757600080fd5b8063454130331161029057806345413033146105f757806346c123b6146106175780634b94f50e1461063757806355eaf2951461064c57600080fd5b8063313ce567146105805780633c11100d146105a25780634188bf5a146105d257600080fd5b8063206c17bb1161032357806327ea09c8116102fd57806327ea09c8146105265780632e05661b1461053c5780632e52ea3b1461055157806330509bca1461056b57600080fd5b8063206c17bb146104ae5780632171dcc9146104e657806323b872dd1461050657600080fd5b806306fdde031161035f57806306fdde0314610427578063095ea7b3146104495780631698755f1461046957806318160ddd1461048b57600080fd5b806301873d8f1461039157806301986fad146103d657806304c23ffe1461040657600080fd5b3661038c57005b600080fd5b34801561039d57600080fd5b506103c16103ac366004612f49565b606f6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b3480156103e257600080fd5b506103c16103f1366004612f49565b606a6020526000908152604090205460ff1681565b34801561041257600080fd5b506071546103c190600160a01b900460ff1681565b34801561043357600080fd5b5061043c610b3a565b6040516103cd9190612f92565b34801561045557600080fd5b506103c1610464366004612fc5565b610bcc565b34801561047557600080fd5b50610489610484366004612fc5565b610be3565b005b34801561049757600080fd5b506104a0610c1c565b6040519081526020016103cd565b3480156104ba57600080fd5b50606d546104ce906001600160a01b031681565b6040516001600160a01b0390911681526020016103cd565b3480156104f257600080fd5b5061048961050136600461300a565b610c38565b34801561051257600080fd5b506103c1610521366004613043565b610cd1565b34801561053257600080fd5b506104a060765481565b34801561054857600080fd5b50610489610d68565b34801561055d57600080fd5b506074546103c19060ff1681565b34801561057757600080fd5b50610489610efc565b34801561058c57600080fd5b5060695460405160ff90911681526020016103cd565b3480156105ae57600080fd5b506103c16105bd366004612f49565b606e6020526000908152604090205460ff1681565b3480156105de57600080fd5b506070546104ce9061010090046001600160a01b031681565b34801561060357600080fd5b50610489610612366004613084565b610f19565b34801561062357600080fd5b50610489610632366004613084565b610f91565b34801561064357600080fd5b506104a0611014565b34801561065857600080fd5b506072546104ce906001600160a01b031681565b34801561067857600080fd5b5061068c610687366004612f49565b61105d565b604080519283526020830191909152016103cd565b3480156106ad57600080fd5b506104896106bc366004613084565b6110ed565b3480156106cd57600080fd5b506104a060785481565b3480156106e357600080fd5b506104896106f23660046130a1565b611170565b34801561070357600080fd5b506104a060775481565b34801561071957600080fd5b506104a0610728366004612f49565b60656020526000908152604090205481565b34801561074657600080fd5b506104a0610755366004612f49565b6111da565b34801561076657600080fd5b506104896111f5565b34801561077b57600080fd5b506104a0611207565b34801561079057600080fd5b506104a060735481565b3480156107a657600080fd5b5061068c611228565b3480156107bb57600080fd5b506104896107ca366004612fc5565b6112ea565b3480156107db57600080fd5b506104896107ea366004612f49565b611380565b3480156107fb57600080fd5b5061048961080a366004612fc5565b611424565b34801561081b57600080fd5b506033546001600160a01b03166104ce565b34801561083957600080fd5b5061043c611497565b34801561084e57600080fd5b506104a06114a6565b34801561086357600080fd5b506104a060755481565b34801561087957600080fd5b50610489610888366004612fc5565b6114d5565b34801561089957600080fd5b506104896108a836600461300a565b611556565b3480156108b957600080fd5b506103c16108c8366004612fc5565b6115e6565b3480156108d957600080fd5b506108e26115f3565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e0820152610100016103cd565b34801561092957600080fd5b506104896109383660046130d0565b611680565b34801561094957600080fd5b50610489610958366004612f49565b611751565b34801561096957600080fd5b506071546104ce906001600160a01b031681565b34801561098957600080fd5b50610489610998366004613084565b6117f0565b3480156109a957600080fd5b506104896109b83660046130a1565b611873565b3480156109c957600080fd5b506071546103c190600160b01b900460ff1681565b3480156109ea57600080fd5b506109f36118dd565b604080519384526020840192909252908201526060016103cd565b348015610a1a57600080fd5b50610489610a2936600461300a565b61196b565b348015610a3a57600080fd5b506104a0610a493660046131a7565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b348015610a8057600080fd5b50610489610a8f3660046130a1565b6119fb565b348015610aa057600080fd5b506071546103c190600160a81b900460ff1681565b348015610ac157600080fd5b506069546104ce9061010090046001600160a01b031681565b348015610ae657600080fd5b50610489610af5366004612f49565b611a65565b348015610b0657600080fd5b50610489610b153660046130a1565b611ade565b348015610b2657600080fd5b50610489610b353660046131d5565b611b48565b606060678054610b499061324e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b759061324e565b8015610bc25780601f10610b9757610100808354040283529160200191610bc2565b820191906000526020600020905b815481529060010190602001808311610ba557829003601f168201915b5050505050905090565b6000610bd9338484612074565b5060015b92915050565b336000908152606a602052604090205460ff1615610c1857606954610c1890839061010090046001600160a01b0316836120d6565b5050565b6000610c26611207565b606c54610c339190613298565b905090565b336000818152606a602052604090205460ff168015610c8057506069546001600160a01b03828116610100909204161480610c8057506033546001600160a01b038281169116145b610ca55760405162461bcd60e51b8152600401610c9c906132af565b60405180910390fd5b506001600160a01b03919091166000908152606f60205260409020805460ff1916911515919091179055565b6000610cde8484846121e1565b6001600160a01b038416600090815260666020908152604080832033845290915290205460001914610d5e576001600160a01b0384166000908152606660209081526040808320338452909152902054610d39908390613298565b6001600160a01b03851660009081526066602090815260408083203384529091529020555b5060019392505050565b60745460ff1615610d7557565b7f0000000000000000000000000000000000000000000000000000000000000000607354610da391906132d8565b421015610dac57565b6072546001600160a01b03166000819003610dc45750565b4260735560755460705460009161271091610dec9061010090046001600160a01b03166111da565b610df691906132f0565b610e00919061330f565b607054909150610e1f9061010090046001600160a01b0316838361242b565b607060019054906101000a90046001600160a01b03166001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e6f57600080fd5b505af1158015610e83573d6000803e3d6000fd5b505060405163137320f560e11b8152600481018490526001600160a01b03851692506326e641ea9150602401600060405180830381600087803b158015610ec957600080fd5b505af1158015610edd573d6000803e3d6000fd5b505050508060766000828254610ef391906132d8565b90915550505050565b606954610f179061010090046001600160a01b031647612478565b565b336000818152606a602052604090205460ff168015610f6157506069546001600160a01b03828116610100909204161480610f6157506033546001600160a01b038281169116145b610f7d5760405162461bcd60e51b8152600401610c9c906132af565b506074805460ff1916911515919091179055565b336000818152606a602052604090205460ff168015610fd957506069546001600160a01b03828116610100909204161480610fd957506033546001600160a01b038281169116145b610ff55760405162461bcd60e51b8152600401610c9c906132af565b5060718054911515600160a01b0260ff60a01b19909216919091179055565b6000806000611021611228565b9092509050801561105857606954819083906110419060ff16600a613415565b61104b91906132f0565b611055919061330f565b92505b505090565b6001600160a01b038181166000818152606b60205260408082205460705491516370a0823160e01b81526004810194909452939192610100909104909116906370a0823190602401602060405180830381865afa1580156110c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e69190613424565b9050915091565b336000818152606a602052604090205460ff16801561113557506069546001600160a01b0382811661010090920416148061113557506033546001600160a01b038281169116145b6111515760405162461bcd60e51b8152600401610c9c906132af565b5060718054911515600160a81b0260ff60a81b19909216919091179055565b336000818152606a602052604090205460ff1680156111b857506069546001600160a01b038281166101009092041614806111b857506033546001600160a01b038281169116145b6111d45760405162461bcd60e51b8152600401610c9c906132af565b50607755565b6001600160a01b031660009081526065602052604090205490565b6111fd612525565b610f17600061257f565b600061121461dead6111da565b61121e60006111da565b610c3391906132d8565b6000806000607060019054906101000a90046001600160a01b03169050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112aa9190613454565b506071546001600160701b039283169450911691506001600160a01b0316308110156112db578295508194506112e2565b8195508294505b505050509091565b336000818152606a602052604090205460ff16801561133257506069546001600160a01b0382811661010090920416148061133257506033546001600160a01b038281169116145b61134e5760405162461bcd60e51b8152600401610c9c906132af565b6001600160a01b0383166000908152606b6020526040812080548492906113769084906132d8565b9091555050505050565b336000818152606a602052604090205460ff1680156113c857506069546001600160a01b038281166101009092041614806113c857506033546001600160a01b038281169116145b6113e45760405162461bcd60e51b8152600401610c9c906132af565b5060698054610100600160a81b0319166101006001600160a01b03939093169283021790556000908152606a60205260409020805460ff19166001179055565b6072546001600160a01b0316331461146f5760405162461bcd60e51b815260206004820152600e60248201526d1bdb9b1e481b5a5b9d081c1bdbdb60921b6044820152606401610c9c565b6001600160a01b0382166000908152606b602052604081208054839290610ef39084906132d8565b606060688054610b499061324e565b6070546000906114c39061010090046001600160a01b03166111da565b6114cb610c1c565b610c339190613298565b336000818152606a602052604090205460ff16801561151d57506069546001600160a01b0382811661010090920416148061151d57506033546001600160a01b038281169116145b6115395760405162461bcd60e51b8152600401610c9c906132af565b506001600160a01b039091166000908152606b6020526040902055565b336000818152606a602052604090205460ff16801561159e57506069546001600160a01b0382811661010090920416148061159e57506033546001600160a01b038281169116145b6115ba5760405162461bcd60e51b8152600401610c9c906132af565b506001600160a01b03919091166000908152606e60205260409020805460ff1916911515919091179055565b6000610bd93384846121e1565b6000806000806000806000806116076114a6565b9750611611610c1c565b965061161b611207565b9550611625611014565b94506076549350612710607554611650607060019054906101000a90046001600160a01b03166111da565b61165a91906132f0565b611664919061330f565b6069549899979896979596949590946012945060ff1692509050565b336000818152606a602052604090205460ff1680156116c857506069546001600160a01b038281166101009092041614806116c857506033546001600160a01b038281169116145b6116e45760405162461bcd60e51b8152600401610c9c906132af565b60005b835181101561174b5782606a6000868481518110611707576117076134a4565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611743816134ba565b9150506116e7565b50505050565b336000818152606a602052604090205460ff16801561179957506069546001600160a01b0382811661010090920416148061179957506033546001600160a01b038281169116145b6117b55760405162461bcd60e51b8152600401610c9c906132af565b50607280546001600160a01b039092166001600160a01b0319909216821790556000908152606a60205260409020805460ff19166001179055565b336000818152606a602052604090205460ff16801561183857506069546001600160a01b0382811661010090920416148061183857506033546001600160a01b038281169116145b6118545760405162461bcd60e51b8152600401610c9c906132af565b5060718054911515600160b01b0260ff60b01b19909216919091179055565b336000818152606a602052604090205460ff1680156118bb57506069546001600160a01b038281166101009092041614806118bb57506033546001600160a01b038281169116145b6118d75760405162461bcd60e51b8152600401610c9c906132af565b50607355565b60008060006118ea611228565b6071546070546040516370a0823160e01b81526001600160a01b036101009092048216600482015293965091945016906370a0823190602401602060405180830381865afa158015611940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119649190613424565b9050909192565b336000818152606a602052604090205460ff1680156119b357506069546001600160a01b038281166101009092041614806119b357506033546001600160a01b038281169116145b6119cf5760405162461bcd60e51b8152600401610c9c906132af565b506001600160a01b03919091166000908152606a60205260409020805460ff1916911515919091179055565b336000818152606a602052604090205460ff168015611a4357506069546001600160a01b03828116610100909204161480611a4357506033546001600160a01b038281169116145b611a5f5760405162461bcd60e51b8152600401610c9c906132af565b50607855565b611a6d612525565b6001600160a01b038116611ad25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c9c565b611adb8161257f565b50565b336000818152606a602052604090205460ff168015611b2657506069546001600160a01b03828116610100909204161480611b2657506033546001600160a01b038281169116145b611b425760405162461bcd60e51b8152600401610c9c906132af565b50607555565b600054610100900460ff1615808015611b685750600054600160ff909116105b80611b825750303b158015611b82575060005460ff166001145b611be55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c9c565b6000805460ff191660011790558015611c08576000805461ff0019166101001790555b60408051808201909152600b81526a426c6f636b2053746f726d60a81b6020820152606790611c379082613521565b50604080518082019091526003815262424f5360e81b6020820152606890611c5f9082613521565b506069805460ff199081166012179091556071805460ff60a01b1916600160a01b179055607480548216600190811790915560466075556103e8607755612710607855606d80546001600160a01b038b166001600160a01b0319909116811790915530600090815260666020908152604080832084845282528083206000199055606f82528083208054909616909417909455825163c45a015560e01b815292518b94919363c45a01559260048281019391928290030181865afa158015611d2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4f91906135e1565b607180546001600160a01b0319166001600160a01b038b811691821790925560405163095ea7b360e01b81529185166004830152600019602483015291925063095ea7b3906044016020604051808303816000875af1158015611db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dda91906135fe565b506071546040516364e329cb60e11b81523060048201526001600160a01b03918216602482015260009183169063c9c65396906044016020604051808303816000875af1158015611e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5391906135e1565b6001600160a01b0381166000818152606e60205260408120805460ff1916600117905560708054610100909302610100600160a81b031990931692909217909155909150670de0b6b3a764000090611eab828b6132f0565b606c8190556001600160a01b038a1660008181526065602090815260408083208590555184815293945084937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a360698054610100600160a81b0319166101006001600160a01b038c8116918202929092179092558b81166000908152606a6020526040808220805460ff19908116600190811790925594835281832080548616821790553083528183208054861682179055928a1682528082208054851684179055338252812080548416831790557f6021fa82de881996a3e5fd2d032f74dfe72746b8a66c5510d4ab1a3cb789150780548416831790557f335328446f5a016d99ac6481f9fc72f87ea5b00823fecac528cf7c0cce27f2708054841683179055739e80518a58442293c607c788c85ea8cc08885c0890527fea7a11da43e61a807df35bdcc02dc59a1e38dbc69a9ee92ec18577f57f55f3c3805490921617905561201f8861257f565b505050505050801561206b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691612132919061361b565b6000604051808303816000865af19150503d806000811461216f576040519150601f19603f3d011682016040523d82523d6000602084013e612174565b606091505b509150915081801561219e57508051158061219e57508080602001905181019061219e91906135fe565b6121da5760405162461bcd60e51b815260206004820152600d60248201526c1d1c985b9cd9995c8819985a5b609a1b6044820152606401610c9c565b5050505050565b60006121ec846111da565b90508181101561222f5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610c9c565b6001600160a01b0384166000908152606a602052604081205460ff1615801561227157506001600160a01b0384166000908152606a602052604090205460ff16155b156122a6575060016000620186a061228c846201869f6132f0565b612296919061330f565b9050808411156122a4578093505b505b6070546000908190819081906001600160a01b03898116610100909204161480156122e05750336000908152606f602052604090205460ff165b1561232c576122ee876125d1565b9050801561232c576001600160a01b0389166000908152606b602052604081208054909350829184916123229084906132d8565b9091555060019450505b6070546000906001600160a01b036101009091048116908b160361241157607154600160a01b900460ff161561236c576123658861263c565b9050612378565b612375886127a5565b90505b8015612411576001600160a01b0389166000908152606b60205260409020548111156123df5760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e74206c697175696469747960501b6044820152606401610c9c565b6001600160a01b0389166000908152606b602052604081208054839290612407908490613298565b9091555060019450505b61241f8a8a8a89888a61287f565b50505050505050505050565b6001600160a01b03831660009081526065602052604090205461244f908290613298565b6001600160a01b038416600090815260656020526040902055612473838383612b34565b505050565b604080516000808252602082019092526001600160a01b0384169083906040516124a2919061361b565b60006040518083038185875af1925050503d80600081146124df576040519150601f19603f3d011682016040523d82523d6000602084013e6124e4565b606091505b50509050806124735760405162461bcd60e51b815260206004820152600d60248201526c1d1c985b9cd9995c8819985a5b609a1b6044820152606401610c9c565b6033546001600160a01b03163314610f175760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c9c565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806000806125df6118dd565b925092509250600080841180156125f65750600083115b15612613578261260685886132f0565b612610919061330f565b90505b61261d81856132d8565b82106126335761262f82878686612bac565b5094505b50505050919050565b60008060008061264a6118dd565b925092509250828110156127155760705461010090046001600160a01b0316600090815260656020526040902054612683908690613298565b607060019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fa9190613424565b61270490876132f0565b61270e919061330f565b935061279d565b600080841180156127265750600083115b15612633576127358684613298565b61273f85886132f0565b612749919061330f565b905061275584826132d8565b8210156126335760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e74206c697175696469747960501b6044820152606401610c9c565b505050919050565b60008060006127b26118dd565b9250509150818110156128785760705461010090046001600160a01b03166000908152606560205260409020546127ea908590613298565b607060019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561283d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128619190613424565b61286b90866132f0565b612875919061330f565b92505b5050919050565b6001600160a01b0386166000908152606560205260409020546128a28582613298565b6001600160a01b0388166000908152606560205260409020819055905082612b2d57811561292057831561291b57607154600160b01b900460ff1661291b5760405162461bcd60e51b815260206004820152600f60248201526e1bdb9b1e481cdd185c9d081cd95b1b608a1b6044820152606401610c9c565b612b2d565b6001600160a01b0387166000908152606e602052604090205460ff16156129c457831561291b57607154600160a81b900460ff16801561296e5750606d546001600160a01b03878116911614155b61291b5760405162461bcd60e51b815260206004820152602160248201527f6f6e6c792073746172742062757920616e64206e6f742073776170526f7574656044820152603960f91b6064820152608401610c9c565b6001600160a01b0386166000908152606e602052604090205460ff1615612b2d578315612a3657607154600160b01b900460ff16612a365760405162461bcd60e51b815260206004820152600f60248201526e1bdb9b1e481cdd185c9d081cd95b1b608a1b6044820152606401610c9c565b6000612a41876111da565b905061271060775482612a5491906132f0565b612a5e919061330f565b861115612aa45760405162461bcd60e51b81526020600482015260146024820152733737ba1032b737bab3b4103837b7b62a37b5b2b760611b6044820152606401610c9c565b600061271060785488612ab791906132f0565b612ac1919061330f565b90508015612b2a57612ad68861dead8361242b565b876001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612b1157600080fd5b505af1158015612b25573d6000803e3d6000fd5b505050505b50505b61206b8787875b6001600160a01b038216600090815260656020526040902054612b589082906132d8565b6001600160a01b0380841660008181526065602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906120c99085815260200190565b6000806000607060019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c289190613424565b90506000606d60009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca391906135e1565b6001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0491906135e1565b60705460408051637464fc3d60e01b815290519293506001600160a01b03808516151593600093610100900490911691637464fc3d9160048083019260209291908290030181865afa158015612d5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d829190613424565b90508115612e27578015612e27576000612da4612d9f898b6132f0565b612ea1565b90506000612db183612ea1565b905080821115612e24576000612dc78284613298565b612dd190886132f0565b612ddc9060086132f0565b90506000612deb8360086132f0565b612df68560116132f0565b612e0091906132d8565b9050612e0c818361330f565b98508815612e2157612e1e89896132d8565b97505b50505b50505b6000612e33898c613298565b905084600003612e5e576103e8612e4d612d9f8c846132f0565b612e579190613298565b9650612e93565b612e9089612e6c87846132f0565b612e76919061330f565b89612e81888e6132f0565b612e8b919061330f565b612f11565b96505b505050505094509492505050565b60006003821115612f025750806000612ebb60028361330f565b612ec69060016132d8565b90505b81811015612efc57905080600281612ee1818661330f565b612eeb91906132d8565b612ef5919061330f565b9050612ec9565b50919050565b8115612f0c575060015b919050565b6000818310612f205781612f22565b825b9392505050565b6001600160a01b0381168114611adb57600080fd5b8035612f0c81612f29565b600060208284031215612f5b57600080fd5b8135612f2281612f29565b60005b83811015612f81578181015183820152602001612f69565b8381111561174b5750506000910152565b6020815260008251806020840152612fb1816040850160208701612f66565b601f01601f19169190910160400192915050565b60008060408385031215612fd857600080fd5b8235612fe381612f29565b946020939093013593505050565b8015158114611adb57600080fd5b8035612f0c81612ff1565b6000806040838503121561301d57600080fd5b823561302881612f29565b9150602083013561303881612ff1565b809150509250929050565b60008060006060848603121561305857600080fd5b833561306381612f29565b9250602084013561307381612f29565b929592945050506040919091013590565b60006020828403121561309657600080fd5b8135612f2281612ff1565b6000602082840312156130b357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156130e357600080fd5b823567ffffffffffffffff808211156130fb57600080fd5b818501915085601f83011261310f57600080fd5b8135602082821115613123576131236130ba565b8160051b604051601f19603f83011681018181108682111715613148576131486130ba565b60405292835281830193508481018201928984111561316657600080fd5b948201945b8386101561318b5761317c86612f3e565b8552948201949382019361316b565b965061319a9050878201612fff565b9450505050509250929050565b600080604083850312156131ba57600080fd5b82356131c581612f29565b9150602083013561303881612f29565b60008060008060008060c087890312156131ee57600080fd5b86356131f981612f29565b9550602087013561320981612f29565b945060408701359350606087013561322081612f29565b9250608087013561323081612f29565b915060a087013561324081612f29565b809150509295509295509295565b600181811c9082168061326257607f821691505b602082108103612efc57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156132aa576132aa613282565b500390565b6020808252600f908201526e1bdb9b1e481dda1a5d19481b1a5cdd608a1b604082015260600190565b600082198211156132eb576132eb613282565b500190565b600081600019048311821515161561330a5761330a613282565b500290565b60008261332c57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561336c57816000190482111561335257613352613282565b8085161561335f57918102915b93841c9390800290613336565b509250929050565b60008261338357506001610bdd565b8161339057506000610bdd565b81600181146133a657600281146133b0576133cc565b6001915050610bdd565b60ff8411156133c1576133c1613282565b50506001821b610bdd565b5060208310610133831016604e8410600b84101617156133ef575081810a610bdd565b6133f98383613331565b806000190482111561340d5761340d613282565b029392505050565b6000612f2260ff841683613374565b60006020828403121561343657600080fd5b5051919050565b80516001600160701b0381168114612f0c57600080fd5b60008060006060848603121561346957600080fd5b6134728461343d565b92506134806020850161343d565b9150604084015163ffffffff8116811461349957600080fd5b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b6000600182016134cc576134cc613282565b5060010190565b601f82111561247357600081815260208120601f850160051c810160208610156134fa5750805b601f850160051c820191505b8181101561351957828155600101613506565b505050505050565b815167ffffffffffffffff81111561353b5761353b6130ba565b61354f81613549845461324e565b846134d3565b602080601f831160018114613584576000841561356c5750858301515b600019600386901b1c1916600185901b178555613519565b600085815260208120601f198616915b828110156135b357888601518255948401946001909101908401613594565b50858210156135d15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156135f357600080fd5b8151612f2281612f29565b60006020828403121561361057600080fd5b8151612f2281612ff1565b6000825161362d818460208701612f66565b919091019291505056fea26469706673582212209c49b2c3d00b9be891826e7133d5e040d1b315262bf3118c43823fe6f2d7e08564736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106103855760003560e01c806373a0a6c3116101d1578063b2887bec11610102578063d83d4143116100a0578063e82bef291161006f578063e82bef2914610ab5578063f2fde38b14610ada578063f7c8aeb814610afa578063ff9935cb14610b1a57600080fd5b8063d83d414314610a0e578063dd62ed3e14610a2e578063e24b04a814610a74578063e2b8e07214610a9457600080fd5b8063c0ed1d05116100dc578063c0ed1d051461097d578063c6c3e04c1461099d578063c882f4dd146109bd578063ce4d9f15146109de57600080fd5b8063b2887bec1461091d578063b292ab3b1461093d578063be3601f81461095d57600080fd5b806395d89b411161016f578063a5696d8911610149578063a5696d891461086d578063a84248611461088d578063a9059cbb146108ad578063abb1dc44146108cd57600080fd5b806395d89b411461082d578063984d11fc146108425780639917e2db1461085757600080fd5b80637bf5799f116101ab5780637bf5799f146107af57806385dc3004146107cf578063899d9c9d146107ef5780638da5cb5b1461080f57600080fd5b806373a0a6c31461076f578063776645a6146107845780637a37a0ed1461079a57600080fd5b8063313ce567116102b65780636386c1c7116102545780636e986dcc116102235780636e986dcc146106f75780636ebcf6071461070d57806370a082311461073a578063715018a61461075a57600080fd5b80636386c1c71461066c57806363b9fb2e146106a1578063652421e4146106c15780636ae5e569146106d757600080fd5b8063454130331161029057806345413033146105f757806346c123b6146106175780634b94f50e1461063757806355eaf2951461064c57600080fd5b8063313ce567146105805780633c11100d146105a25780634188bf5a146105d257600080fd5b8063206c17bb1161032357806327ea09c8116102fd57806327ea09c8146105265780632e05661b1461053c5780632e52ea3b1461055157806330509bca1461056b57600080fd5b8063206c17bb146104ae5780632171dcc9146104e657806323b872dd1461050657600080fd5b806306fdde031161035f57806306fdde0314610427578063095ea7b3146104495780631698755f1461046957806318160ddd1461048b57600080fd5b806301873d8f1461039157806301986fad146103d657806304c23ffe1461040657600080fd5b3661038c57005b600080fd5b34801561039d57600080fd5b506103c16103ac366004612f49565b606f6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b3480156103e257600080fd5b506103c16103f1366004612f49565b606a6020526000908152604090205460ff1681565b34801561041257600080fd5b506071546103c190600160a01b900460ff1681565b34801561043357600080fd5b5061043c610b3a565b6040516103cd9190612f92565b34801561045557600080fd5b506103c1610464366004612fc5565b610bcc565b34801561047557600080fd5b50610489610484366004612fc5565b610be3565b005b34801561049757600080fd5b506104a0610c1c565b6040519081526020016103cd565b3480156104ba57600080fd5b50606d546104ce906001600160a01b031681565b6040516001600160a01b0390911681526020016103cd565b3480156104f257600080fd5b5061048961050136600461300a565b610c38565b34801561051257600080fd5b506103c1610521366004613043565b610cd1565b34801561053257600080fd5b506104a060765481565b34801561054857600080fd5b50610489610d68565b34801561055d57600080fd5b506074546103c19060ff1681565b34801561057757600080fd5b50610489610efc565b34801561058c57600080fd5b5060695460405160ff90911681526020016103cd565b3480156105ae57600080fd5b506103c16105bd366004612f49565b606e6020526000908152604090205460ff1681565b3480156105de57600080fd5b506070546104ce9061010090046001600160a01b031681565b34801561060357600080fd5b50610489610612366004613084565b610f19565b34801561062357600080fd5b50610489610632366004613084565b610f91565b34801561064357600080fd5b506104a0611014565b34801561065857600080fd5b506072546104ce906001600160a01b031681565b34801561067857600080fd5b5061068c610687366004612f49565b61105d565b604080519283526020830191909152016103cd565b3480156106ad57600080fd5b506104896106bc366004613084565b6110ed565b3480156106cd57600080fd5b506104a060785481565b3480156106e357600080fd5b506104896106f23660046130a1565b611170565b34801561070357600080fd5b506104a060775481565b34801561071957600080fd5b506104a0610728366004612f49565b60656020526000908152604090205481565b34801561074657600080fd5b506104a0610755366004612f49565b6111da565b34801561076657600080fd5b506104896111f5565b34801561077b57600080fd5b506104a0611207565b34801561079057600080fd5b506104a060735481565b3480156107a657600080fd5b5061068c611228565b3480156107bb57600080fd5b506104896107ca366004612fc5565b6112ea565b3480156107db57600080fd5b506104896107ea366004612f49565b611380565b3480156107fb57600080fd5b5061048961080a366004612fc5565b611424565b34801561081b57600080fd5b506033546001600160a01b03166104ce565b34801561083957600080fd5b5061043c611497565b34801561084e57600080fd5b506104a06114a6565b34801561086357600080fd5b506104a060755481565b34801561087957600080fd5b50610489610888366004612fc5565b6114d5565b34801561089957600080fd5b506104896108a836600461300a565b611556565b3480156108b957600080fd5b506103c16108c8366004612fc5565b6115e6565b3480156108d957600080fd5b506108e26115f3565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e0820152610100016103cd565b34801561092957600080fd5b506104896109383660046130d0565b611680565b34801561094957600080fd5b50610489610958366004612f49565b611751565b34801561096957600080fd5b506071546104ce906001600160a01b031681565b34801561098957600080fd5b50610489610998366004613084565b6117f0565b3480156109a957600080fd5b506104896109b83660046130a1565b611873565b3480156109c957600080fd5b506071546103c190600160b01b900460ff1681565b3480156109ea57600080fd5b506109f36118dd565b604080519384526020840192909252908201526060016103cd565b348015610a1a57600080fd5b50610489610a2936600461300a565b61196b565b348015610a3a57600080fd5b506104a0610a493660046131a7565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b348015610a8057600080fd5b50610489610a8f3660046130a1565b6119fb565b348015610aa057600080fd5b506071546103c190600160a81b900460ff1681565b348015610ac157600080fd5b506069546104ce9061010090046001600160a01b031681565b348015610ae657600080fd5b50610489610af5366004612f49565b611a65565b348015610b0657600080fd5b50610489610b153660046130a1565b611ade565b348015610b2657600080fd5b50610489610b353660046131d5565b611b48565b606060678054610b499061324e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b759061324e565b8015610bc25780601f10610b9757610100808354040283529160200191610bc2565b820191906000526020600020905b815481529060010190602001808311610ba557829003601f168201915b5050505050905090565b6000610bd9338484612074565b5060015b92915050565b336000908152606a602052604090205460ff1615610c1857606954610c1890839061010090046001600160a01b0316836120d6565b5050565b6000610c26611207565b606c54610c339190613298565b905090565b336000818152606a602052604090205460ff168015610c8057506069546001600160a01b03828116610100909204161480610c8057506033546001600160a01b038281169116145b610ca55760405162461bcd60e51b8152600401610c9c906132af565b60405180910390fd5b506001600160a01b03919091166000908152606f60205260409020805460ff1916911515919091179055565b6000610cde8484846121e1565b6001600160a01b038416600090815260666020908152604080832033845290915290205460001914610d5e576001600160a01b0384166000908152606660209081526040808320338452909152902054610d39908390613298565b6001600160a01b03851660009081526066602090815260408083203384529091529020555b5060019392505050565b60745460ff1615610d7557565b7f0000000000000000000000000000000000000000000000000000000000000000607354610da391906132d8565b421015610dac57565b6072546001600160a01b03166000819003610dc45750565b4260735560755460705460009161271091610dec9061010090046001600160a01b03166111da565b610df691906132f0565b610e00919061330f565b607054909150610e1f9061010090046001600160a01b0316838361242b565b607060019054906101000a90046001600160a01b03166001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e6f57600080fd5b505af1158015610e83573d6000803e3d6000fd5b505060405163137320f560e11b8152600481018490526001600160a01b03851692506326e641ea9150602401600060405180830381600087803b158015610ec957600080fd5b505af1158015610edd573d6000803e3d6000fd5b505050508060766000828254610ef391906132d8565b90915550505050565b606954610f179061010090046001600160a01b031647612478565b565b336000818152606a602052604090205460ff168015610f6157506069546001600160a01b03828116610100909204161480610f6157506033546001600160a01b038281169116145b610f7d5760405162461bcd60e51b8152600401610c9c906132af565b506074805460ff1916911515919091179055565b336000818152606a602052604090205460ff168015610fd957506069546001600160a01b03828116610100909204161480610fd957506033546001600160a01b038281169116145b610ff55760405162461bcd60e51b8152600401610c9c906132af565b5060718054911515600160a01b0260ff60a01b19909216919091179055565b6000806000611021611228565b9092509050801561105857606954819083906110419060ff16600a613415565b61104b91906132f0565b611055919061330f565b92505b505090565b6001600160a01b038181166000818152606b60205260408082205460705491516370a0823160e01b81526004810194909452939192610100909104909116906370a0823190602401602060405180830381865afa1580156110c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e69190613424565b9050915091565b336000818152606a602052604090205460ff16801561113557506069546001600160a01b0382811661010090920416148061113557506033546001600160a01b038281169116145b6111515760405162461bcd60e51b8152600401610c9c906132af565b5060718054911515600160a81b0260ff60a81b19909216919091179055565b336000818152606a602052604090205460ff1680156111b857506069546001600160a01b038281166101009092041614806111b857506033546001600160a01b038281169116145b6111d45760405162461bcd60e51b8152600401610c9c906132af565b50607755565b6001600160a01b031660009081526065602052604090205490565b6111fd612525565b610f17600061257f565b600061121461dead6111da565b61121e60006111da565b610c3391906132d8565b6000806000607060019054906101000a90046001600160a01b03169050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112aa9190613454565b506071546001600160701b039283169450911691506001600160a01b0316308110156112db578295508194506112e2565b8195508294505b505050509091565b336000818152606a602052604090205460ff16801561133257506069546001600160a01b0382811661010090920416148061133257506033546001600160a01b038281169116145b61134e5760405162461bcd60e51b8152600401610c9c906132af565b6001600160a01b0383166000908152606b6020526040812080548492906113769084906132d8565b9091555050505050565b336000818152606a602052604090205460ff1680156113c857506069546001600160a01b038281166101009092041614806113c857506033546001600160a01b038281169116145b6113e45760405162461bcd60e51b8152600401610c9c906132af565b5060698054610100600160a81b0319166101006001600160a01b03939093169283021790556000908152606a60205260409020805460ff19166001179055565b6072546001600160a01b0316331461146f5760405162461bcd60e51b815260206004820152600e60248201526d1bdb9b1e481b5a5b9d081c1bdbdb60921b6044820152606401610c9c565b6001600160a01b0382166000908152606b602052604081208054839290610ef39084906132d8565b606060688054610b499061324e565b6070546000906114c39061010090046001600160a01b03166111da565b6114cb610c1c565b610c339190613298565b336000818152606a602052604090205460ff16801561151d57506069546001600160a01b0382811661010090920416148061151d57506033546001600160a01b038281169116145b6115395760405162461bcd60e51b8152600401610c9c906132af565b506001600160a01b039091166000908152606b6020526040902055565b336000818152606a602052604090205460ff16801561159e57506069546001600160a01b0382811661010090920416148061159e57506033546001600160a01b038281169116145b6115ba5760405162461bcd60e51b8152600401610c9c906132af565b506001600160a01b03919091166000908152606e60205260409020805460ff1916911515919091179055565b6000610bd93384846121e1565b6000806000806000806000806116076114a6565b9750611611610c1c565b965061161b611207565b9550611625611014565b94506076549350612710607554611650607060019054906101000a90046001600160a01b03166111da565b61165a91906132f0565b611664919061330f565b6069549899979896979596949590946012945060ff1692509050565b336000818152606a602052604090205460ff1680156116c857506069546001600160a01b038281166101009092041614806116c857506033546001600160a01b038281169116145b6116e45760405162461bcd60e51b8152600401610c9c906132af565b60005b835181101561174b5782606a6000868481518110611707576117076134a4565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611743816134ba565b9150506116e7565b50505050565b336000818152606a602052604090205460ff16801561179957506069546001600160a01b0382811661010090920416148061179957506033546001600160a01b038281169116145b6117b55760405162461bcd60e51b8152600401610c9c906132af565b50607280546001600160a01b039092166001600160a01b0319909216821790556000908152606a60205260409020805460ff19166001179055565b336000818152606a602052604090205460ff16801561183857506069546001600160a01b0382811661010090920416148061183857506033546001600160a01b038281169116145b6118545760405162461bcd60e51b8152600401610c9c906132af565b5060718054911515600160b01b0260ff60b01b19909216919091179055565b336000818152606a602052604090205460ff1680156118bb57506069546001600160a01b038281166101009092041614806118bb57506033546001600160a01b038281169116145b6118d75760405162461bcd60e51b8152600401610c9c906132af565b50607355565b60008060006118ea611228565b6071546070546040516370a0823160e01b81526001600160a01b036101009092048216600482015293965091945016906370a0823190602401602060405180830381865afa158015611940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119649190613424565b9050909192565b336000818152606a602052604090205460ff1680156119b357506069546001600160a01b038281166101009092041614806119b357506033546001600160a01b038281169116145b6119cf5760405162461bcd60e51b8152600401610c9c906132af565b506001600160a01b03919091166000908152606a60205260409020805460ff1916911515919091179055565b336000818152606a602052604090205460ff168015611a4357506069546001600160a01b03828116610100909204161480611a4357506033546001600160a01b038281169116145b611a5f5760405162461bcd60e51b8152600401610c9c906132af565b50607855565b611a6d612525565b6001600160a01b038116611ad25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c9c565b611adb8161257f565b50565b336000818152606a602052604090205460ff168015611b2657506069546001600160a01b03828116610100909204161480611b2657506033546001600160a01b038281169116145b611b425760405162461bcd60e51b8152600401610c9c906132af565b50607555565b600054610100900460ff1615808015611b685750600054600160ff909116105b80611b825750303b158015611b82575060005460ff166001145b611be55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c9c565b6000805460ff191660011790558015611c08576000805461ff0019166101001790555b60408051808201909152600b81526a426c6f636b2053746f726d60a81b6020820152606790611c379082613521565b50604080518082019091526003815262424f5360e81b6020820152606890611c5f9082613521565b506069805460ff199081166012179091556071805460ff60a01b1916600160a01b179055607480548216600190811790915560466075556103e8607755612710607855606d80546001600160a01b038b166001600160a01b0319909116811790915530600090815260666020908152604080832084845282528083206000199055606f82528083208054909616909417909455825163c45a015560e01b815292518b94919363c45a01559260048281019391928290030181865afa158015611d2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4f91906135e1565b607180546001600160a01b0319166001600160a01b038b811691821790925560405163095ea7b360e01b81529185166004830152600019602483015291925063095ea7b3906044016020604051808303816000875af1158015611db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dda91906135fe565b506071546040516364e329cb60e11b81523060048201526001600160a01b03918216602482015260009183169063c9c65396906044016020604051808303816000875af1158015611e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5391906135e1565b6001600160a01b0381166000818152606e60205260408120805460ff1916600117905560708054610100909302610100600160a81b031990931692909217909155909150670de0b6b3a764000090611eab828b6132f0565b606c8190556001600160a01b038a1660008181526065602090815260408083208590555184815293945084937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a360698054610100600160a81b0319166101006001600160a01b038c8116918202929092179092558b81166000908152606a6020526040808220805460ff19908116600190811790925594835281832080548616821790553083528183208054861682179055928a1682528082208054851684179055338252812080548416831790557f6021fa82de881996a3e5fd2d032f74dfe72746b8a66c5510d4ab1a3cb789150780548416831790557f335328446f5a016d99ac6481f9fc72f87ea5b00823fecac528cf7c0cce27f2708054841683179055739e80518a58442293c607c788c85ea8cc08885c0890527fea7a11da43e61a807df35bdcc02dc59a1e38dbc69a9ee92ec18577f57f55f3c3805490921617905561201f8861257f565b505050505050801561206b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691612132919061361b565b6000604051808303816000865af19150503d806000811461216f576040519150601f19603f3d011682016040523d82523d6000602084013e612174565b606091505b509150915081801561219e57508051158061219e57508080602001905181019061219e91906135fe565b6121da5760405162461bcd60e51b815260206004820152600d60248201526c1d1c985b9cd9995c8819985a5b609a1b6044820152606401610c9c565b5050505050565b60006121ec846111da565b90508181101561222f5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610c9c565b6001600160a01b0384166000908152606a602052604081205460ff1615801561227157506001600160a01b0384166000908152606a602052604090205460ff16155b156122a6575060016000620186a061228c846201869f6132f0565b612296919061330f565b9050808411156122a4578093505b505b6070546000908190819081906001600160a01b03898116610100909204161480156122e05750336000908152606f602052604090205460ff165b1561232c576122ee876125d1565b9050801561232c576001600160a01b0389166000908152606b602052604081208054909350829184916123229084906132d8565b9091555060019450505b6070546000906001600160a01b036101009091048116908b160361241157607154600160a01b900460ff161561236c576123658861263c565b9050612378565b612375886127a5565b90505b8015612411576001600160a01b0389166000908152606b60205260409020548111156123df5760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e74206c697175696469747960501b6044820152606401610c9c565b6001600160a01b0389166000908152606b602052604081208054839290612407908490613298565b9091555060019450505b61241f8a8a8a89888a61287f565b50505050505050505050565b6001600160a01b03831660009081526065602052604090205461244f908290613298565b6001600160a01b038416600090815260656020526040902055612473838383612b34565b505050565b604080516000808252602082019092526001600160a01b0384169083906040516124a2919061361b565b60006040518083038185875af1925050503d80600081146124df576040519150601f19603f3d011682016040523d82523d6000602084013e6124e4565b606091505b50509050806124735760405162461bcd60e51b815260206004820152600d60248201526c1d1c985b9cd9995c8819985a5b609a1b6044820152606401610c9c565b6033546001600160a01b03163314610f175760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c9c565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806000806125df6118dd565b925092509250600080841180156125f65750600083115b15612613578261260685886132f0565b612610919061330f565b90505b61261d81856132d8565b82106126335761262f82878686612bac565b5094505b50505050919050565b60008060008061264a6118dd565b925092509250828110156127155760705461010090046001600160a01b0316600090815260656020526040902054612683908690613298565b607060019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fa9190613424565b61270490876132f0565b61270e919061330f565b935061279d565b600080841180156127265750600083115b15612633576127358684613298565b61273f85886132f0565b612749919061330f565b905061275584826132d8565b8210156126335760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e74206c697175696469747960501b6044820152606401610c9c565b505050919050565b60008060006127b26118dd565b9250509150818110156128785760705461010090046001600160a01b03166000908152606560205260409020546127ea908590613298565b607060019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561283d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128619190613424565b61286b90866132f0565b612875919061330f565b92505b5050919050565b6001600160a01b0386166000908152606560205260409020546128a28582613298565b6001600160a01b0388166000908152606560205260409020819055905082612b2d57811561292057831561291b57607154600160b01b900460ff1661291b5760405162461bcd60e51b815260206004820152600f60248201526e1bdb9b1e481cdd185c9d081cd95b1b608a1b6044820152606401610c9c565b612b2d565b6001600160a01b0387166000908152606e602052604090205460ff16156129c457831561291b57607154600160a81b900460ff16801561296e5750606d546001600160a01b03878116911614155b61291b5760405162461bcd60e51b815260206004820152602160248201527f6f6e6c792073746172742062757920616e64206e6f742073776170526f7574656044820152603960f91b6064820152608401610c9c565b6001600160a01b0386166000908152606e602052604090205460ff1615612b2d578315612a3657607154600160b01b900460ff16612a365760405162461bcd60e51b815260206004820152600f60248201526e1bdb9b1e481cdd185c9d081cd95b1b608a1b6044820152606401610c9c565b6000612a41876111da565b905061271060775482612a5491906132f0565b612a5e919061330f565b861115612aa45760405162461bcd60e51b81526020600482015260146024820152733737ba1032b737bab3b4103837b7b62a37b5b2b760611b6044820152606401610c9c565b600061271060785488612ab791906132f0565b612ac1919061330f565b90508015612b2a57612ad68861dead8361242b565b876001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612b1157600080fd5b505af1158015612b25573d6000803e3d6000fd5b505050505b50505b61206b8787875b6001600160a01b038216600090815260656020526040902054612b589082906132d8565b6001600160a01b0380841660008181526065602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906120c99085815260200190565b6000806000607060019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c289190613424565b90506000606d60009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca391906135e1565b6001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0491906135e1565b60705460408051637464fc3d60e01b815290519293506001600160a01b03808516151593600093610100900490911691637464fc3d9160048083019260209291908290030181865afa158015612d5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d829190613424565b90508115612e27578015612e27576000612da4612d9f898b6132f0565b612ea1565b90506000612db183612ea1565b905080821115612e24576000612dc78284613298565b612dd190886132f0565b612ddc9060086132f0565b90506000612deb8360086132f0565b612df68560116132f0565b612e0091906132d8565b9050612e0c818361330f565b98508815612e2157612e1e89896132d8565b97505b50505b50505b6000612e33898c613298565b905084600003612e5e576103e8612e4d612d9f8c846132f0565b612e579190613298565b9650612e93565b612e9089612e6c87846132f0565b612e76919061330f565b89612e81888e6132f0565b612e8b919061330f565b612f11565b96505b505050505094509492505050565b60006003821115612f025750806000612ebb60028361330f565b612ec69060016132d8565b90505b81811015612efc57905080600281612ee1818661330f565b612eeb91906132d8565b612ef5919061330f565b9050612ec9565b50919050565b8115612f0c575060015b919050565b6000818310612f205781612f22565b825b9392505050565b6001600160a01b0381168114611adb57600080fd5b8035612f0c81612f29565b600060208284031215612f5b57600080fd5b8135612f2281612f29565b60005b83811015612f81578181015183820152602001612f69565b8381111561174b5750506000910152565b6020815260008251806020840152612fb1816040850160208701612f66565b601f01601f19169190910160400192915050565b60008060408385031215612fd857600080fd5b8235612fe381612f29565b946020939093013593505050565b8015158114611adb57600080fd5b8035612f0c81612ff1565b6000806040838503121561301d57600080fd5b823561302881612f29565b9150602083013561303881612ff1565b809150509250929050565b60008060006060848603121561305857600080fd5b833561306381612f29565b9250602084013561307381612f29565b929592945050506040919091013590565b60006020828403121561309657600080fd5b8135612f2281612ff1565b6000602082840312156130b357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156130e357600080fd5b823567ffffffffffffffff808211156130fb57600080fd5b818501915085601f83011261310f57600080fd5b8135602082821115613123576131236130ba565b8160051b604051601f19603f83011681018181108682111715613148576131486130ba565b60405292835281830193508481018201928984111561316657600080fd5b948201945b8386101561318b5761317c86612f3e565b8552948201949382019361316b565b965061319a9050878201612fff565b9450505050509250929050565b600080604083850312156131ba57600080fd5b82356131c581612f29565b9150602083013561303881612f29565b60008060008060008060c087890312156131ee57600080fd5b86356131f981612f29565b9550602087013561320981612f29565b945060408701359350606087013561322081612f29565b9250608087013561323081612f29565b915060a087013561324081612f29565b809150509295509295509295565b600181811c9082168061326257607f821691505b602082108103612efc57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156132aa576132aa613282565b500390565b6020808252600f908201526e1bdb9b1e481dda1a5d19481b1a5cdd608a1b604082015260600190565b600082198211156132eb576132eb613282565b500190565b600081600019048311821515161561330a5761330a613282565b500290565b60008261332c57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561336c57816000190482111561335257613352613282565b8085161561335f57918102915b93841c9390800290613336565b509250929050565b60008261338357506001610bdd565b8161339057506000610bdd565b81600181146133a657600281146133b0576133cc565b6001915050610bdd565b60ff8411156133c1576133c1613282565b50506001821b610bdd565b5060208310610133831016604e8410600b84101617156133ef575081810a610bdd565b6133f98383613331565b806000190482111561340d5761340d613282565b029392505050565b6000612f2260ff841683613374565b60006020828403121561343657600080fd5b5051919050565b80516001600160701b0381168114612f0c57600080fd5b60008060006060848603121561346957600080fd5b6134728461343d565b92506134806020850161343d565b9150604084015163ffffffff8116811461349957600080fd5b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b6000600182016134cc576134cc613282565b5060010190565b601f82111561247357600081815260208120601f850160051c810160208610156134fa5750805b601f850160051c820191505b8181101561351957828155600101613506565b505050505050565b815167ffffffffffffffff81111561353b5761353b6130ba565b61354f81613549845461324e565b846134d3565b602080601f831160018114613584576000841561356c5750858301515b600019600386901b1c1916600185901b178555613519565b600085815260208120601f198616915b828110156135b357888601518255948401946001909101908401613594565b50858210156135d15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156135f357600080fd5b8151612f2281612f29565b60006020828403121561361057600080fd5b8151612f2281612ff1565b6000825161362d818460208701612f66565b919091019291505056fea26469706673582212209c49b2c3d00b9be891826e7133d5e040d1b315262bf3118c43823fe6f2d7e08564736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 681,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 786,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 792,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 794,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_name",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 796,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "104",
        "type": "t_string_storage"
      },
      {
        "astId": 798,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_decimals",
        "offset": 0,
        "slot": "105",
        "type": "t_uint8"
      },
      {
        "astId": 800,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "fundAddress",
        "offset": 1,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 804,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_feeWhiteList",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 809,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_userInfo",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_struct(UserInfo)782_storage)"
      },
      {
        "astId": 811,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_tTotal",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 814,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_swapRouter",
        "offset": 0,
        "slot": "109",
        "type": "t_contract(ISwapRouter)2786"
      },
      {
        "astId": 818,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_swapPairList",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 822,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_swapRouters",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 824,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "inSwap",
        "offset": 0,
        "slot": "112",
        "type": "t_bool"
      },
      {
        "astId": 826,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_mainPair",
        "offset": 1,
        "slot": "112",
        "type": "t_address"
      },
      {
        "astId": 828,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_usdt",
        "offset": 0,
        "slot": "113",
        "type": "t_address"
      },
      {
        "astId": 830,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_strictCheck",
        "offset": 20,
        "slot": "113",
        "type": "t_bool"
      },
      {
        "astId": 832,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_startBuy",
        "offset": 21,
        "slot": "113",
        "type": "t_bool"
      },
      {
        "astId": 834,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_startSell",
        "offset": 22,
        "slot": "113",
        "type": "t_bool"
      },
      {
        "astId": 837,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_mintPool",
        "offset": 0,
        "slot": "114",
        "type": "t_contract(IMintPool)2677"
      },
      {
        "astId": 839,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_lastGiveRewardTime",
        "offset": 0,
        "slot": "115",
        "type": "t_uint256"
      },
      {
        "astId": 844,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_pauseGiveReward",
        "offset": 0,
        "slot": "116",
        "type": "t_bool"
      },
      {
        "astId": 846,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_giveRewardRate",
        "offset": 0,
        "slot": "117",
        "type": "t_uint256"
      },
      {
        "astId": 848,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_totalMintReward",
        "offset": 0,
        "slot": "118",
        "type": "t_uint256"
      },
      {
        "astId": 850,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_sellPoolRate",
        "offset": 0,
        "slot": "119",
        "type": "t_uint256"
      },
      {
        "astId": 852,
        "contract": "contracts/BosToken.sol:BosToken",
        "label": "_sellPoolDestroyRate",
        "offset": 0,
        "slot": "120",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMintPool)2677": {
        "encoding": "inplace",
        "label": "contract IMintPool",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)2786": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserInfo)782_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BosToken.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)782_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(UserInfo)782_storage": {
        "encoding": "inplace",
        "label": "struct BosToken.UserInfo",
        "members": [
          {
            "astId": 779,
            "contract": "contracts/BosToken.sol:BosToken",
            "label": "lpAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 781,
            "contract": "contracts/BosToken.sol:BosToken",
            "label": "preLP",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}