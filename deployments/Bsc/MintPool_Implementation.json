{
  "address": "0xA16c96022d99a7fa412BAac81c5B541C2fb4102D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "selfAmount",
          "type": "uint256"
        }
      ],
      "name": "Sell",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "powerAmount",
          "type": "uint256"
        }
      ],
      "name": "nftPowerReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "nftTokenReward",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_amountDailyUp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_binder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_fundAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rUsdt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_inProject",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_inviteAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_inviteFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_invitor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lastAmountRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lastDailyUpTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lpReleaseDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_nft",
      "outputs": [
        {
          "internalType": "contract INFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_pauseSell",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellJoinRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellLPReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellNFTRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellSelfRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_speedUpDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_speedUpReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_teamAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_teamNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_userLPInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastReleaseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseInitAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedUpTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "addTotalMintReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "calInvite",
          "type": "bool"
        }
      ],
      "name": "addUserAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardMintDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "calMintReward",
              "type": "uint256"
            }
          ],
          "internalType": "struct MintPool.UserInfo[]",
          "name": "userInfos",
          "type": "tuple[]"
        }
      ],
      "name": "batchInsertUserInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "invitor",
          "type": "address"
        }
      ],
      "name": "bindInvitor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userRewardLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateNFTReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "invitor",
          "type": "address"
        }
      ],
      "name": "checkForLevelUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "invitor",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "usdt",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "usdtDecimals",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "mintRewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintRewardTokenDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalUsdt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDailyReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dailyAmountRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "defaultInvitor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "pauseJoin",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBinderLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "getBinderList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnCount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "binders",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getDirectList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "binders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "teamAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdtAmount",
          "type": "uint256"
        }
      ],
      "name": "getJoinTokenAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLPInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalLP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockLP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedUpMaxTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedCostUsdt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedCostToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPendingMintReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "getSellUsdtOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "selfUsdt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdtBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdtAllowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingMintReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inviteAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellJoinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "teamNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "teamAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserLPInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastReleaseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseInitAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedUpTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAllowance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserNFTLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usdt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mintRewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "defaultInvitor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accMintPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accMintReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPerSec",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastMintTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMintReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "sell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setAmountDailyUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setDefaultInvitor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setFundAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setInProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setInviteFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "name": "setLPReleaseDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setLastAmountRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "setLastDailyUpTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintPerSec",
          "type": "uint256"
        }
      ],
      "name": "setMintPerSec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        }
      ],
      "name": "setNFTAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "p",
          "type": "bool"
        }
      ],
      "name": "setPauseSell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setSeedUpReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setSellJoinRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setSellLPReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setSellNFTRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "name": "setSellSelfRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "c",
          "type": "uint256"
        }
      ],
      "name": "setSpeedUpCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "name": "setSpeedUpDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mt",
          "type": "uint256"
        }
      ],
      "name": "setSpeedUpMaxTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "setUserLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "speedUpLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "superAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateDailyUpRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardMintDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calMintReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v1Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v2Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v3Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v4Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v5Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x156d0da8ccc3a347bc7fc2ac894c149403222bc5b31bc2dbcf5783b22993a16e",
  "receipt": {
    "to": null,
    "from": "0xADFdeD5FA47a15E95954AFD50F3b107eB222bEBa",
    "contractAddress": "0xA16c96022d99a7fa412BAac81c5B541C2fb4102D",
    "transactionIndex": 102,
    "gasUsed": "5369745",
    "logsBloom": "0x
    "blockHash": "0x8789d1e6e726b7b81c8ce441cec5ea9c7fa6e11456dc9f21df11d97c68d9a056",
    "transactionHash": "0x156d0da8ccc3a347bc7fc2ac894c149403222bc5b31bc2dbcf5783b22993a16e",
    "logs": [
      {
        "transactionIndex": 102,
        "blockNumber": 34949563,
        "transactionHash": "0x156d0da8ccc3a347bc7fc2ac894c149403222bc5b31bc2dbcf5783b22993a16e",
        "address": "0xA16c96022d99a7fa412BAac81c5B541C2fb4102D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000adfded5fa47a15e95954afd50f3b107eb222beba"
        ],
        "data": "0x",
        "logIndex": 188,
        "blockHash": "0x8789d1e6e726b7b81c8ce441cec5ea9c7fa6e11456dc9f21df11d97c68d9a056"
      }
    ],
    "blockNumber": 34949563,
    "cumulativeGasUsed": "13388760",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4765f952901190a43a4844bfb90ab4a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"selfAmount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"powerAmount\",\"type\":\"uint256\"}],\"name\":\"nftPowerReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"nftTokenReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_amountDailyUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_binder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inProject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inviteAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_inviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_invitor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastAmountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastDailyUpTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpReleaseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nft\",\"outputs\":[{\"internalType\":\"contract INFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pauseSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellJoinRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellNFTRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellSelfRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_speedUpDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_speedUpReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_teamAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_teamNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userLPInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseInitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedUpTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"addTotalMintReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"calInvite\",\"type\":\"bool\"}],\"name\":\"addUserAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardMintDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calMintReward\",\"type\":\"uint256\"}],\"internalType\":\"struct MintPool.UserInfo[]\",\"name\":\"userInfos\",\"type\":\"tuple[]\"}],\"name\":\"batchInsertUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"bindInvitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userRewardLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateNFTReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"checkForLevelUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdtDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mintRewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintRewardTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDailyReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyAmountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"defaultInvitor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"pauseJoin\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBinderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getBinderList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"binders\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDirectList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"binders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"teamAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"getJoinTokenAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedUpMaxTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedCostUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedCostToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPendingMintReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getSellUsdtOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingMintReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellJoinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserLPInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseInitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedUpTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserNFTLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintRewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultInvitor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMintPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMintReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMintTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMintReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setAmountDailyUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setDefaultInvitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setInProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setInviteFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setLPReleaseDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setLastAmountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setLastDailyUpTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPerSec\",\"type\":\"uint256\"}],\"name\":\"setMintPerSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"p\",\"type\":\"bool\"}],\"name\":\"setPauseSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setSeedUpReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setSellJoinRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setSellLPReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setSellNFTRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setSellSelfRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setSpeedUpCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setSpeedUpDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mt\",\"type\":\"uint256\"}],\"name\":\"setSpeedUpMaxTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setUserLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokenAmount\",\"type\":\"uint256\"}],\"name\":\"speedUpLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"superAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDailyUpRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardMintDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calMintReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v3Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v4Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v5Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintPool.sol\":\"MintPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/MintPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport \\\"./interface/INFT.sol\\\";\\nimport \\\"./interface/ISwapRouter.sol\\\";\\nimport \\\"./interface/ISwapFactory.sol\\\";\\nimport \\\"./interface/ISwapPair.sol\\\";\\nimport \\\"./interface/IToken.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\ncontract MintPool is Ownable, Initializable {\\n    struct UserInfo {\\n        bool isActive;  \\n        uint256 amount; \\n        uint256 rewardMintDebt; \\n        uint256 calMintReward;  \\n    }\\n\\n    struct PoolInfo {\\n        uint256 totalAmount;\\n        uint256 accMintPerShare;\\n        uint256 accMintReward;\\n        uint256 mintPerSec;\\n        uint256 lastMintTime;\\n        uint256 totalMintReward;\\n    }\\n\\n    struct UserLPInfo {\\n        uint256 lockAmount;\\n        uint256 calAmount;\\n        uint256 claimedAmount;\\n        uint256 lastReleaseTime;\\n        uint256 releaseInitAmount;\\n        uint256 releaseDuration;\\n        uint256 speedUpTime;\\n    }\\n\\n    PoolInfo public poolInfo;\\n    mapping(address => UserInfo) public userInfo;\\n    mapping(address => UserLPInfo) public _userLPInfo;\\n\\n    ISwapRouter private _swapRouter;\\n    address private _usdt;             \\n    uint256 private _minAmount;\\n    address private _mintRewardToken;  \\n    address public  _lp;\\n    INFT public _nft;\\n\\n    mapping(address => address) public _invitor; \\n    mapping(address => address[]) public _binder; \\n    mapping(uint256 => uint256) public _inviteFee;\\n    uint256 private immutable _inviteLen = 3;\\n    address private _defaultInvitor;\\n\\n    mapping(address => uint256) public _inviteAmount;\\n    mapping(address => uint256) public _teamAmount;\\n    mapping(address => uint256) public _teamNum;  \\n\\n    bool public _pauseSell;\\n    uint256 public _sellSelfRate;\\n    uint256 public _sellJoinRate;\\n    uint256 public _sellNFTRate;\\n    address public _sellLPReceiver;\\n    mapping(address => uint256) private _sellJoinAmount;\\n    address public _fundAddress;\\n\\n    mapping(address => address[]) public referrals;  \\n    mapping(address => address) public superAccount; \\n    mapping(address => uint256) public referralAmount;  \\n    mapping(address => uint256) public depositAmount;   \\n    mapping(address => uint256) public referralReward;\\n    mapping(address => uint256) public userLevel;\\n\\n    uint256 public immutable v1Amount = 2500 ether;\\n    uint256 public immutable v2Amount = 20000 ether;\\n    uint256 public immutable v3Amount = 50000 ether;\\n    uint256 public immutable v4Amount = 150000 ether;\\n    uint256 public immutable v5Amount = 500000 ether;\\n\\n    bool private _pauseJoin;\\n    uint256 public _lastDailyUpTime;\\n    uint256 public _lastAmountRate;\\n    uint256 public _amountDailyUp;\\n    uint256 private immutable _divFactor = 10000;\\n    uint256 private immutable _dailyDuration = 1 days;\\n\\n    uint256 public _lpReleaseDuration;\\n    //\\n    uint256 private _speedUpCost;\\n    uint256 public _speedUpDuration;\\n    address public _speedUpReceiver;\\n    uint256 private _speedUpMaxTime;\\n    uint256 private _totalUsdt;\\n\\n    mapping(address => bool) public _inProject;\\n    uint256 private _lastDailyReward;\\n\\n\\n    event nftTokenReward(address indexed account, uint256 indexed level, uint256 indexed tokenAmount);\\n    event nftPowerReward(address indexed account, uint256 indexed level, uint256 indexed powerAmount);\\n    event Deposit(address indexed account, uint256 indexed amount);\\n    event Sell(address indexed account, uint256 indexed tokenAmount, uint256 indexed selfAmount);\\n\\n\\n    // ******** modifier *********\\n\\n    modifier onlyWhiteList() {\\n        require(\\n            msg.sender == _fundAddress ||\\n            msg.sender == owner() ||\\n            msg.sender == address(_nft),\\n            \\\"only white list\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyInProject() {\\n        require(_inProject[msg.sender] || msg.sender == owner(), \\\"only project\\\");\\n        _;\\n    }\\n\\n\\n    // ******** constructor *********\\n    function initialize(\\n        address swapRouter,\\n        address usdt,\\n        address mintRewardToken,\\n        address nft,\\n        address defaultInvitor,\\n        address fundAddress,\\n        address _owner\\n    ) external initializer {\\n        _pauseJoin = true;\\n        _swapRouter = ISwapRouter(swapRouter);\\n        _usdt = usdt;\\n        _minAmount = 10 ether;\\n        _nft = INFT(nft);\\n        _mintRewardToken = mintRewardToken;\\n\\n        _lp = ISwapFactory(_swapRouter.factory()).getPair(usdt, mintRewardToken);\\n\\n        poolInfo.lastMintTime = block.timestamp;\\n        _defaultInvitor = defaultInvitor;\\n        userInfo[defaultInvitor].isActive = true;\\n\\n        _inviteFee[0] = 800;\\n        // 8%\\n        _inviteFee[1] = 500;\\n        // 5%\\n        _inviteFee[2] = 300;\\n        // 3%\\n\\n        _speedUpCost = 300 ether;\\n\\n        safeApprove(usdt, swapRouter, ~uint256(0));\\n        safeApprove(mintRewardToken, swapRouter, ~uint256(0));\\n        _sellLPReceiver = fundAddress;\\n        _fundAddress = fundAddress;\\n        _speedUpMaxTime = 3;\\n        _speedUpReceiver = 0x000000000000000000000000000000000000dEaD;\\n\\n        _sellSelfRate = 5000;\\n        _sellJoinRate = 4000;\\n        _sellNFTRate = 500;\\n\\n        _lastAmountRate = 10000;\\n        _amountDailyUp = 10100;\\n        _lpReleaseDuration = 90 days;\\n        _speedUpDuration = 10 days;\\n\\n        _transferOwnership(_owner);\\n    }\\n\\n    receive() external payable {}\\n\\n\\n//     ******** public *********\\n     function sell(uint256 tokenAmount) public {\\n         require(msg.sender == tx.origin, \\\"not Origin\\\");\\n         require(!_pauseSell, \\\"pause\\\");\\n\\n         _bindInvitor(msg.sender, _defaultInvitor);\\n         _takeToken(_mintRewardToken, msg.sender, address(this), tokenAmount);\\n\\n         IERC20 USDT = IERC20(_usdt);\\n         uint256 usdtBalanceBefore = USDT.balanceOf(address(this));\\n\\n         address[] memory path = new address[](2);\\n         path[0] = _mintRewardToken;\\n         path[1] = _usdt;\\n\\n         _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n             tokenAmount,\\n             0,\\n             path,\\n             address(this),\\n             block.timestamp\\n         );\\n\\n         uint256 usdtAmount = USDT.balanceOf(address(this)) - usdtBalanceBefore;\\n         uint256 selfUsdt = (usdtAmount * _sellSelfRate) / 10000;\\n         _giveToken(_usdt, msg.sender, selfUsdt);\\n\\n         uint256 sellJoinUsdt = (usdtAmount * _sellJoinRate) / 10000;\\n         addLP(msg.sender, sellJoinUsdt, 0, false);\\n\\n         _updatePool();\\n         uint256 sellJoinAmount = (sellJoinUsdt * _lastAmountRate) / _divFactor;\\n         _addUserAmount(msg.sender, sellJoinAmount, false);\\n         _sellJoinAmount[msg.sender] += sellJoinAmount;\\n\\n         uint256 nftUsdt = (usdtAmount * _sellNFTRate) / 10000;\\n         _giveToken(_usdt, address(_nft), nftUsdt);\\n         _nft.addTokenReward(nftUsdt);\\n\\n         uint256 fundUsdt = usdtAmount - selfUsdt - sellJoinUsdt - nftUsdt;\\n         _giveToken(_usdt, _fundAddress, fundUsdt);\\n\\n         IToken(_mintRewardToken).giveMintReward();\\n\\n         emit Sell(msg.sender, tokenAmount, selfUsdt);\\n     }\\n\\n\\n        function deposit(uint256 amount, uint256 minTokenAmount, address invitor) external {\\n            require(!_pauseJoin, \\\"deposit pause\\\");\\n            require(amount >= _minAmount, \\\"deposit too low\\\");\\n\\n            address account = msg.sender;\\n            require(account == msg.sender, \\\"deposit not origin\\\");\\n\\n            _totalUsdt += amount;\\n\\n            _bindInvitor(account, invitor);\\n\\n            _takeToken(_usdt, account, address(this), amount);\\n\\n            addLP(account, amount, minTokenAmount, true);\\n\\n            _updatePool();\\n\\n            _addUserAmount(account, (amount * _lastAmountRate) / _divFactor, true);\\n\\n            IToken(_mintRewardToken).giveMintReward();\\n\\n            distributeNFTRewards(invitor, amount);\\n\\n            addReferral(amount, account, invitor);\\n\\n            emit Deposit(account, amount);\\n        }\\n\\n\\n        function claim() public {\\n            UserInfo storage user = userInfo[msg.sender];\\n\\n            _calReward(user, true);\\n            uint256 pendingMint = user.calMintReward;\\n\\n            if (pendingMint > 0) {\\n                _giveToken(_mintRewardToken, msg.sender, pendingMint);\\n                user.calMintReward = 0;\\n            }\\n\\n            IToken(_mintRewardToken).giveMintReward();\\n        }\\n\\n\\n        function claimLP() public {\\n            require(msg.sender == tx.origin, \\\"claimLP not Origin\\\");\\n\\n            UserLPInfo storage userLPInfo = _userLPInfo[msg.sender];\\n            uint256 nowTime = block.timestamp;\\n\\n            if (userLPInfo.lastReleaseTime > 0 && nowTime > userLPInfo.lastReleaseTime) {\\n                uint256 releaseAmount = (userLPInfo.releaseInitAmount * (nowTime - userLPInfo.lastReleaseTime)) / userLPInfo.releaseDuration;\\n                uint256 maxAmount = userLPInfo.lockAmount - userLPInfo.calAmount - userLPInfo.claimedAmount;\\n                if (releaseAmount > maxAmount) {\\n                    releaseAmount = maxAmount;\\n                }\\n                userLPInfo.calAmount += releaseAmount;\\n            }\\n\\n            uint256 calAmount = userLPInfo.calAmount;\\n\\n            if (calAmount > 0) {\\n                _giveToken(_lp, msg.sender, calAmount);\\n                userLPInfo.calAmount = 0;\\n                userLPInfo.claimedAmount += calAmount;\\n                IToken(_mintRewardToken).addUserLPAmount(msg.sender, calAmount);\\n            }\\n\\n            if (nowTime > userLPInfo.lastReleaseTime) {\\n                userLPInfo.lastReleaseTime = nowTime;\\n            }\\n\\n            IToken(_mintRewardToken).giveMintReward();\\n        }\\n\\n\\n    function checkForLevelUp(address invitor) public {\\n        if (referrals[invitor].length > 1) {\\n            uint256 totalReferralAmount = referralAmount[invitor] + depositAmount[invitor];\\n            uint256 currentLevel = userLevel[invitor];\\n            uint256[5] memory amountCheckArray = [v1Amount * 2, v2Amount, v3Amount, v4Amount, v5Amount];\\n            if (checkLevelCount(invitor, amountCheckArray, totalReferralAmount, currentLevel) && currentLevel < 5) {\\n                userLevel[invitor] = currentLevel + 1;\\n            }\\n        }\\n    }\\n\\n    function getPendingMintReward(address account) public view returns (uint256 reward) {\\n        PoolInfo storage pool = poolInfo;\\n        UserInfo storage user = userInfo[account];\\n\\n        if (user.amount > 0) {\\n            uint256 blockTime = block.timestamp;\\n            uint256 lastRewardTime = pool.lastMintTime;\\n\\n            if (blockTime > lastRewardTime) {\\n                uint256 poolPendingReward = pool.mintPerSec * (blockTime - lastRewardTime);\\n                uint256 totalReward = pool.totalMintReward;\\n                uint256 accReward = pool.accMintReward;\\n                uint256 remainReward = (totalReward > accReward) ? (totalReward - accReward) : 0;\\n\\n                poolPendingReward = (poolPendingReward > remainReward) ? remainReward : poolPendingReward;\\n\\n                reward = (user.amount * (pool.accMintPerShare + (poolPendingReward * 1e18) / pool.totalAmount)) / 1e18 - user.rewardMintDebt;\\n            }\\n        }\\n\\n        return reward;\\n    }\\n\\n\\n    function updateDailyUpRate() public {\\n        uint256 lastDailyUpTime = _lastDailyUpTime;\\n        if (0 == lastDailyUpTime) {\\n            return;\\n        }\\n        uint256 dailyDuration = _dailyDuration;\\n        uint256 nowTime = block.timestamp;\\n        if (nowTime < lastDailyUpTime + dailyDuration) {\\n            return;\\n        }\\n        uint256 ds = (nowTime - lastDailyUpTime) / dailyDuration;\\n        _lastDailyUpTime = lastDailyUpTime + ds * dailyDuration;\\n\\n        uint256 lastAmountRate = _lastAmountRate;\\n        lastAmountRate = (lastAmountRate * _amountDailyUp ** ds) / _divFactor ** ds;\\n        _lastAmountRate = lastAmountRate;\\n    }\\n\\n    function speedUpLP(uint256 maxTokenAmount) public {\\n        require(msg.sender == tx.origin, \\\"not Origin\\\");\\n        UserLPInfo storage userLPInfo = _userLPInfo[msg.sender];\\n        uint256 lastReleaseTime = userLPInfo.lastReleaseTime;\\n        uint256 nowTime = block.timestamp;\\n        if (lastReleaseTime > 0 && nowTime > lastReleaseTime) {\\n            uint256 releaseAmount = (userLPInfo.releaseInitAmount *\\n            (nowTime - lastReleaseTime)) / userLPInfo.releaseDuration;\\n            uint256 maxAmount = userLPInfo.lockAmount -\\n            userLPInfo.calAmount -\\n            userLPInfo.claimedAmount;\\n            if (releaseAmount > maxAmount) {\\n                releaseAmount = maxAmount;\\n            }\\n            userLPInfo.calAmount += releaseAmount;\\n        }\\n\\n        if (nowTime > lastReleaseTime) {\\n            userLPInfo.lastReleaseTime = nowTime;\\n        }\\n\\n        require(userLPInfo.speedUpTime < _speedUpMaxTime, \\\"speedUpTime is max\\\");\\n        userLPInfo.speedUpTime++;\\n        uint256 tokenAmount = getSpeedUpTokenAmount();\\n        require(tokenAmount <= maxTokenAmount, \\\"token amount is too much\\\");\\n        _takeToken(_mintRewardToken, msg.sender, _speedUpReceiver, tokenAmount);\\n\\n        //\\n        uint256 remainAmount = userLPInfo.lockAmount -\\n        userLPInfo.calAmount -\\n        userLPInfo.claimedAmount;\\n        uint256 remainDuration = (remainAmount * userLPInfo.releaseDuration) /\\n        userLPInfo.releaseInitAmount;\\n\\n        //\\n        userLPInfo.releaseInitAmount = remainAmount;\\n        uint256 speedUpDuration = _speedUpDuration;\\n        require(remainDuration > speedUpDuration, \\\"releaseDuration is too short\\\");\\n        userLPInfo.releaseDuration = remainDuration - speedUpDuration;\\n\\n        IToken(_mintRewardToken).giveMintReward();\\n    }\\n\\n    // ******** private *********\\n    function checkLevelCount(address invitor, uint[5] memory amountCheckArray, uint totalReferralAmount, uint currentLevel)\\n    internal view returns (bool) {\\n        address[] memory referralArr = referrals[invitor];\\n        if (totalReferralAmount >= amountCheckArray[currentLevel]) {\\n            uint cnt = 0;\\n            for (uint256 i; i < referrals[invitor].length; ++i) {\\n                if (currentLevel == 0) {\\n                    if (referralAmount[referralArr[i]] + depositAmount[referralArr[i]] >= v1Amount) {\\n                        ++cnt;\\n                    }\\n                } else {\\n                    if (userLevel[referralArr[i]] >= 1) {\\n                        ++cnt;\\n                    }\\n                }\\n                if (cnt >= 2) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n    // Give NFT reward\\n    function distributeNFTRewards(address invitor, uint256 amount) private {\\n        uint256 invLevel = userLevel[invitor];\\n        uint256 nBalance = _nft.balanceOf(invitor);\\n        uint256 rewardAmount = calculateNFTReward(invLevel, amount);\\n\\n        if (invLevel > 0 && nBalance > 0) {\\n            distributeMainReward(invitor, rewardAmount);\\n            distributeSuperRewards(invitor, invLevel, amount);\\n        } else {\\n            // Loop super wallet\\n            address currentAccount = superAccount[invitor];\\n            bool hasNFT = false;\\n            while (currentAccount != address(0) && !hasNFT) {\\n                uint256 sLevel = userLevel[currentAccount];\\n                uint256 sBalance = _nft.balanceOf(currentAccount);\\n                if (sLevel > 0 && sBalance > 0) {\\n                    hasNFT = true;\\n                    rewardAmount = calculateNFTReward(sLevel, amount);\\n                    distributeMainReward(currentAccount, rewardAmount);\\n                    distributeSuperRewards(currentAccount, sLevel, amount);\\n                }\\n                if (currentAccount == superAccount[currentAccount]) {\\n                    currentAccount = address(0);\\n                } else {\\n                    currentAccount = superAccount[currentAccount];\\n                }\\n            }\\n        }\\n    }\\n\\n    function distributeMainReward(address invitor, uint256 rewardAmount) private {\\n        // Add power\\n        uint256 addAmount = (rewardAmount * _lastAmountRate) / _divFactor;\\n        _addUserAmount(invitor, addAmount, false);\\n\\n        uint256 level = userLevel[invitor];\\n        emit nftPowerReward(invitor, level, addAmount);\\n\\n        // Give token\\n        _giveToken(_usdt, invitor, rewardAmount);\\n\\n        emit nftTokenReward(invitor, level, rewardAmount);\\n    }\\n\\n    function distributeSuperRewards(address invitor, uint256 invLevel, uint256 amount) private {\\n        address currentAccount = superAccount[invitor];\\n        uint256 nextLevel = invLevel;\\n        uint256 sameLevel = invLevel + 1;\\n\\n        while (currentAccount != address(0) && nextLevel <= 5) {\\n            uint256 sLevel = userLevel[currentAccount];\\n            uint256 sAmount = calculateNFTReward(sLevel, amount);\\n\\n            if (sLevel > nextLevel || sLevel == sameLevel) {\\n                distributeSuperReward(currentAccount, sAmount);\\n                nextLevel = sLevel;\\n                sameLevel = sLevel + 1;\\n            } else if (sLevel == nextLevel) {\\n                distributeSameLevelReward(currentAccount, sAmount);\\n                nextLevel = sLevel + 1;\\n            }\\n            if (currentAccount == superAccount[currentAccount]) {\\n                currentAccount = address(0);\\n            } else {\\n                currentAccount = superAccount[currentAccount];\\n            }\\n        }\\n    }\\n\\n    function distributeSuperReward(address invitor, uint256 sAmount) private {\\n        // Add power\\n        uint256 srAmount = (sAmount * _lastAmountRate) / _divFactor;\\n        _addUserAmount(invitor, srAmount, false);\\n\\n        uint256 level = userLevel[invitor];\\n        emit nftPowerReward(invitor, level, srAmount);\\n\\n        // Give token\\n        _giveToken(_usdt, invitor, sAmount);\\n\\n        emit nftTokenReward(invitor, level, sAmount);\\n    }\\n\\n    function distributeSameLevelReward(address invitor, uint256 sAmount) private {\\n        // Same level 20% rewards\\n        uint256 srAmount = (sAmount * _lastAmountRate) / _divFactor;\\n        uint256 sameLevelAmount = (srAmount * 20) / 100;\\n\\n        // Add power\\n        _addUserAmount(invitor, sameLevelAmount, false);\\n\\n        uint256 level = userLevel[invitor];\\n        emit nftPowerReward(invitor, level, sameLevelAmount);\\n\\n        // Token reward\\n        uint256 tokenAmount = (sAmount * 20) / 100;\\n        _giveToken(_usdt, invitor, tokenAmount);\\n\\n        emit nftTokenReward(invitor, level, tokenAmount);\\n    }\\n\\n    // NFT add ref\\n    function addReferral(uint256 amount, address account, address invitor) private {\\n        depositAmount[account] += amount;\\n\\n        address currentAccount = invitor;\\n        while (currentAccount != address(0)) {\\n            referralAmount[currentAccount] += amount;\\n            checkForLevelUp(currentAccount);\\n            if (currentAccount == superAccount[currentAccount]) {\\n                currentAccount = address(0);\\n            }\\n            currentAccount = superAccount[currentAccount];\\n        }\\n    }\\n\\n    function addLP(address account, uint256 usdtAmount, uint256 minTokenAmount, bool lockLP) private {\\n        address token = _mintRewardToken;\\n        IERC20 Token = IERC20(token);\\n        uint256 tokenBalanceBefore = Token.balanceOf(address(this));\\n\\n        address usdt = _usdt;\\n        address[] memory path = new address[](2);\\n        path[0] = usdt;\\n        path[1] = token;\\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            usdtAmount / 2,\\n            minTokenAmount,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 tokenAmount = Token.balanceOf(address(this)) - tokenBalanceBefore;\\n\\n        address lpReceiver = lockLP ? address(this) : _sellLPReceiver;\\n        (, , uint256 liquidity) = _swapRouter.addLiquidity(\\n            usdt,\\n            token,\\n            usdtAmount / 2,\\n            tokenAmount,\\n            0,\\n            0,\\n            lpReceiver,\\n            block.timestamp\\n        );\\n        //\\n        if (lockLP) {\\n            _addLockLP(account, liquidity);\\n        } else {\\n            IToken(_mintRewardToken).addUserLPAmount(lpReceiver, liquidity);\\n        }\\n    }\\n\\n    function _addLockLP(address account, uint256 liquidity) private {\\n        UserLPInfo storage userLPInfo = _userLPInfo[account];\\n        uint256 lastReleaseTime = userLPInfo.lastReleaseTime;\\n        uint256 nowTime = block.timestamp;\\n        if (lastReleaseTime > 0 && nowTime > lastReleaseTime) {\\n            uint256 releaseAmount = (userLPInfo.releaseInitAmount * (nowTime - lastReleaseTime)) / userLPInfo.releaseDuration;\\n            uint256 maxAmount = userLPInfo.lockAmount - userLPInfo.calAmount - userLPInfo.claimedAmount;\\n            if (releaseAmount > maxAmount) {\\n                releaseAmount = maxAmount;\\n            }\\n            userLPInfo.calAmount += releaseAmount;\\n        }\\n        uint256 remainAmount = userLPInfo.lockAmount - userLPInfo.calAmount - userLPInfo.claimedAmount;\\n        userLPInfo.lockAmount += liquidity;\\n        userLPInfo.releaseInitAmount = remainAmount + liquidity;\\n        userLPInfo.releaseDuration = _lpReleaseDuration;\\n\\n        if (nowTime > lastReleaseTime) {\\n            userLPInfo.lastReleaseTime = nowTime;\\n        }\\n    }\\n\\n    function _addUserAmount(address account, uint256 amount, bool calInvite) private {\\n        UserInfo storage user = userInfo[account];\\n        _calReward(user, false);\\n\\n        uint256 userAmount = user.amount;\\n        userAmount += amount;\\n        user.amount = userAmount;\\n\\n        uint256 poolTotalAmount = poolInfo.totalAmount;\\n        poolTotalAmount += amount;\\n\\n        uint256 poolAccMintPerShare = poolInfo.accMintPerShare;\\n        user.rewardMintDebt = (userAmount * poolAccMintPerShare) / 1e18;\\n\\n        if (calInvite) {\\n            uint256 len = _inviteLen;\\n            UserInfo storage invitorInfo;\\n            address current = account;\\n            address invitor;\\n            uint256 invitorTotalAmount;\\n            for (uint256 i; i < len; ++i) {\\n                invitor = _invitor[current];\\n                if (address(0) == invitor) {\\n                    break;\\n                }\\n                invitorInfo = userInfo[invitor];\\n                _calReward(invitorInfo, false);\\n                uint256 inviteAmount = (amount * _inviteFee[i]) / 10000;\\n                _inviteAmount[invitor] += inviteAmount;\\n                _teamAmount[invitor] += amount;\\n\\n                invitorTotalAmount = invitorInfo.amount;\\n                invitorTotalAmount += inviteAmount;\\n                invitorInfo.amount = invitorTotalAmount;\\n                invitorInfo.rewardMintDebt = (invitorTotalAmount * poolAccMintPerShare) / 1e18;\\n\\n                poolTotalAmount += inviteAmount;\\n                current = invitor;\\n            }\\n        }\\n        poolInfo.totalAmount = poolTotalAmount;\\n    }\\n\\n    function _updatePool() private {\\n        updateDailyUpRate();\\n        PoolInfo storage pool = poolInfo;\\n        uint256 blockTime = block.timestamp;\\n        uint256 lastRewardTime = pool.lastMintTime;\\n        if (blockTime <= lastRewardTime) {\\n            return;\\n        }\\n        pool.lastMintTime = blockTime;\\n\\n        uint256 accReward = pool.accMintReward;\\n        uint256 totalReward = pool.totalMintReward;\\n        if (accReward >= totalReward) {\\n            return;\\n        }\\n\\n        uint256 totalAmount = pool.totalAmount;\\n        uint256 rewardPerSec = pool.mintPerSec;\\n        if (0 < totalAmount && 0 < rewardPerSec) {\\n            uint256 reward = rewardPerSec * (blockTime - lastRewardTime);\\n            uint256 remainReward = totalReward - accReward;\\n            if (reward > remainReward) {\\n                reward = remainReward;\\n            }\\n            pool.accMintPerShare += (reward * 1e18) / totalAmount;\\n            pool.accMintReward += reward;\\n        }\\n    }\\n\\n    function _calReward(UserInfo storage user, bool updatePool) private {\\n        if (updatePool) {\\n            _updatePool();\\n        }\\n        if (user.amount > 0) {\\n            uint256 accMintReward = (user.amount * poolInfo.accMintPerShare) / 1e18;\\n            uint256 pendingMintAmount = accMintReward - user.rewardMintDebt;\\n            if (pendingMintAmount > 0) {\\n                user.rewardMintDebt = accMintReward;\\n                user.calMintReward += pendingMintAmount;\\n            }\\n        }\\n    }\\n\\n\\n    // ******** view *********\\n    function getDailyRate() private view returns (uint256) {\\n        uint256 lastAmountRate = _lastAmountRate;\\n        uint256 lastDailyUpTime = _lastDailyUpTime;\\n        if (0 == lastDailyUpTime) {\\n            return lastAmountRate;\\n        }\\n        uint256 dailyDuration = _dailyDuration;\\n        uint256 nowTime = block.timestamp;\\n        if (nowTime < lastDailyUpTime + dailyDuration) {\\n            return lastAmountRate;\\n        }\\n        uint256 ds = (nowTime - lastDailyUpTime) / dailyDuration;\\n\\n        uint256 amountDailyUp = _amountDailyUp;\\n        for (uint256 i; i < ds; ++i) {\\n            lastAmountRate = (lastAmountRate * amountDailyUp) / _divFactor;\\n        }\\n        return lastAmountRate;\\n    }\\n\\n    function calculateNFTReward(uint256 userRewardLevel, uint256 amount) public pure returns (uint256){\\n        if (userRewardLevel == 0 || userRewardLevel > 5) {\\n            return 0;\\n        }\\n        return (amount * userRewardLevel) / 100;\\n    }\\n\\n    function getSpeedUpTokenAmount() private view returns (uint256 tokenAmount){\\n        (uint256 rUsdt, uint256 rToken) = _getReserves();\\n        tokenAmount = (_speedUpCost * rToken) / rUsdt;\\n    }\\n\\n    function _getReserves() public view returns (uint256 rUsdt, uint256 rToken){\\n        ISwapPair pair = ISwapPair(_lp);\\n        (uint256 r0, uint256 r1,) = pair.getReserves();\\n\\n        if (_usdt < _mintRewardToken) {\\n            rUsdt = r0;\\n            rToken = r1;\\n        } else {\\n            rUsdt = r1;\\n            rToken = r0;\\n        }\\n    }\\n\\n    function getJoinTokenAmountOut(uint256 usdtAmount) public view returns (uint256 tokenAmount){\\n        address[] memory path = new address[](2);\\n        path[0] = _usdt;\\n        path[1] = _mintRewardToken;\\n        uint256[] memory amounts = _swapRouter.getAmountsOut(\\n            usdtAmount / 2,\\n            path\\n        );\\n        tokenAmount = amounts[1];\\n    }\\n\\n    function getSellUsdtOut(uint256 tokenAmount) public view\\n    returns (uint256 usdtAmount, uint256 selfUsdt, uint256 mintAmount){\\n        address[] memory path = new address[](2);\\n        path[0] = _mintRewardToken;\\n        path[1] = _usdt;\\n        uint256[] memory amounts = _swapRouter.getAmountsOut(tokenAmount, path);\\n        usdtAmount = amounts[1];\\n        selfUsdt = (usdtAmount * _sellSelfRate) / 10000;\\n        mintAmount = (usdtAmount * _sellJoinRate) / 10000;\\n        mintAmount = (mintAmount * getDailyRate()) / 10000;\\n    }\\n\\n    function getBinderLength(address account) public view returns (uint256) {\\n        return _binder[account].length;\\n    }\\n\\n    // NFT level\\n    function getUserNFTLevel(address account) external view returns (uint256) {\\n        return userLevel[account];\\n    }\\n\\n    //\\u7ed1\\u5b9a\\u9080\\u8bf7\\u5173\\u7cfb\\n    function _bindInvitor(address account, address invitor) private {\\n        UserInfo storage user = userInfo[account];\\n        if (!user.isActive) {\\n            require(address(0) != invitor, \\\"invitor 0\\\");\\n            require(userInfo[invitor].isActive, \\\"invitor !Active\\\");\\n            //nft refer\\n            referrals[invitor].push(account);\\n            superAccount[account] = invitor;\\n\\n            _invitor[account] = invitor;\\n            _binder[invitor].push(account);\\n            for (uint256 i; i < _inviteLen;) {\\n                _teamNum[invitor] += 1;\\n                invitor = _invitor[invitor];\\n                if (address(0) == invitor) {\\n                    break;\\n                }\\n            unchecked {\\n                ++i;\\n            }\\n            }\\n            user.isActive = true;\\n        }\\n    }\\n\\n       function getBinderList(address account, uint256 start, uint256 length) external view\\n       returns (uint256 returnCount, address[] memory binders) {\\n           address[] storage _binders = _binder[account];\\n           uint256 recordLen = _binders.length;\\n           if (0 == length) {\\n               length = recordLen;\\n           }\\n           returnCount = length;\\n           binders = new address[](length);\\n           uint256 index = 0;\\n           for (uint256 i = start; i < start + length; i++) {\\n               if (i >= recordLen) {\\n                   return (index, binders);\\n               }\\n               binders[index] = _binders[i];\\n               index++;\\n           }\\n       }\\n\\n       function getDirectList(address account) external view\\n       returns (address[] memory binders, uint256[] memory teamAmounts){\\n           address[] storage _binders = referrals[account];\\n           uint256 recordLen = _binders.length;\\n           binders = new address[](recordLen);\\n           teamAmounts = new uint256[](recordLen);\\n           uint256 index = 0;\\n           for (uint256 i = 0; i < recordLen; i++) {\\n               if (i >= recordLen) {\\n                   return (binders, teamAmounts);\\n               }\\n\\n               address binder = _binders[i];\\n               binders[index] = binder;\\n               teamAmounts[index] = depositAmount[binder] + referralAmount[binder];\\n               index++;\\n           }\\n       }\\n\\n\\n        function getUserLPInfo(address account)\\n        public\\n        view\\n        returns (\\n            uint256 lockAmount,\\n            uint256 calAmount,\\n            uint256 claimedAmount,\\n            uint256 lastReleaseTime,\\n            uint256 releaseInitAmount,\\n            uint256 releaseDuration,\\n            uint256 speedUpTime,\\n            uint256 tokenBalance,\\n            uint256 tokenAllowance\\n        ){\\n            UserLPInfo storage userLPInfo = _userLPInfo[account];\\n            lockAmount = userLPInfo.lockAmount;\\n            calAmount = userLPInfo.calAmount;\\n            claimedAmount = userLPInfo.claimedAmount;\\n            releaseInitAmount = userLPInfo.releaseInitAmount;\\n            releaseDuration = userLPInfo.releaseDuration;\\n            speedUpTime = userLPInfo.speedUpTime;\\n            lastReleaseTime = userLPInfo.lastReleaseTime;\\n            tokenBalance = IERC20(_mintRewardToken).balanceOf(account);\\n            tokenAllowance = IERC20(_mintRewardToken).allowance(\\n                account,\\n                address(this)\\n            );\\n        }\\n\\n        function getUserInfo(address account)\\n        public\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 usdtBalance,\\n            uint256 usdtAllowance,\\n            uint256 pendingMintReward,\\n            uint256 inviteAmount,\\n            uint256 sellJoinAmount,\\n            uint256 teamNum,\\n            uint256 teamAmount\\n        )\\n        {\\n            UserInfo storage user = userInfo[account];\\n            amount = user.amount;\\n            usdtBalance = IERC20(_usdt).balanceOf(account);\\n            usdtAllowance = IERC20(_usdt).allowance(account, address(this));\\n            pendingMintReward = getPendingMintReward(account) + user.calMintReward;\\n            inviteAmount = _inviteAmount[account];\\n            sellJoinAmount = _sellJoinAmount[account];\\n            teamNum = _teamNum[account];\\n            teamAmount = _teamAmount[account];\\n        }\\n\\n        function getBaseInfo()\\n        external\\n        view\\n        returns (\\n            address usdt,\\n            uint256 usdtDecimals,\\n            address mintRewardToken,\\n            uint256 mintRewardTokenDecimals,\\n            uint256 totalUsdt,\\n            uint256 totalAmount,\\n            uint256 lastDailyReward,\\n            uint256 dailyAmountRate,\\n            uint256 minAmount,\\n            address defaultInvitor,\\n            bool pauseJoin\\n        )\\n        {\\n            usdt = _usdt;\\n            usdtDecimals = 18;\\n            mintRewardToken = _mintRewardToken;\\n            mintRewardTokenDecimals = 18;\\n            totalUsdt = _totalUsdt;\\n            totalAmount = poolInfo.totalAmount;\\n            lastDailyReward = _lastDailyReward;\\n            dailyAmountRate = getDailyRate();\\n            minAmount = _minAmount;\\n            defaultInvitor = _defaultInvitor;\\n            pauseJoin = _pauseJoin;\\n        }\\n\\n        function getLPInfo()\\n        external\\n        view\\n        returns (\\n            uint256 totalLP,\\n            uint256 lockLP,\\n            uint256 speedUpMaxTime,\\n            uint256 speedCostUsdt,\\n            uint256 speedCostToken\\n        )\\n        {\\n            totalLP = IERC20(_lp).totalSupply();\\n            lockLP = IERC20(_lp).balanceOf(address(this));\\n            speedUpMaxTime = _speedUpMaxTime;\\n            speedCostUsdt = _speedUpCost;\\n            speedCostToken = getSpeedUpTokenAmount();\\n        }\\n\\n\\n    // ******** owner *********\\n    function setNFTAddress(address _nftAddress) external onlyWhiteList {\\n        _nft = INFT(_nftAddress);\\n    }\\n\\n    function setUserLevel(address account, uint256 level) external onlyWhiteList {\\n        userLevel[account] = level;\\n    }\\n\\n    // Batch userInfo\\n    function batchInsertUserInfo(address[] memory users, UserInfo[] memory userInfos) external onlyWhiteList {\\n        require(users.length == userInfos.length, \\\"Array lengths do not match\\\");\\n        for (uint256 i = 0; i < users.length; i++) {\\n            userInfo[users[i]] = userInfos[i];\\n        }\\n    }\\n\\n    function setPauseSell(bool p) external onlyWhiteList {\\n        _pauseSell = p;\\n    }\\n\\n    function setSellSelfRate(uint256 r) external onlyWhiteList {\\n        _sellSelfRate = r;\\n        require(_sellSelfRate + _sellJoinRate + _sellNFTRate <= 10000, \\\"rate overflow\\\");\\n    }\\n\\n    function setSellJoinRate(uint256 r) external onlyWhiteList {\\n        _sellJoinRate = r;\\n        require(_sellSelfRate + _sellJoinRate + _sellNFTRate <= 10000, \\\"rate overflow\\\");\\n    }\\n\\n    function setSellNFTRate(uint256 r) external onlyWhiteList {\\n        _sellNFTRate = r;\\n        require(_sellSelfRate + _sellJoinRate + _sellNFTRate <= 10000, \\\"rate overflow\\\");\\n    }\\n\\n    function setSellLPReceiver(address a) external onlyWhiteList {\\n        _sellLPReceiver = a;\\n    }\\n\\n    function setFundAddress(address a) external onlyWhiteList {\\n        _fundAddress = a;\\n    }\\n\\n    function setSpeedUpMaxTime(uint256 mt) external onlyWhiteList {\\n        _speedUpMaxTime = mt;\\n    }\\n\\n    function setSpeedUpCost(uint256 c) external onlyWhiteList {\\n        _speedUpCost = c;\\n    }\\n\\n    function setSpeedUpDuration(uint256 d) external onlyWhiteList {\\n        _speedUpDuration = d;\\n    }\\n\\n    function setSeedUpReceiver(address a) external onlyWhiteList {\\n        _speedUpReceiver = a;\\n    }\\n\\n    function setLPReleaseDuration(uint256 d) external onlyWhiteList {\\n        require(d > 0, \\\"release duration must > 0\\\");\\n        _lpReleaseDuration = d;\\n    }\\n\\n    function setAmountDailyUp(uint256 r) external onlyWhiteList {\\n        _amountDailyUp = r;\\n    }\\n\\n    function setLastDailyUpTime(uint256 t) external onlyWhiteList {\\n        _lastDailyUpTime = t;\\n    }\\n\\n    function setLastAmountRate(uint256 r) external onlyWhiteList {\\n        _lastAmountRate = r;\\n    }\\n\\n    function open() external onlyWhiteList {\\n        if (0 == _lastDailyUpTime) {\\n            _lastDailyUpTime = block.timestamp;\\n        }\\n        _pauseJoin = false;\\n    }\\n\\n    function close() external onlyWhiteList {\\n        _pauseJoin = true;\\n    }\\n\\n    function addMintAmount(address account, uint256 amount) external onlyWhiteList {\\n        _bindInvitor(account, _defaultInvitor);\\n        _updatePool();\\n        _addUserAmount(account, amount, false);\\n    }\\n\\n    function setMintPerSec(uint256 mintPerSec) external onlyWhiteList {\\n        _updatePool();\\n        poolInfo.mintPerSec = mintPerSec;\\n    }\\n\\n    function setInviteFee(uint256 i, uint256 fee) external onlyWhiteList {\\n        _inviteFee[i] = fee;\\n    }\\n\\n    function claimBalance(address to, uint256 amount) external onlyWhiteList {\\n        safeTransferETH(to, amount);\\n    }\\n\\n    function claimToken(address token, address to, uint256 amount) external onlyWhiteList {\\n        _giveToken(token, to, amount);\\n    }\\n\\n    function setDefaultInvitor(address adr) external onlyWhiteList {\\n        _defaultInvitor = adr;\\n        userInfo[adr].isActive = true;\\n    }\\n\\n    function setInProject(address adr, bool enable) external onlyWhiteList {\\n        _inProject[adr] = enable;\\n    }\\n\\n    function addTotalMintReward(uint256 reward) external onlyInProject {\\n        _updatePool();\\n        poolInfo.totalMintReward += reward;\\n        poolInfo.mintPerSec = reward / _dailyDuration;\\n        _lastDailyReward = reward;\\n    }\\n\\n    function bindInvitor(address account, address invitor) public onlyInProject {\\n        _bindInvitor(account, invitor);\\n    }\\n\\n//   function bindInvitors(address[] memory account, address[] memory invitor) public onlyInProject {\\n//       for (uint256 i = 0; i < account.length; i++) {\\n//           _bindInvitor(account[i], invitor[i]);\\n//       }\\n//   }\\n\\n    function addUserAmount(address account, uint256 amount, bool calInvite) public onlyInProject {\\n        _bindInvitor(account, _defaultInvitor);\\n        _updatePool();\\n        _addUserAmount(account, amount, calInvite);\\n    }\\n\\n\\n    // ******** utils *********\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        //bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"approve fail\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success,) = to.call{value : value}(new bytes(0));\\n        require(success, \\\"eth transfer fail\\\");\\n    }\\n\\n    function _giveToken(address tokenAddress, address account, uint256 amount) private {\\n        if (0 == amount) {\\n            return;\\n        }\\n        IERC20 token = IERC20(tokenAddress);\\n        require(token.balanceOf(address(this)) >= amount, \\\"balance not enough\\\");\\n        token.transfer(account, amount);\\n    }\\n\\n    function _takeToken(address tokenAddress, address from, address to, uint256 tokenNum) private {\\n        IERC20 token = IERC20(tokenAddress);\\n        require(token.balanceOf(address(from)) >= tokenNum, \\\"balance not enough\\\");\\n        token.transferFrom(from, to, tokenNum);\\n    }\\n\\n    // ********* setting *********\\n//    function setPoolInfo(uint256 totalAmount, uint256 accMintPerShare, uint256 accMintReward, uint256 mintPerSec,\\n//        uint256 lastMintTime, uint256 totalMintReward) external onlyWhiteList {\\n//        poolInfo.totalAmount = totalAmount;\\n//        poolInfo.accMintPerShare = accMintPerShare;\\n//        poolInfo.accMintReward = accMintReward;\\n//        poolInfo.mintPerSec = mintPerSec;\\n//        poolInfo.lastMintTime = lastMintTime;\\n//        poolInfo.totalMintReward = totalMintReward;\\n//    }\\n//\\n//    function setUserLpInfos(address[] memory account, UserLPInfo[] memory lpInfos) external onlyWhiteList {\\n//        for (uint256 i = 0; i < account.length; i++) {\\n//            _userLPInfo[account[i]] = lpInfos[i];\\n//        }\\n//    }\\n//\\n//    function setInviteAmount(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n//        for (uint256 i = 0; i < account.length; i++) {\\n//            _inviteAmount[account[i]] = amount[i];\\n//        }\\n//    }\\n//\\n//    function setTeamAmount(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n//        for (uint256 i = 0; i < account.length; i++) {\\n//            _teamAmount[account[i]] = amount[i];\\n//        }\\n//    }\\n//\\n//    function setSellJoinAmount(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n//        for (uint256 i = 0; i < account.length; i++) {\\n//            _sellJoinAmount[account[i]] = amount[i];\\n//        }\\n//    }\\n//\\n//    function setReferralAmount(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n//        for (uint256 i = 0; i < account.length; i++) {\\n//            referralAmount[account[i]] = amount[i];\\n//        }\\n//    }\\n//\\n//    function setDepositAmount(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n//        for (uint256 i = 0; i < account.length; i++) {\\n//            depositAmount[account[i]] = amount[i];\\n//        }\\n//    }\\n//\\n//    function setReferralReward(address[] memory account, uint256[] memory amount) external onlyWhiteList {\\n//        for (uint256 i = 0; i < account.length; i++) {\\n//            referralReward[account[i]] = amount[i];\\n//        }\\n//    }\\n//\\n//    function setUserLevels(address[] memory account, uint256[] memory level) external onlyWhiteList {\\n//        for (uint256 i = 0; i < account.length; i++) {\\n//            userLevel[account[i]] = level[i];\\n//        }\\n//    }\\n//\\n//    function setTotalUsd(uint256 amount) external onlyWhiteList {\\n//        _totalUsdt = amount;\\n//    }\\n//\\n//    function setLastDailyReward(uint256 reward) external onlyWhiteList {\\n//        _lastDailyReward = reward;\\n//    }\\n}\",\"keccak256\":\"0xeb47be379409cfdc3a01f3868d6da8665bd394275d182375f0a171555e0d4cff\",\"license\":\"MIT\"},\"contracts/interface/INFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n\\ninterface INFT {\\n    function addTokenReward(uint256 rewardAmount) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n}\",\"keccak256\":\"0xa06dd537bdcde34f676176568c584079729a211bce9f392a5470140dc6007b00\",\"license\":\"MIT\"},\"contracts/interface/ISwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n\\ninterface ISwapFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function feeTo() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\",\"keccak256\":\"0x5849d5f6a26192dc835dd0a452df981b5742afda0fe9ecb564edbb304b6e09e9\",\"license\":\"MIT\"},\"contracts/interface/ISwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface ISwapPair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function sync() external;\\n}\",\"keccak256\":\"0x528ce2a8bd0f10b92a547c7b86bdb098308adb1a1be12a13c4e09964d2047424\",\"license\":\"MIT\"},\"contracts/interface/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface ISwapRouter {\\n    function factory() external pure returns (address);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n}\",\"keccak256\":\"0x8b6dcc30c60ffafe15874d4c3920157a8aa7b5c2141e3d5fefb5593df50397ca\",\"license\":\"MIT\"},\"contracts/interface/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n\\ninterface IToken {\\n    function giveMintReward() external;\\n\\n    function addUserLPAmount(address account, uint256 lpAmount) external;\\n}\\n\",\"keccak256\":\"0xef20803f40e623bfd961ddd3c5486646f1cfc82f7bab120d817917007a7d5c3a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610180604052600360805268878678326eac90000060a05269043c33c193756480000060c052690a968163f0a57b40000060e052691fc3842bd1f071c00000610100526969e10de76676d0800000610120526127106101405262015180610160523480156200006d57600080fd5b5062000079336200007f565b620000cf565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60805160a05160c05160e05161010051610120516101405161016051615fc9620001976000396000818161170c015281816135f5015261508901526000818161278501528181613664015281816139fb015281816150ed0152818161533e015261553801526000818161058b0152612994015260008181610725015261296e015260008181610bfa01526129480152600081816108260152612922015260008181611002015281816128f50152614f2c01526000818161405f015261424c0152615fc96000f3fe6080604052600436106104ce5760003560e01c806385dc300411610276578063b79190451161014f578063e4849b32116100c1578063f0c52e4c11610085578063f0c52e4c1461120d578063f12e6eb71461124a578063f2fde38b1461126a578063f48544c31461128a578063fcfff16f146112a0578063fd3cf885146112b557600080fd5b8063e4849b3214611147578063e5d6563314611167578063e697b5d814611197578063e9f22169146111b7578063ec747edb146111d757600080fd5b8063cef6632d11610113578063cef6632d1461109a578063d5559e21146110c7578063dde40dda146110dd578063de44391a146110fd578063e20ae39214611112578063e3ca487a1461112757600080fd5b8063b791904514610fd0578063bc980f8c14610ff0578063cc396be114611024578063ce4d9f151461105a578063ce5611431461108457600080fd5b8063a5b64e5e116101e8578063b1a8c459116101ac578063b1a8c45914610f1a578063b272d7c314610f3a578063b38dcd7114610f5a578063b612511014610f70578063b64cf2d914610f90578063b75265d314610fb057600080fd5b8063a5b64e5e14610e5c578063a779fe9214610e7c578063aa1a8c6014610e92578063aa8b38d914610ecd578063ac86af9414610eed57600080fd5b806394f738a21161023a57806394f738a214610d345780639551ae4414610d5457806395d4c7bb14610dcf57806398300e1814610dfc578063a40a789c14610e1c578063a4e48ed814610e3c57600080fd5b806385dc300414610c895780638a56d30614610ca95780638da5cb5b14610cc95780638dbdbe6d14610ce757806393b556ad14610d0757600080fd5b80634e71d92d116103a85780636ca9ee1b1161031a5780637d3643b5116102de5780637d3643b514610b9a5780637f15b36b14610bc8578063815a7beb14610be85780638230af5a14610c1c578063834f8f5514610c3c5780638593b2b114610c6957600080fd5b80636ca9ee1b14610af45780636e18b6db14610b0a5780636ec42c2c14610b37578063715018a614610b655780637512474e14610b7a57600080fd5b80635f84aecd1161036c5780635f84aecd146109ed5780636386c1c714610a03578063681982a714610a5e578063692c7bf714610a7e57806369d0373814610a9e57806369da132614610abe57600080fd5b80634e71d92d1461091457806350f62da7146109295780635239a993146109555780635a2f3d09146109755780635ca8e3f2146109cd57600080fd5b80631e8074b511610441578063358764761161040557806335876476146107d45780633a0dde51146107f45780633bf5f934146108145780633c6369fc1461084857806343d726d6146108d5578063449fe500146108ea57600080fd5b80631e8074b51461071357806326e641ea14610747578063280e31cc146107675780632e0dd9c71461079457806333f5780e146107b457600080fd5b80630c28525d116104935780630c28525d146105bb578063119f3eb6146105db578063125bfb661461063f5780631703dd121461065f5780631959a002146106755780631b967ad4146106dd57600080fd5b80625a3ff1146104da578063029a0c9d146105175780630600ffc1146105395780630681c58d146105595780630b2ef5f71461057957600080fd5b366104d557005b600080fd5b3480156104e657600080fd5b50600d546104fa906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561052357600080fd5b50610537610532366004615651565b6112d5565b005b34801561054557600080fd5b5061053761055436600461568d565b611337565b34801561056557600080fd5b50610537610574366004615651565b6113aa565b34801561058557600080fd5b506105ad7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161050e565b3480156105c757600080fd5b506105376105d6366004615651565b611464565b3480156105e757600080fd5b506105fb6105f63660046156cf565b61150d565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200161050e565b34801561064b57600080fd5b5061053761065a3660046156f3565b611641565b34801561066b57600080fd5b506105ad60255481565b34801561068157600080fd5b506106bb6106903660046156cf565b600760205260009081526040902080546001820154600283015460039093015460ff90921692909184565b604080519415158552602085019390935291830152606082015260800161050e565b3480156106e957600080fd5b506105ad6106f83660046156cf565b6001600160a01b031660009081526010602052604090205490565b34801561071f57600080fd5b506105ad7f000000000000000000000000000000000000000000000000000000000000000081565b34801561075357600080fd5b50610537610762366004615651565b6116a0565b34801561077357600080fd5b506105ad6107823660046156cf565b60226020526000908152604090205481565b3480156107a057600080fd5b506105376107af366004615651565b611739565b3480156107c057600080fd5b506105376107cf366004615734565b611792565b3480156107e057600080fd5b506105376107ef366004615760565b611802565b34801561080057600080fd5b5061053761080f366004615651565b611bbe565b34801561082057600080fd5b506105ad7f000000000000000000000000000000000000000000000000000000000000000081565b34801561085457600080fd5b506108a06108633660046156cf565b6008602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e00161050e565b3480156108e157600080fd5b50610537611c17565b3480156108f657600080fd5b506016546109049060ff1681565b604051901515815260200161050e565b34801561092057600080fd5b50610537611c7a565b34801561093557600080fd5b506105ad6109443660046156cf565b602080526000908152604090205481565b34801561096157600080fd5b506105ad6109703660046157f6565b611d2a565b34801561098157600080fd5b506001546002546003546004546005546006546109a095949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00161050e565b3480156109d957600080fd5b506105376109e83660046157f6565b611d65565b3480156109f957600080fd5b506105ad60265481565b348015610a0f57600080fd5b50610a23610a1e3660046156cf565b611dcb565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e08201526101000161050e565b348015610a6a57600080fd5b50610537610a793660046156cf565b611f3b565b348015610a8a57600080fd5b50610537610a99366004615818565b611fb1565b348015610aaa57600080fd5b50610537610ab93660046156cf565b612030565b348015610aca57600080fd5b506104fa610ad93660046156cf565b600f602052600090815260409020546001600160a01b031681565b348015610b0057600080fd5b506105ad60275481565b348015610b1657600080fd5b506105ad610b253660046156cf565b60216020526000908152604090205481565b348015610b4357600080fd5b50610b57610b52366004615851565b6120a6565b60405161050e9291906158ca565b348015610b7157600080fd5b506105376121c5565b348015610b8657600080fd5b50610537610b95366004615a23565b6121d9565b348015610ba657600080fd5b50610bba610bb53660046156cf565b61231d565b60405161050e929190615ae5565b348015610bd457600080fd5b50610537610be3366004615651565b6124ac565b348015610bf457600080fd5b506105ad7f000000000000000000000000000000000000000000000000000000000000000081565b348015610c2857600080fd5b50601c546104fa906001600160a01b031681565b348015610c4857600080fd5b506105ad610c573660046156cf565b60146020526000908152604090205481565b348015610c7557600080fd5b506104fa610c84366004615734565b612505565b348015610c9557600080fd5b50610537610ca43660046156cf565b61253d565b348015610cb557600080fd5b506105ad610cc43660046156cf565b6125b3565b348015610cd557600080fd5b506000546001600160a01b03166104fa565b348015610cf357600080fd5b50610537610d02366004615b3c565b6126a8565b348015610d1357600080fd5b506105ad610d223660046156cf565b60156020526000908152604090205481565b348015610d4057600080fd5b50610537610d4f3660046156cf565b61287c565b348015610d6057600080fd5b50610d69612a00565b604080516001600160a01b039c8d168152602081019b909b52988b16988a01989098526060890196909652608088019490945260a087019290925260c086015260e08501526101008401529092166101208201529015156101408201526101600161050e565b348015610ddb57600080fd5b506105ad610dea3660046156cf565b601f6020526000908152604090205481565b348015610e0857600080fd5b50600e546104fa906001600160a01b031681565b348015610e2857600080fd5b506105ad610e37366004615651565b612a61565b348015610e4857600080fd5b50610537610e57366004615651565b612b8d565b348015610e6857600080fd5b50610537610e77366004615651565b612bee565b348015610e8857600080fd5b506105ad60295481565b348015610e9e57600080fd5b50610eb2610ead366004615651565b612ed3565b6040805193845260208401929092529082015260600161050e565b348015610ed957600080fd5b50610537610ee8366004615734565b613056565b348015610ef957600080fd5b506105ad610f083660046156cf565b60136020526000908152604090205481565b348015610f2657600080fd5b50610537610f35366004615651565b6130b8565b348015610f4657600080fd5b50601a546104fa906001600160a01b031681565b348015610f6657600080fd5b506105ad60195481565b348015610f7c57600080fd5b50610537610f8b3660046156cf565b613126565b348015610f9c57600080fd5b50610537610fab366004615b6a565b61319c565b348015610fbc57600080fd5b50610537610fcb3660046156cf565b613203565b348015610fdc57600080fd5b50610537610feb366004615651565b613291565b348015610ffc57600080fd5b506105ad7f000000000000000000000000000000000000000000000000000000000000000081565b34801561103057600080fd5b506104fa61103f3660046156cf565b601e602052600090815260409020546001600160a01b031681565b34801561106657600080fd5b5061106f613300565b6040805192835260208301919091520161050e565b34801561109057600080fd5b506105ad60175481565b3480156110a657600080fd5b506105ad6110b5366004615651565b60116020526000908152604090205481565b3480156110d357600080fd5b506105ad60245481565b3480156110e957600080fd5b50602a546104fa906001600160a01b031681565b34801561110957600080fd5b506105376133c8565b34801561111e57600080fd5b506105376135e4565b34801561113357600080fd5b50610537611142366004615651565b6136b4565b34801561115357600080fd5b50610537611162366004615651565b61370d565b34801561117357600080fd5b506109046111823660046156cf565b602d6020526000908152604090205460ff1681565b3480156111a357600080fd5b506104fa6111b2366004615734565b613be7565b3480156111c357600080fd5b506105376111d2366004615734565b613c03565b3480156111e357600080fd5b506105ad6111f23660046156cf565b6001600160a01b031660009081526022602052604090205490565b34801561121957600080fd5b50611222613c82565b604080519586526020860194909452928401919091526060830152608082015260a00161050e565b34801561125657600080fd5b50610537611265366004615b87565b613d8b565b34801561127657600080fd5b506105376112853660046156cf565b613dd9565b34801561129657600080fd5b506105ad60185481565b3480156112ac57600080fd5b50610537613e4f565b3480156112c157600080fd5b506105376112d0366004615651565b613ebe565b601c546001600160a01b03163314806112f857506000546001600160a01b031633145b8061130d5750600e546001600160a01b031633145b6113325760405162461bcd60e51b815260040161132990615bb5565b60405180910390fd5b602455565b336000908152602d602052604090205460ff168061135f57506000546001600160a01b031633145b61137b5760405162461bcd60e51b815260040161132990615bde565b6012546113929084906001600160a01b0316613f17565b61139a6140f0565b6113a58383836141d3565b505050565b601c546001600160a01b03163314806113cd57506000546001600160a01b031633145b806113e25750600e546001600160a01b031633145b6113fe5760405162461bcd60e51b815260040161132990615bb5565b60188190556019546017546127109190611419908490615c1a565b6114239190615c1a565b11156114615760405162461bcd60e51b815260206004820152600d60248201526c72617465206f766572666c6f7760981b6044820152606401611329565b50565b601c546001600160a01b031633148061148757506000546001600160a01b031633145b8061149c5750600e546001600160a01b031633145b6114b85760405162461bcd60e51b815260040161132990615bb5565b600081116115085760405162461bcd60e51b815260206004820152601960248201527f72656c65617365206475726174696f6e206d757374203e2030000000000000006044820152606401611329565b602755565b6001600160a01b03818116600081815260086020526040808220805460018201546002830154600480850154600586015460068701546003880154600c5499516370a0823160e01b81529485019b909b52959a94999398939791969095948493919216906370a0823190602401602060405180830381865afa158015611597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bb9190615c32565b600c54604051636eb1769f60e11b81526001600160a01b038e8116600483015230602483015292955091169063dd62ed3e90604401602060405180830381865afa15801561160d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116319190615c32565b9150509193959799909294969850565b601c546001600160a01b031633148061166457506000546001600160a01b031633145b806116795750600e546001600160a01b031633145b6116955760405162461bcd60e51b815260040161132990615bb5565b6113a58383836143b7565b336000908152602d602052604090205460ff16806116c857506000546001600160a01b031633145b6116e45760405162461bcd60e51b815260040161132990615bde565b6116ec6140f0565b80600160050160008282546117019190615c1a565b9091555061173190507f000000000000000000000000000000000000000000000000000000000000000082615c4b565b600455602e55565b601c546001600160a01b031633148061175c57506000546001600160a01b031633145b806117715750600e546001600160a01b031633145b61178d5760405162461bcd60e51b815260040161132990615bb5565b602555565b601c546001600160a01b03163314806117b557506000546001600160a01b031633145b806117ca5750600e546001600160a01b031633145b6117e65760405162461bcd60e51b815260040161132990615bb5565b6001600160a01b03909116600090815260226020526040902055565b600054600160a81b900460ff161580801561182a57506000546001600160a01b90910460ff16105b8061184b5750303b15801561184b5750600054600160a01b900460ff166001145b6118ae5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401611329565b6000805460ff60a01b1916600160a01b17905580156118db576000805460ff60a81b1916600160a81b1790555b6023805460ff19166001179055600980546001600160a01b03808b166001600160a01b03199283168117909355600a80548b8316908416179055678ac7230489e80000600b55600e8054898316908416179055600c8054918a16919092161790556040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa158015611977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199b9190615c6d565b60405163e6a4390560e01b81526001600160a01b0389811660048301528881166024830152919091169063e6a4390590604401602060405180830381865afa1580156119eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0f9190615c6d565b600d80546001600160a01b039283166001600160a01b0319918216179091554260055560128054928716929091168217905560009081526007602090815260408220805460ff19166001179055601190526103207f4ad3b33220dddc71b994a52d72c06b10862965f7d926534c05c00fb7e819e7b7556101f47f17bc176d2408558f6e4111feebc3cab4e16b63e967be91cde721f4c8a488b552556002905261012c7f08037d7b151cc412d25674a4e66b334d9ae9d2e5517a7feaae5cdb828bf1c62855681043561a8829300000602855611aed87896000196144ed565b611afa86896000196144ed565b601a80546001600160a01b0385166001600160a01b03199182168117909255601c805482169092179091556003602b55602a805490911661dead179055611388601755610fa06018556101f46019556127106025556127746026556276a700602755620d2f00602955611b6c826145f0565b8015611bb4576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b601c546001600160a01b0316331480611be157506000546001600160a01b031633145b80611bf65750600e546001600160a01b031633145b611c125760405162461bcd60e51b815260040161132990615bb5565b602b55565b601c546001600160a01b0316331480611c3a57506000546001600160a01b031633145b80611c4f5750600e546001600160a01b031633145b611c6b5760405162461bcd60e51b815260040161132990615bb5565b6023805460ff19166001179055565b336000908152600760205260409020611c94816001614640565b60038101548015611cbe57600c54611cb6906001600160a01b031633836143b7565b600060038301555b600c60009054906101000a90046001600160a01b03166001600160a01b0316632e05661b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611d0e57600080fd5b505af1158015611d22573d6000803e3d6000fd5b505050505050565b6000821580611d395750600583115b15611d4657506000611d5f565b6064611d528484615c8a565b611d5c9190615c4b565b90505b92915050565b601c546001600160a01b0316331480611d8857506000546001600160a01b031633145b80611d9d5750600e546001600160a01b031633145b611db95760405162461bcd60e51b815260040161132990615bb5565b60009182526011602052604090912055565b6001600160a01b038181166000818152600760205260408082206001810154600a5492516370a0823160e01b8152600481019590955294929384938493849384938493849316906370a0823190602401602060405180830381865afa158015611e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5c9190615c32565b600a54604051636eb1769f60e11b81526001600160a01b038d81166004830152306024830152929a5091169063dd62ed3e90604401602060405180830381865afa158015611eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed29190615c32565b96508060030154611ee28b6125b3565b611eec9190615c1a565b6001600160a01b03909a16600090815260136020908152604080832054601b8352818420546015845282852054601490945291909320549b9d9a9c999b999a9299909850909650945092505050565b601c546001600160a01b0316331480611f5e57506000546001600160a01b031633145b80611f735750600e546001600160a01b031633145b611f8f5760405162461bcd60e51b815260040161132990615bb5565b602a80546001600160a01b0319166001600160a01b0392909216919091179055565b601c546001600160a01b0316331480611fd457506000546001600160a01b031633145b80611fe95750600e546001600160a01b031633145b6120055760405162461bcd60e51b815260040161132990615bb5565b6001600160a01b03919091166000908152602d60205260409020805460ff1916911515919091179055565b601c546001600160a01b031633148061205357506000546001600160a01b031633145b806120685750600e546001600160a01b031633145b6120845760405162461bcd60e51b815260040161132990615bb5565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03831660009081526010602052604081208054606091908484036120cf578094505b8493508467ffffffffffffffff8111156120eb576120eb6158e3565b604051908082528060200260200182016040528015612114578160200160208202803683370190505b5092506000865b6121258789615c1a565b8110156121b85782811061213e575093506121bd915050565b83818154811061215057612150615ca9565b9060005260206000200160009054906101000a90046001600160a01b031685838151811061218057612180615ca9565b6001600160a01b0390921660209283029190910190910152816121a281615cbf565b92505080806121b090615cbf565b91505061211b565b505050505b935093915050565b6121cd6146c5565b6121d760006145f0565b565b601c546001600160a01b03163314806121fc57506000546001600160a01b031633145b806122115750600e546001600160a01b031633145b61222d5760405162461bcd60e51b815260040161132990615bb5565b805182511461227e5760405162461bcd60e51b815260206004820152601a60248201527f4172726179206c656e6774687320646f206e6f74206d617463680000000000006044820152606401611329565b60005b82518110156113a55781818151811061229c5761229c615ca9565b6020026020010151600760008584815181106122ba576122ba615ca9565b6020908102919091018101516001600160a01b031682528181019290925260409081016000208351815460ff191690151517815591830151600183015582015160028201556060909101516003909101558061231581615cbf565b915050612281565b6001600160a01b0381166000908152601d60205260409020805460609182918067ffffffffffffffff811115612355576123556158e3565b60405190808252806020026020018201604052801561237e578160200160208202803683370190505b5093508067ffffffffffffffff81111561239a5761239a6158e3565b6040519080825280602002602001820160405280156123c3578160200160208202803683370190505b5092506000805b828110156124a3578281106123e25750505050915091565b60008482815481106123f6576123f6615ca9565b9060005260206000200160009054906101000a90046001600160a01b031690508087848151811061242957612429615ca9565b6001600160a01b039283166020918202929092018101919091529082166000908152601f82526040808220549280529020546124659190615c1a565b86848151811061247757612477615ca9565b60209081029190910101528261248c81615cbf565b93505050808061249b90615cbf565b9150506123ca565b50505050915091565b601c546001600160a01b03163314806124cf57506000546001600160a01b031633145b806124e45750600e546001600160a01b031633145b6125005760405162461bcd60e51b815260040161132990615bb5565b602855565b6010602052816000526040600020818154811061252157600080fd5b6000918252602090912001546001600160a01b03169150829050565b601c546001600160a01b031633148061256057506000546001600160a01b031633145b806125755750600e546001600160a01b031633145b6125915760405162461bcd60e51b815260040161132990615bb5565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600760205260408120600181810154909190156126a157600482015442908082111561269e5760006125f48284615cd8565b85600301546126039190615c8a565b6005860154600287015491925090600081831161262157600061262b565b61262b8284615cd8565b905080841161263a578361263c565b805b6002880154895491955090670de0b6b3a76400009061265b8783615c8a565b6126659190615c4b565b8a600101546126749190615c1a565b89600101546126839190615c8a565b61268d9190615c4b565b6126979190615cd8565b9850505050505b50505b5050919050565b60235460ff16156126eb5760405162461bcd60e51b815260206004820152600d60248201526c6465706f73697420706175736560981b6044820152606401611329565b600b5483101561272f5760405162461bcd60e51b815260206004820152600f60248201526e6465706f73697420746f6f206c6f7760881b6044820152606401611329565b3383602c60008282546127429190615c1a565b9091555061275290508183613f17565b600a5461276a906001600160a01b031682308761471f565b612777818585600161484b565b61277f6140f0565b6127c3817f0000000000000000000000000000000000000000000000000000000000000000602554876127b29190615c8a565b6127bc9190615c4b565b60016141d3565b600c60009054906101000a90046001600160a01b03166001600160a01b0316632e05661b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561281357600080fd5b505af1158015612827573d6000803e3d6000fd5b505050506128358285614bac565b612840848284614db7565b60405184906001600160a01b038316907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c90600090a350505050565b6001600160a01b0381166000908152601d602052604090205460011015611461576001600160a01b03811660009081526020808052604080832054601f9092528220546128c99190615c1a565b6001600160a01b03831660009081526022602052604080822054815160a081019092529293508061291b7f00000000000000000000000000000000000000000000000000000000000000006002615c8a565b81526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081525090506129c484828585614e73565b80156129d05750600582105b156129fa576129e0826001615c1a565b6001600160a01b0385166000908152602260205260409020555b50505050565b600a54600c54602c54600154602e546001600160a01b03948516946012941692849290916000808080612a31615070565b600b546012546023549d9e9c9d9b9c9a9b999a9899979892979196506001600160a01b0316945060ff1692509050565b604080516002808252606082018352600092839291906020830190803683375050600a5482519293506001600160a01b031691839150600090612aa657612aa6615ca9565b6001600160a01b039283166020918202929092010152600c54825191169082906001908110612ad757612ad7615ca9565b6001600160a01b0392831660209182029290920101526009546000911663d06ca61f612b04600287615c4b565b846040518363ffffffff1660e01b8152600401612b229291906158ca565b600060405180830381865afa158015612b3f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b679190810190615cef565b905080600181518110612b7c57612b7c615ca9565b602002602001015192505050919050565b601c546001600160a01b0316331480612bb057506000546001600160a01b031633145b80612bc55750600e546001600160a01b031633145b612be15760405162461bcd60e51b815260040161132990615bb5565b612be96140f0565b600455565b333214612c2a5760405162461bcd60e51b815260206004820152600a6024820152693737ba1027b934b3b4b760b11b6044820152606401611329565b3360009081526008602052604090206003810154428115801590612c4d57508181115b15612cce576005830154600090612c648484615cd8565b8560040154612c739190615c8a565b612c7d9190615c4b565b90506000846002015485600101548660000154612c9a9190615cd8565b612ca49190615cd8565b905080821115612cb2578091505b81856001016000828254612cc69190615c1a565b909155505050505b81811115612cde57600383018190555b602b54836006015410612d285760405162461bcd60e51b81526020600482015260126024820152710e6e0cacac8aae0a8d2daca40d2e640dac2f60731b6044820152606401611329565b600683018054906000612d3a83615cbf565b91905055506000612d4961513e565b905084811115612d9b5760405162461bcd60e51b815260206004820152601860248201527f746f6b656e20616d6f756e7420697320746f6f206d75636800000000000000006044820152606401611329565b600c54602a54612dba916001600160a01b03908116913391168461471f565b60028401546001850154855460009291612dd391615cd8565b612ddd9190615cd8565b905060008560040154866005015483612df69190615c8a565b612e009190615c4b565b60048701839055602954909150808211612e5c5760405162461bcd60e51b815260206004820152601c60248201527f72656c656173654475726174696f6e20697320746f6f2073686f7274000000006044820152606401611329565b612e668183615cd8565b6005880155600c5460408051632e05661b60e01b815290516001600160a01b0390921691632e05661b9160048082019260009290919082900301818387803b158015612eb157600080fd5b505af1158015612ec5573d6000803e3d6000fd5b505050505050505050505050565b6040805160028082526060820183526000928392839283926020830190803683375050600c5482519293506001600160a01b031691839150600090612f1a57612f1a615ca9565b6001600160a01b039283166020918202929092010152600a54825191169082906001908110612f4b57612f4b615ca9565b6001600160a01b03928316602091820292909201015260095460405163d06ca61f60e01b8152600092919091169063d06ca61f90612f8f90899086906004016158ca565b600060405180830381865afa158015612fac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612fd49190810190615cef565b905080600181518110612fe957612fe9615ca9565b60200260200101519450612710601754866130049190615c8a565b61300e9190615c4b565b9350612710601854866130219190615c8a565b61302b9190615c4b565b9250612710613038615070565b6130429085615c8a565b61304c9190615c4b565b9496939550505050565b601c546001600160a01b031633148061307957506000546001600160a01b031633145b8061308e5750600e546001600160a01b031633145b6130aa5760405162461bcd60e51b815260040161132990615bb5565b6130b4828261516f565b5050565b601c546001600160a01b03163314806130db57506000546001600160a01b031633145b806130f05750600e546001600160a01b031633145b61310c5760405162461bcd60e51b815260040161132990615bb5565b601781905560195460185461271091906114199084615c1a565b601c546001600160a01b031633148061314957506000546001600160a01b031633145b8061315e5750600e546001600160a01b031633145b61317a5760405162461bcd60e51b815260040161132990615bb5565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b601c546001600160a01b03163314806131bf57506000546001600160a01b031633145b806131d45750600e546001600160a01b031633145b6131f05760405162461bcd60e51b815260040161132990615bb5565b6016805460ff1916911515919091179055565b601c546001600160a01b031633148061322657506000546001600160a01b031633145b8061323b5750600e546001600160a01b031633145b6132575760405162461bcd60e51b815260040161132990615bb5565b601280546001600160a01b039092166001600160a01b0319909216821790556000908152600760205260409020805460ff19166001179055565b601c546001600160a01b03163314806132b457506000546001600160a01b031633145b806132c95750600e546001600160a01b031633145b6132e55760405162461bcd60e51b815260040161132990615bb5565b60198190556018546017546127109183916114199190615c1a565b6000806000600d60009054906101000a90046001600160a01b03169050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561335e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133829190615d9c565b50600c54600a546001600160701b0393841695509190921692506001600160a01b03918216911610156133ba578194508093506133c1565b8094508193505b5050509091565b33321461340c5760405162461bcd60e51b815260206004820152601260248201527131b630b4b6a628103737ba1027b934b3b4b760711b6044820152606401611329565b33600090815260086020526040902060038101544290158015906134335750816003015481115b156134b9576000826005015483600301548361344f9190615cd8565b846004015461345e9190615c8a565b6134689190615c4b565b905060008360020154846001015485600001546134859190615cd8565b61348f9190615cd8565b90508082111561349d578091505b818460010160008282546134b19190615c1a565b909155505050505b6001820154801561356357600d546134db906001600160a01b031633836143b7565b60008360010181905550808360020160008282546134f99190615c1a565b9091555050600c5460405163899d9c9d60e01b8152336004820152602481018390526001600160a01b039091169063899d9c9d90604401600060405180830381600087803b15801561354a57600080fd5b505af115801561355e573d6000803e3d6000fd5b505050505b826003015482111561357757600383018290555b600c60009054906101000a90046001600160a01b03166001600160a01b0316632e05661b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156135c757600080fd5b505af11580156135db573d6000803e3d6000fd5b50505050505050565b60245460008190036135f35750565b7f00000000000000000000000000000000000000000000000000000000000000004261361f8284615c1a565b81101561362b57505050565b6000826136388584615cd8565b6136429190615c4b565b905061364e8382615c8a565b6136589085615c1a565b602455602554613688827f0000000000000000000000000000000000000000000000000000000000000000615ec5565b826026546136969190615ec5565b6136a09083615c8a565b6136aa9190615c4b565b6025555050505050565b601c546001600160a01b03163314806136d757506000546001600160a01b031633145b806136ec5750600e546001600160a01b031633145b6137085760405162461bcd60e51b815260040161132990615bb5565b602955565b3332146137495760405162461bcd60e51b815260206004820152600a6024820152693737ba1027b934b3b4b760b11b6044820152606401611329565b60165460ff16156137845760405162461bcd60e51b8152602060048201526005602482015264706175736560d81b6044820152606401611329565b60125461379b9033906001600160a01b0316613f17565b600c546137b3906001600160a01b031633308461471f565b600a546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a0823190602401602060405180830381865afa158015613800573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138249190615c32565b60408051600280825260608201835292935060009290916020830190803683375050600c5482519293506001600160a01b03169183915060009061386a5761386a615ca9565b6001600160a01b039283166020918202929092010152600a5482519116908290600190811061389b5761389b615ca9565b6001600160a01b039283166020918202929092010152600954604051635c11d79560e01b8152911690635c11d795906138e1908790600090869030904290600401615ed1565b600060405180830381600087803b1580156138fb57600080fd5b505af115801561390f573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508491506001600160a01b038616906370a0823190602401602060405180830381865afa15801561395c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139809190615c32565b61398a9190615cd8565b905060006127106017548361399f9190615c8a565b6139a99190615c4b565b600a549091506139c3906001600160a01b031633836143b7565b6000612710601854846139d69190615c8a565b6139e09190615c4b565b90506139ef338260008061484b565b6139f76140f0565b60007f000000000000000000000000000000000000000000000000000000000000000060255483613a289190615c8a565b613a329190615c4b565b9050613a40338260006141d3565b336000908152601b602052604081208054839290613a5f908490615c1a565b909155505060195460009061271090613a789087615c8a565b613a829190615c4b565b600a54600e54919250613aa2916001600160a01b039182169116836143b7565b600e54604051632841a14360e01b8152600481018390526001600160a01b0390911690632841a14390602401600060405180830381600087803b158015613ae857600080fd5b505af1158015613afc573d6000803e3d6000fd5b50505050600081848688613b109190615cd8565b613b1a9190615cd8565b613b249190615cd8565b600a54601c54919250613b44916001600160a01b039182169116836143b7565b600c60009054906101000a90046001600160a01b03166001600160a01b0316632e05661b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613b9457600080fd5b505af1158015613ba8573d6000803e3d6000fd5b50506040518792508c915033907fed7a144fad14804d5c249145e3e0e2b63a9eb455b76aee5bc92d711e9bba3e4a90600090a450505050505050505050565b601d602052816000526040600020818154811061252157600080fd5b601c546001600160a01b0316331480613c2657506000546001600160a01b031633145b80613c3b5750600e546001600160a01b031633145b613c575760405162461bcd60e51b815260040161132990615bb5565b601254613c6e9083906001600160a01b0316613f17565b613c766140f0565b6130b4828260006141d3565b6000806000806000600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d019190615c32565b600d546040516370a0823160e01b81523060048201529196506001600160a01b0316906370a0823190602401602060405180830381865afa158015613d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d6e9190615c32565b9350602b5492506028549150613d8261513e565b90509091929394565b336000908152602d602052604090205460ff1680613db357506000546001600160a01b031633145b613dcf5760405162461bcd60e51b815260040161132990615bde565b6130b48282613f17565b613de16146c5565b6001600160a01b038116613e465760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611329565b611461816145f0565b601c546001600160a01b0316331480613e7257506000546001600160a01b031633145b80613e875750600e546001600160a01b031633145b613ea35760405162461bcd60e51b815260040161132990615bb5565b602454600003613eb257426024555b6023805460ff19169055565b601c546001600160a01b0316331480613ee157506000546001600160a01b031633145b80613ef65750600e546001600160a01b031633145b613f125760405162461bcd60e51b815260040161132990615bb5565b602655565b6001600160a01b0382166000908152600760205260409020805460ff166113a5576001600160a01b038216600003613f7d5760405162461bcd60e51b81526020600482015260096024820152680696e7669746f7220360bc1b6044820152606401611329565b6001600160a01b03821660009081526007602052604090205460ff16613fd75760405162461bcd60e51b815260206004820152600f60248201526e696e7669746f72202141637469766560881b6044820152606401611329565b6001600160a01b038083166000818152601d60209081526040808320805460018181018355918552838520018054968a166001600160a01b03199788168117909155808552601e84528285208054881687179055600f84528285208054881687179055948452601083529083208054918201815583529082200180549093169091179091555b7f00000000000000000000000000000000000000000000000000000000000000008110156140df576001600160a01b03831660009081526015602052604081208054600192906140ae908490615c1a565b90915550506001600160a01b039283166000908152600f60205260409020549092169182156140df5760010161405d565b50805460ff19166001178155505050565b6140f86135e4565b600554600190429080821161410c57505050565b600483018290556002830154600584015480821061412b575050505050565b8454600386015481158015906141415750806000105b156135db5760006141528688615cd8565b61415c9083615c8a565b9050600061416a8686615cd8565b905080821115614178578091505b8361418b83670de0b6b3a7640000615c8a565b6141959190615c4b565b8960010160008282546141a89190615c1a565b92505081905550818960020160008282546141c39190615c1a565b9091555050505050505050505050565b6001600160a01b0383166000908152600760205260408120906141f7908290614640565b60018101546142068482615c1a565b60018084018290555490915061421c8582615c1a565b600254909150670de0b6b3a76400006142358285615c8a565b61423f9190615c4b565b600285015584156143ac577f00000000000000000000000000000000000000000000000000000000000000006000888180805b858110156143a5576001600160a01b038085166000908152600f602052604090205416925082156143a5576001600160a01b038316600090815260076020526040812095506142c2908690614640565b600081815260116020526040812054612710906142df908f615c8a565b6142e99190615c4b565b6001600160a01b038516600090815260136020526040812080549293508392909190614316908490615c1a565b90915550506001600160a01b038416600090815260146020526040812080548f9290614343908490615c1a565b9091555050600186015492506143598184615c1a565b600187018190559250670de0b6b3a76400006143758985615c8a565b61437f9190615c4b565b600287015561438e818a615c1a565b9850839450508061439e90615cbf565b9050614272565b5050505050505b506001555050505050565b806000036143c457505050565b6040516370a0823160e01b8152306004820152839082906001600160a01b038316906370a0823190602401602060405180830381865afa15801561440c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144309190615c32565b10156144735760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b6044820152606401611329565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905282169063a9059cbb906044016020604051808303816000875af11580156144c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144e69190615f0d565b5050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916145499190615f2a565b6000604051808303816000865af19150503d8060008114614586576040519150601f19603f3d011682016040523d82523d6000602084013e61458b565b606091505b50915091508180156145b55750805115806145b55750808060200190518101906145b59190615f0d565b6144e65760405162461bcd60e51b815260206004820152600c60248201526b185c1c1c9bdd994819985a5b60a21b6044820152606401611329565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b801561464e5761464e6140f0565b6001820154156130b4576000670de0b6b3a7640000600180015484600101546146779190615c8a565b6146819190615c4b565b905060008360020154826146959190615cd8565b905080156129fa57818460020181905550808460030160008282546146ba9190615c1a565b909155505050505050565b6000546001600160a01b031633146121d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611329565b6040516370a0823160e01b81526001600160a01b038481166004830152859183918316906370a0823190602401602060405180830381865afa158015614769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061478d9190615c32565b10156147d05760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b6044820152606401611329565b6040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528216906323b872dd906064016020604051808303816000875af1158015614827573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d229190615f0d565b600c546040516370a0823160e01b81523060048201526001600160a01b0390911690819060009082906370a0823190602401602060405180830381865afa15801561489a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148be9190615c32565b600a546040805160028082526060820183529394506001600160a01b039092169260009291602083019080368337019050509050818160008151811061490657614906615ca9565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061493a5761493a615ca9565b6001600160a01b03928316602091820292909201015260095416635c11d79561496460028b615c4b565b898430426040518663ffffffff1660e01b8152600401614988959493929190615ed1565b600060405180830381600087803b1580156149a257600080fd5b505af11580156149b6573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508591506001600160a01b038716906370a0823190602401602060405180830381865afa158015614a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a279190615c32565b614a319190615cd8565b9050600087614a4b57601a546001600160a01b0316614a4d565b305b90506000600960009054906101000a90046001600160a01b03166001600160a01b031663e8e33700868a60028f614a849190615c4b565b6040516001600160e01b031960e086901b1681526001600160a01b039384166004820152918316602483015260448201526064810187905260006084820181905260a482015290851660c48201524260e4820152610104016060604051808303816000875af1158015614afb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b1f9190615f65565b925050508815614b3857614b338c82615220565b612ec5565b600c5460405163899d9c9d60e01b81526001600160a01b038481166004830152602482018490529091169063899d9c9d90604401600060405180830381600087803b158015614b8657600080fd5b505af1158015614b9a573d6000803e3d6000fd5b50505050505050505050505050505050565b6001600160a01b0382811660008181526022602052604080822054600e5491516370a0823160e01b815260048101949094529391929116906370a0823190602401602060405180830381865afa158015614c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c2e9190615c32565b90506000614c3c8385611d2a565b9050600083118015614c4e5750600082115b15614c6d57614c5d858261533a565b614c6885848661541e565b6144e6565b6001600160a01b038086166000908152601e6020526040812054909116905b6001600160a01b03821615801590614ca2575080155b156135db576001600160a01b0382811660008181526022602052604080822054600e5491516370a0823160e01b815260048101949094529391929116906370a0823190602401602060405180830381865afa158015614d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d299190615c32565b9050600082118015614d3b5750600081115b15614d655760019250614d4e8289611d2a565b9450614d5a848661533a565b614d6584838a61541e565b6001600160a01b038085166000818152601e60205260409020549091169003614d915760009350614db0565b6001600160a01b039384166000908152601e6020526040902054909316925b5050614c8c565b6001600160a01b038216600090815260208052604081208054859290614dde908490615c1a565b909155508190505b6001600160a01b038116156129fa576001600160a01b0381166000908152601f602052604081208054869290614e1d908490615c1a565b90915550614e2c90508161287c565b6001600160a01b038082166000818152601e60205260409020549091169003614e53575060005b6001600160a01b039081166000908152601e602052604090205416614de6565b6001600160a01b0384166000908152601d6020908152604080832080548251818502810185019093528083528493830182828015614eda57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614ebc575b50505050509050848360058110614ef357614ef3615ca9565b60200201518410615062576000805b6001600160a01b0388166000908152601d602052604090205481101561505f5784600003614fe9577f000000000000000000000000000000000000000000000000000000000000000060206000858481518110614f6157614f61615ca9565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054601f6000868581518110614fa057614fa0615ca9565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054614fd39190615c1a565b10614fe457614fe182615cbf565b91505b61503b565b60016022600085848151811061500157615001615ca9565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020541061503b5761503882615cbf565b91505b6002821061504f5760019350505050615068565b61505881615cbf565b9050614f02565b50505b60009150505b949350505050565b602554602454600091908083036150875750919050565b7f0000000000000000000000000000000000000000000000000000000000000000426150b38284615c1a565b8110156150c35750919392505050565b6000826150d08584615cd8565b6150da9190615c4b565b60265490915060005b82811015615132577f00000000000000000000000000000000000000000000000000000000000000006151168389615c8a565b6151209190615c4b565b965061512b81615cbf565b90506150e3565b50949695505050505050565b600080600061514b613300565b91509150818160285461515e9190615c8a565b6151689190615c4b565b9250505090565b604080516000808252602082019092526001600160a01b0384169083906040516151999190615f2a565b60006040518083038185875af1925050503d80600081146151d6576040519150601f19603f3d011682016040523d82523d6000602084013e6151db565b606091505b50509050806113a55760405162461bcd60e51b8152602060048201526011602482015270195d1a081d1c985b9cd9995c8819985a5b607a1b6044820152606401611329565b6001600160a01b0382166000908152600860205260409020600381015442811580159061524c57508181115b156152cd5760058301546000906152638484615cd8565b85600401546152729190615c8a565b61527c9190615c4b565b905060008460020154856001015486600001546152999190615cd8565b6152a39190615cd8565b9050808211156152b1578091505b818560010160008282546152c59190615c1a565b909155505050505b600283015460018401548454600092916152e691615cd8565b6152f09190615cd8565b9050848460000160008282546153069190615c1a565b9091555061531690508582615c1a565b6004850155602754600585015582821115611d225760038401829055505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006025548361536b9190615c8a565b6153759190615c4b565b9050615383838260006141d3565b6001600160a01b0383166000818152602260205260408082205490519092849284927fb6e5be43155b74262b7be6ccc5012bb6df33759145b8a6d4bc9f3e98c6d87b489190a4600a546153e0906001600160a01b031685856143b7565b8281856001600160a01b03167f449ba527ea8f6ec8dc6af63b425e187506ac5b1635308d35ba1fe32da2b0d2e360405160405180910390a450505050565b6001600160a01b038084166000908152601e6020526040812054909116908390615449826001615c1a565b90505b6001600160a01b03831615801590615465575060058211155b15611d22576001600160a01b0383166000908152602260205260408120549061548e8287611d2a565b90508382118061549d57508282145b156154c3576154ac858261533a565b8193508160016154bc9190615c1a565b92506154e2565b8382036154e2576154d48582615534565b6154df826001615c1a565b93505b6001600160a01b038086166000818152601e6020526040902054909116900361550e576000945061552d565b6001600160a01b039485166000908152601e6020526040902054909416935b505061544c565b60007f0000000000000000000000000000000000000000000000000000000000000000602554836155659190615c8a565b61556f9190615c4b565b905060006064615580836014615c8a565b61558a9190615c4b565b9050615598848260006141d3565b6001600160a01b0384166000818152602260205260408082205490519092849284927fb6e5be43155b74262b7be6ccc5012bb6df33759145b8a6d4bc9f3e98c6d87b489190a4600060646155ed866014615c8a565b6155f79190615c4b565b600a54909150615611906001600160a01b031687836143b7565b8082876001600160a01b03167f449ba527ea8f6ec8dc6af63b425e187506ac5b1635308d35ba1fe32da2b0d2e360405160405180910390a4505050505050565b60006020828403121561566357600080fd5b5035919050565b6001600160a01b038116811461146157600080fd5b801515811461146157600080fd5b6000806000606084860312156156a257600080fd5b83356156ad8161566a565b92506020840135915060408401356156c48161567f565b809150509250925092565b6000602082840312156156e157600080fd5b81356156ec8161566a565b9392505050565b60008060006060848603121561570857600080fd5b83356157138161566a565b925060208401356157238161566a565b929592945050506040919091013590565b6000806040838503121561574757600080fd5b82356157528161566a565b946020939093013593505050565b600080600080600080600060e0888a03121561577b57600080fd5b87356157868161566a565b965060208801356157968161566a565b955060408801356157a68161566a565b945060608801356157b68161566a565b935060808801356157c68161566a565b925060a08801356157d68161566a565b915060c08801356157e68161566a565b8091505092959891949750929550565b6000806040838503121561580957600080fd5b50508035926020909101359150565b6000806040838503121561582b57600080fd5b82356158368161566a565b915060208301356158468161567f565b809150509250929050565b60008060006060848603121561586657600080fd5b83356158718161566a565b95602085013595506040909401359392505050565b600081518084526020808501945080840160005b838110156158bf5781516001600160a01b03168752958201959082019060010161589a565b509495945050505050565b8281526040602082015260006150686040830184615886565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561591c5761591c6158e3565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561594b5761594b6158e3565b604052919050565b600067ffffffffffffffff82111561596d5761596d6158e3565b5060051b60200190565b600082601f83011261598857600080fd5b8135602061599d61599883615953565b615922565b82815260079290921b840181019181810190868411156159bc57600080fd5b8286015b84811015615a1857608081890312156159d95760008081fd5b6159e16158f9565b81356159ec8161567f565b8152818501358582015260408083013590820152606080830135908201528352918301916080016159c0565b509695505050505050565b60008060408385031215615a3657600080fd5b823567ffffffffffffffff80821115615a4e57600080fd5b818501915085601f830112615a6257600080fd5b81356020615a7261599883615953565b82815260059290921b84018101918181019089841115615a9157600080fd5b948201945b83861015615ab8578535615aa98161566a565b82529482019490820190615a96565b96505086013592505080821115615ace57600080fd5b50615adb85828601615977565b9150509250929050565b604081526000615af86040830185615886565b82810360208481019190915284518083528582019282019060005b81811015615b2f57845183529383019391830191600101615b13565b5090979650505050505050565b600080600060608486031215615b5157600080fd5b833592506020840135915060408401356156c48161566a565b600060208284031215615b7c57600080fd5b81356156ec8161567f565b60008060408385031215615b9a57600080fd5b8235615ba58161566a565b915060208301356158468161566a565b6020808252600f908201526e1bdb9b1e481dda1a5d19481b1a5cdd608a1b604082015260600190565b6020808252600c908201526b1bdb9b1e481c1c9bda9958dd60a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115615c2d57615c2d615c04565b500190565b600060208284031215615c4457600080fd5b5051919050565b600082615c6857634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215615c7f57600080fd5b81516156ec8161566a565b6000816000190483118215151615615ca457615ca4615c04565b500290565b634e487b7160e01b600052603260045260246000fd5b600060018201615cd157615cd1615c04565b5060010190565b600082821015615cea57615cea615c04565b500390565b60006020808385031215615d0257600080fd5b825167ffffffffffffffff811115615d1957600080fd5b8301601f81018513615d2a57600080fd5b8051615d3861599882615953565b81815260059190911b82018301908381019087831115615d5757600080fd5b928401925b82841015615d7557835182529284019290840190615d5c565b979650505050505050565b80516001600160701b0381168114615d9757600080fd5b919050565b600080600060608486031215615db157600080fd5b615dba84615d80565b9250615dc860208501615d80565b9150604084015163ffffffff811681146156c457600080fd5b600181815b80851115615e1c578160001904821115615e0257615e02615c04565b80851615615e0f57918102915b93841c9390800290615de6565b509250929050565b600082615e3357506001611d5f565b81615e4057506000611d5f565b8160018114615e565760028114615e6057615e7c565b6001915050611d5f565b60ff841115615e7157615e71615c04565b50506001821b611d5f565b5060208310610133831016604e8410600b8410161715615e9f575081810a611d5f565b615ea98383615de1565b8060001904821115615ebd57615ebd615c04565b029392505050565b6000611d5c8383615e24565b85815284602082015260a060408201526000615ef060a0830186615886565b6001600160a01b0394909416606083015250608001529392505050565b600060208284031215615f1f57600080fd5b81516156ec8161567f565b6000825160005b81811015615f4b5760208186018101518583015201615f31565b81811115615f5a576000828501525b509190910192915050565b600080600060608486031215615f7a57600080fd5b835192506020840151915060408401519050925092509256fea2646970667358221220115c5dc22b6155df5fb580f9850db3333445e8c942d7690f912815919db335d264736f6c634300080f0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 506,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 774,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "poolInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(PoolInfo)756_storage"
      },
      {
        "astId": 779,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "userInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(UserInfo)743_storage)"
      },
      {
        "astId": 784,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_userLPInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UserLPInfo)771_storage)"
      },
      {
        "astId": 787,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_swapRouter",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ISwapRouter)4923"
      },
      {
        "astId": 789,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_usdt",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 791,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_minAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 793,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_mintRewardToken",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 795,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lp",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 798,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_nft",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(INFT)4814"
      },
      {
        "astId": 802,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_invitor",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 807,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_binder",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 811,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_inviteFee",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 816,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_defaultInvitor",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 820,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_inviteAmount",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 824,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_teamAmount",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 828,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_teamNum",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 830,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_pauseSell",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 832,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellSelfRate",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 834,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellJoinRate",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 836,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellNFTRate",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 838,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellLPReceiver",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 842,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_sellJoinAmount",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 844,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_fundAddress",
        "offset": 0,
        "slot": "28",
        "type": "t_address"
      },
      {
        "astId": 849,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "referrals",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 853,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "superAccount",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 857,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "referralAmount",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 861,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "depositAmount",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 865,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "referralReward",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 869,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "userLevel",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 886,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_pauseJoin",
        "offset": 0,
        "slot": "35",
        "type": "t_bool"
      },
      {
        "astId": 888,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lastDailyUpTime",
        "offset": 0,
        "slot": "36",
        "type": "t_uint256"
      },
      {
        "astId": 890,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lastAmountRate",
        "offset": 0,
        "slot": "37",
        "type": "t_uint256"
      },
      {
        "astId": 892,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_amountDailyUp",
        "offset": 0,
        "slot": "38",
        "type": "t_uint256"
      },
      {
        "astId": 900,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lpReleaseDuration",
        "offset": 0,
        "slot": "39",
        "type": "t_uint256"
      },
      {
        "astId": 902,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_speedUpCost",
        "offset": 0,
        "slot": "40",
        "type": "t_uint256"
      },
      {
        "astId": 904,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_speedUpDuration",
        "offset": 0,
        "slot": "41",
        "type": "t_uint256"
      },
      {
        "astId": 906,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_speedUpReceiver",
        "offset": 0,
        "slot": "42",
        "type": "t_address"
      },
      {
        "astId": 908,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_speedUpMaxTime",
        "offset": 0,
        "slot": "43",
        "type": "t_uint256"
      },
      {
        "astId": 910,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_totalUsdt",
        "offset": 0,
        "slot": "44",
        "type": "t_uint256"
      },
      {
        "astId": 914,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_inProject",
        "offset": 0,
        "slot": "45",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 916,
        "contract": "contracts/MintPool.sol:MintPool",
        "label": "_lastDailyReward",
        "offset": 0,
        "slot": "46",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INFT)4814": {
        "encoding": "inplace",
        "label": "contract INFT",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)4923": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)743_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MintPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)743_storage"
      },
      "t_mapping(t_address,t_struct(UserLPInfo)771_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MintPool.UserLPInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserLPInfo)771_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoolInfo)756_storage": {
        "encoding": "inplace",
        "label": "struct MintPool.PoolInfo",
        "members": [
          {
            "astId": 745,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 747,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "accMintPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 749,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "accMintReward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 751,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "mintPerSec",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 753,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "lastMintTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 755,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "totalMintReward",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserInfo)743_storage": {
        "encoding": "inplace",
        "label": "struct MintPool.UserInfo",
        "members": [
          {
            "astId": 736,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 738,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 740,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "rewardMintDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 742,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "calMintReward",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserLPInfo)771_storage": {
        "encoding": "inplace",
        "label": "struct MintPool.UserLPInfo",
        "members": [
          {
            "astId": 758,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "lockAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 760,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "calAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 762,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 764,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "lastReleaseTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 766,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "releaseInitAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 768,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "releaseDuration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 770,
            "contract": "contracts/MintPool.sol:MintPool",
            "label": "speedUpTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}